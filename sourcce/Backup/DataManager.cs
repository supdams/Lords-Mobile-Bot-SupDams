// Decompiled with JetBrains decompiler
// Type: DataManager
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4857610B-EF43-43B0-884E-D10225C3A26E
// Assembly location: C:\Users\supdams\Desktop\Assembly-CSharp.dll.dll

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using UnityEngine;
using UnityEngine.UI;

#nullable disable
public class DataManager
{
  public const short MAX_ITEMDATA = 800;
  public const uint MAX_MONEY = 4294967295;
  public const byte MAX_TMPCHATNICK = 10;
  public const int TalkMax_Kingdom = 30;
  public const int TalkMax_Alliance = 2000;
  public const int BlackListMax = 100;
  public const int MessageBoardMax = 20;
  public const ushort EmojiSaveTotalCount = 512;
  public const byte EmojiSaveCount = 64;
  public const byte BattlingVer = 8;
  public const byte MailingVer = 7;
  public const byte LetterVer = 6;
  public const int MaxFightNpcData = 200;
  public const int MaxFightNpcHeroCount = 5;
  private const int TechDataMaxCount = 150;
  private const byte TalentDataMaxCount = 100;
  private const byte TalentSaveMax = 41;
  public const byte TalentQueueCountMax = 3;
  public bool bLoadingTableSuccess;
  public CExternalTableWithWordKey<Skill> SkillTable;
  public CExternalTableWithWordKey<AI> AITable;
  public CExternalTableWithWordKey<Buff> BuffTable;
  public StringTable mStringTable;
  public CExternalTableWithWordKey<SoldierData> SoldierDataTable;
  public CExternalTableWithWordKey<Hero> HeroTable;
  public CExternalTableWithWordKey<Enhance> EnhanceTable;
  public CExternalTableWithWordKey<Equip> EquipTable;
  public CExternalTableWithWordKey<HeroArray> ArrayTable;
  public CExternalTableWithWordKey<HeroTeam> TeamTable;
  public CExternalTableWithWordKey<RewardScore> RewardScoreTable;
  public CExternalTableWithWordKey<SkillCost> SkillCostTable;
  public CExternalTableWithWordKey<LevelUp> LevelUpTable;
  public CExternalTableWithWordKey<BuildLevelRequest> BuildsRequest;
  public CExternalTableWithWordKey<BuildLevelRequestGroup> BuildsLevelRequestGroup;
  public CExternalTableWithWordKey<BuildTypeData> BuildsTypeData;
  public CExternalTableWithWordKey<global::BuildManorData> BuildManorData;
  public CExternalTableWithWordKey<Effect> EffectData;
  public CExternalTableWithWordKey<StoreTbl> StoreData;
  public CExternalTableWithWordKey<PriceListTbl> PriceListData;
  public CExternalTableWithWordKey<PriceListTbl> PriceListDataEx;
  public CExternalTableWithWordKey<MarchPaltform> MarchPaltformTable;
  public CExternalTableWithWordKey<MarchOffset> MarchOffsetTable;
  public CExternalTableWithWordKey<TechTreeLayoutTbl> TechTreeLayout;
  public CExternalTableWithWordKey<TechDataTbl> TechData;
  public CExternalTableWithWordKey<TechLevelTbl> TechLevel;
  public CExternalTableWithWordKey<TechLevelExTbl> TechLevelEx;
  public CExternalTableWithWordKey<TechKindTbl> TechKindData;
  public CExternalTableWithWordKey<HUDTypeTbl> HUDTypeData;
  public CExternalTableWithWordKey<TalentTbl> TalentData;
  public CExternalTableWithWordKey<TalentLevelTbl> TalentLevel;
  public CExternalTableWithWordKey<TalentTreeLayoutTbl> TalentTreeLayout;
  public CExternalTableWithWordKey<Combo> ComboTable;
  public CExternalTableWithWordKey<CastleUpgradeRewardTbl> CastleUpgradeRewardTable;
  public CExternalTableWithWordKey<ItemBuff> ItemBuffTable;
  public CExternalTableWithWordKey<LordEnhanceTbl> LordEnhanceTable;
  public CExternalTableWithWordKey<VIP_DataTbl> VIPLevelTable;
  public CExternalTableWithWordKey<HeroTalkTbl> HeroTalkTable;
  public CExternalTableWithWordKey<LordEquipEffectData> LordEquipEffectTable;
  public CExternalTableWithWordKey<LordEquipEffectFilterData> LordEquipEffectFilter;
  public CExternalTableWithWordKey<EventEquipmant> EventEquipmantTable;
  public CExternalTableWithWordKey<MallEquipmant> MallEquipmantTable;
  public CExternalTableWithWordKey<NewbieData> NewbieTable;
  public CExternalTableWithWordKey<NewbieUI> NewbieUITable;
  public CExternalTableWithWordKey<ComboBox> ComboBoxTable;
  public CExternalTableWithWordKey<LotteryBox> LotteryBoxTable;
  public CExternalTableWithWordKey<GiftBox> GiftBoxTable;
  public CExternalTableWithWordKey<MonsterActivityScore> MonsterActivityScoreTable;
  public CExternalTableWithWordKey<global::LandWalkerData> LandWalkerData;
  public CExternalTableWithWordKey<global::AllianceLvUpData> AllianceLvUpData;
  public CExternalTableWithWordKey<ArenaReward> ArenaRewardData;
  public CExternalTableWithWordKey<ArenaHeroTopic> ArenaHeroTopicData;
  public CExternalTableWithWordKey<CoordData> CoordTable;
  public CExternalTableWithWordKey<CoordDisplayData> CoordDisplayTable;
  public CExternalTableWithWordKey<CoordResultData> CoordResultTable;
  public CExternalTableWithWordKey<global::TitleData> TitleData;
  public CExternalTableWithWordKey<global::TitleData> TitleDataW;
  public CExternalTableWithWordKey<global::TitleData> TitleDataN;
  public CExternalTableWithWordKey<global::TitleData> TitleDataF;
  public CExternalTableWithWordKey<global::TitleSortData> TitleSortData;
  public CExternalTableWithWordKey<KOFPrizeData> KOFPrize;
  public CExternalTableWithWordKey<NPCPrizeData> NPCPrize;
  public CExternalTableWithWordKey<MobilizationMissionData> AllianceMobilizationMission;
  public CExternalTableWithWordKey<MobilizationDegreeData> AllianceMobilizationDegreeInfo;
  public CExternalTableWithWordKey<MobilizationDegreeData>[] AllianceMobilizationDegreeInfos = new CExternalTableWithWordKey<MobilizationDegreeData>[4];
  public CExternalTableWithWordKey<MonsterPriceTbl>[] GambleMonsterPriceTable = new CExternalTableWithWordKey<MonsterPriceTbl>[2];
  public CExternalTableWithWordKey<PushNotificationData> PushNotification;
  public CExternalTableWithWordKey<DegreeRange> AllianceMobilizationDegreeRange;
  public CExternalTableWithWordKey<MapEffect> MapEffectTB;
  public CExternalTableWithWordKey<SummonInfo> SummonInfoData;
  public CExternalTableWithWordKey<DonateAmountData> DonateAmountTable;
  public CExternalTableWithWordKey<FusionData> FusionDataTable;
  public CExternalTableWithWordKey<FastivalSpecialData> FastivalSpecialDataTable;
  public CExternalTableWithWordKey<FusionData> FusionDataTable_Act;
  public CExternalTableWithWordKey<PushCallBack> PushCallBackTable;
  public _ROLEINFO RoleAttr;
  public AllianceInfo RoleAlliance;
  private long DailyResetTimer;
  public byte ServerVersionMajor;
  public byte ServerVersionMinor;
  public GameplayKind GoToBattleOrWar;
  public GameLanguage UserLanguage = GameLanguage.GL_Cht;
  public long Battle_UserID;
  public long ArenaBattle_UserID;
  public HeroBattleData[] heroBattleData = new HeroBattleData[5];
  public byte heroCount;
  public long BattleCondition_UserID;
  public HeroBattleData[] heroBattleConditionData = new HeroBattleData[5];
  public SysSetting MySysSetting = new SysSetting();
  public ushort mSetNotice = ushort.MaxValue;
  public ulong mNewPushSwitch;
  public byte mFirstSetSys;
  public BattleInfo battleInfo = new BattleInfo();
  public short lastBattleResult = -1;
  public ulong BattleSeqID;
  public uint BattleEngine = 1;
  public byte BattleFailureIndex;
  public ushort BattleConditionKey;
  public int MaxCurHeroData = 100;
  public uint CurHeroDataCount;
  public uint OwnedHeroDataCount;
  public uint NoOwnedHeroDataCount;
  public CHashTable<uint, CurHeroData> curHeroData;
  public uint[] sortHeroData;
  public HeroDAtaComparer heroDAtaComparer;
  public byte mSkillPointMax;
  public CurHeroData[] curTempHeroData = new CurHeroData[5];
  public ushort[] RankSoldiers = new ushort[13]
  {
    (ushort) 0,
    (ushort) 80,
    (ushort) 320,
    (ushort) 800,
    (ushort) 1440,
    (ushort) 2560,
    (ushort) 4000,
    (ushort) 6000,
    (ushort) 10000,
    (ushort) 14000,
    (ushort) 18500,
    (ushort) 24000,
    (ushort) 32000
  };
  public ushort[] Hero_RankCost = new ushort[12]
  {
    (ushort) 0,
    (ushort) 5,
    (ushort) 13,
    (ushort) 30,
    (ushort) 60,
    (ushort) 120,
    (ushort) 240,
    (ushort) 480,
    (ushort) 960,
    (ushort) 1800,
    (ushort) 3600,
    (ushort) 7200
  };
  public ushort[] Hero_StarCost = new ushort[5]
  {
    (ushort) 0,
    (ushort) 15,
    (ushort) 60,
    (ushort) 300,
    (ushort) 1800
  };
  public List<ushort> LegionBattleHero;
  public int LegionBattleSildoers;
  public int Hero_Info_Page;
  public bool Hero_Info_bHeroSkill;
  public bool Hero_Info_bHeroInfo = true;
  public CurHeroData PreviewHeroData = new CurHeroData();
  public CHashTable<ushort, ushort> curItemQuantity = new CHashTable<ushort, ushort>(800, false);
  public short curItemDataCount;
  public short sortItemDataCountMax;
  public ItemDataComparer itemDataComparer = new ItemDataComparer();
  public ushort[] sortItemData = new ushort[800];
  public ushort[] sortItemDataStart = new ushort[31];
  public ushort[] sortItemDataCount = new ushort[31];
  public byte ReflashMaterialItem;
  private byte BuyAndUse;
  public byte SortItemDataType = 16;
  public BagItemDataComparer bagitemDataComparer = new BagItemDataComparer();
  public ushort[] SortSotreData;
  public ushort[] SortSotreDataStart = new ushort[31];
  public ushort[] SortSotreDataCount = new ushort[31];
  public CHashTable<ushort, ushort> TotalShopItemData;
  public QueueBarData[] queueBarData = new QueueBarData[37];
  public byte[] sortedQueueBarData = new byte[37];
  public QueueBarDataComparer queueBarDataComparer = new QueueBarDataComparer();
  public byte curQueueBarDataCount;
  public bool bNeedSortQueueBarData;
  public long bRecvQueueBarData;
  public bool bBeginReLogin;
  public bool bNewQueue;
  public bool bOpenQueue = true;
  public bool bFirstOpenQueueBar = true;
  public HeroConditionComparer mHeroConditionComparer = new HeroConditionComparer();
  public byte[] Medal;
  public int RewardCount;
  public byte[] RewardLen = new byte[4];
  public ushort[] RewardData = new ushort[128];
  public byte KingOldLv;
  public uint KingOldExp;
  public uint RWMoney;
  public ushort[] heroId = new ushort[5];
  public byte[] heroLv = new byte[5];
  public uint[] heroExp = new uint[5];
  public ushort QBMorale;
  public uint QBMoney;
  public byte QBTimes;
  public int QBRewardCount;
  public byte[] QBRewardLen = new byte[10];
  public ushort[] QBRewardData = new ushort[220];
  public byte ExpItemCount;
  public ItemSaveDataType[] QBExpItem = new ItemSaveDataType[6];
  public byte bRecvKingdom;
  public byte bSendKingdom;
  public int unReadIndex = -1;
  public int unReadCount;
  public bool bClearUnread;
  public bool bShowUnreadCount = true;
  public bool bOpenSetChannel = true;
  public byte NowChannel;
  public int NowKingdomIndex = -1;
  public float NowKingdomPos = -1f;
  public int NowAlliancePage = -1;
  public int NowAllianceIndex1 = -1;
  public int NowAllianceIndex2 = -1;
  public float NowAlliancePos1 = -1f;
  public float NowAlliancePos2 = -1f;
  public int SendAskKind = -1;
  public int ThisTimeCounts;
  public string chatusestr = "{0}：{1}";
  public string chatusestr2 = "{1}：{0}";
  public CString[] ChatStr = new CString[2];
  public CString[] ChatStrA = new CString[2];
  public CString ChatNameStr = new CString(100);
  public CString ChatMainStr = new CString(435);
  public string ColorL = "<color=#0000FF>(";
  public string ColorR = ")</color>";
  public float sendTimer;
  public byte[] tmpChatAllyRank = new byte[10];
  public CString[] tmpChatNickName = new CString[10];
  public ushort[] tmpChatKingdom = new ushort[10];
  public ushort[] tmpChatWTitleID = new ushort[10];
  public ushort[] tmpChatNTitleID = new ushort[10];
  public byte[] tmpbCheckDirtyWord = new byte[10];
  public CString SystemMessageCString = new CString(1024);
  public List<float> Height_Kingdom = new List<float>();
  public ObjectPool<TalkDataType> TalkData_KPool;
  public List<TalkDataType> TalkData_Kingdom = new List<TalkDataType>(30);
  public bool bChangeKingdomClear;
  public byte KindomRecvType;
  public long AskAllianceTime;
  public long LastTime;
  public byte AskOldData;
  public long TopID;
  public long MiddleTopID;
  public long MiddleBottomID;
  public int TopIndex;
  public int MiddleTopIndex = -1;
  public int MiddleBottomIndex = -1;
  public int LastTimeIndex = -1;
  public List<float> Height_Alliance = new List<float>();
  public int APoolIndex;
  public ObjectPool<TalkDataType> TalkData_APool;
  public List<TalkDataType> TalkData_Alliance = new List<TalkDataType>(2000);
  public List<TalkDataType> tmpAllianc = new List<TalkDataType>(10);
  public int mAllianceInfoScroll_Idx;
  public float mAllianceInfoScroll_Y;
  public List<AllianceHelpRecordCMsgDataType> mHelpDataList = new List<AllianceHelpRecordCMsgDataType>(200);
  public uint DailyHelpGetAllianceMoney;
  public PlayHelpDataType[] mPlayHelpDataType = new PlayHelpDataType[2];
  public long LastTimeAllianceMoney;
  public byte mOpenPage;
  public bool bSetAllianceScroll;
  public ushort AllianceMoneyBonusRate = 100;
  public bool bSendtoGetGift = true;
  public List<uint> mShowListIdx = new List<uint>();
  public CHashTable<uint, AllianceBoxDataType> mListGift = new CHashTable<uint, AllianceBoxDataType>(300);
  public SortGiftComparer mSortGift = new SortGiftComparer();
  public uint mGift_UpdateSN;
  public ushort mShowListUnOpenIdx;
  public float CDGiftTime = 300f;
  public bool bCDStart = true;
  public bool bGetLeadItem;
  private string BlackListName = "BlackList";
  public ObjectPool<BlackListDataType> TalkData_BPool;
  public CHashTable<int, BlackListDataType> TalkData_BlackList = new CHashTable<int, BlackListDataType>(100);
  public ObjectPool<MessageBoard> MessageBoard_Pool;
  public List<MessageBoard> MessageBoardList = new List<MessageBoard>(20);
  public ObjectPool<MessageBoard> MessageBoard_Pool_Self;
  public List<MessageBoard> MessageBoardList_Self = new List<MessageBoard>(20);
  public uint SendAllianceID;
  public uint PreSendAllianceID;
  public long SendMessageID;
  public byte FindBlack;
  public int MessageBoardScroll_Idx;
  public float MessageBoardScroll_Y;
  public BannedWord m_BannedWord;
  private string EmojiSaveName = nameof (EmojiSave);
  public byte[] EmojiSave;
  public int EmojiOnGICount = -1;
  public bool bNeedInitialEmojiSave;
  public global::MailData Mailing;
  public MyFavorite DoMeAFavor;
  private MyFavorite DoFavor;
  public bool Outlooking;
  public List<CombatReportContent> CombatReports = new List<CombatReportContent>(100);
  public global::CombatReport[] CombatReportSave = new global::CombatReport[100];
  public global::CombatReport[] CombatReport;
  public static DataManager.MailDataComparer MailDC = new DataManager.MailDataComparer();
  public global::MailContent[] MailReport = new global::MailContent[100];
  public CombatReportContent Combat = new CombatReportContent();
  public global::CombatReport CombatReportType = new global::CombatReport(0U);
  public BinaryFormatter BF = new BinaryFormatter();
  public DataManager.SerialKiller SK = new DataManager.SerialKiller();
  public MailBox MIB;
  public ResourceData[] Resource = new ResourceData[5];
  public PetResourceData PetResource = new PetResourceData();
  public byte SoldierKind;
  public byte SoldierRank;
  public long SoldierBeginTime;
  public uint SoldierNeedTime;
  public long SoldierTotal;
  public uint SoldierQuantity;
  public uint SoldierTrainingQty;
  public uint tmpSoldierTrainingQty;
  public bool bSoldierSave;
  public ushort GuideSoldierNum;
  public uint HospitalTotal;
  public uint[] mSoldier_Hospital = new uint[16];
  public uint[] mTreatmentSoldier = new uint[16];
  public uint TreatmentQuantity;
  public uint TreatmentQty;
  public byte TrapKind;
  public byte TrapRank;
  public long TrapBeginTime;
  public uint TrapNeedTime;
  public uint TrapTotal;
  public uint TrapHospitalTotal;
  public uint TrapQuantity;
  public uint TrapTrainingQty;
  public uint[] mTrapQty = new uint[12];
  public uint[] mTrap_Hospital = new uint[12];
  public uint[] mRepairTrap = new uint[12];
  public uint Trap_TreatmentQuantity;
  public uint Trap_TreatmentQty;
  public uint WatchTowerDataCount;
  public bool bReSetWTD;
  public List<WatchTowerData> tmp_WatchTowerData = new List<WatchTowerData>(30);
  public List<WatchTowerSortData> m_WatchTowerData = new List<WatchTowerSortData>(30);
  public WatchTowerData[] mtmpIdx = new WatchTowerData[8];
  public WatchTowerComparer mWatchTowerComparer = new WatchTowerComparer();
  public WatchTowerComparer_LindID mWatchTowerComparer_LindID = new WatchTowerComparer_LindID();
  public bool bSetExpediton;
  public uint[] mExpeditionSoldierList = new uint[16];
  public int mMapId;
  public int mScroll_Idx;
  public float mScroll_Y;
  public byte mcollectionKind = byte.MaxValue;
  public byte mWarlobby_Kind = byte.MaxValue;
  public bool bFirstOpenWarlobbyTroopSelect;
  public int m_WTList_Idx;
  public int m_WTInfo_Status;
  public ushort m_WTInfo_KID;
  public PointCode m_WT_Point;
  public ushort m_WT_MH;
  public string m_WT_Name;
  public string m_WT_AllianceName;
  public uint m_WT_TotalForce;
  public byte m_WT_HeroNum;
  public ushort m_WT_TrooFlag;
  public byte m_WT_WithSupremeLeader;
  public uint m_WT_TroopTotal;
  public uint[] m_WT_TroopData = new uint[16];
  public ushort[] m_WT_HeroID = new ushort[5];
  public WatchTowerHeroRank[] m_WT_HeroRank = new WatchTowerHeroRank[5];
  public ushort m_WT_KingdomID;
  public ushort m_WT_PetID;
  public byte m_WT_PetEnhance;
  public ushort m_WT_PetSkillID;
  public byte m_WT_PetSkillLv;
  private List<WarlobbyData> WarlobbyDataPool = new List<WarlobbyData>();
  private List<WarlobbyTroop> WarlobbyTroopDataPool = new List<WarlobbyTroop>();
  private int WarlobbyDataCountIdx;
  private int WarlobbyTroopDataCountIdx;
  public uint ActiveRallyRecNum;
  public uint BeingRallyRecNum;
  public byte WarhallDetailType;
  public ushort Sponsor;
  public ushort WarhallProtocol;
  public List<WarlobbyData>[] WarHall = new List<WarlobbyData>[2];
  public List<WarlobbyTroop> WarTroop = new List<WarlobbyTroop>();
  public WarlobbyData WarlobbyDetail;
  public bool bWonderFight = true;
  public _TroopStatistic WarTroopStatistic = new _TroopStatistic((byte) 1);
  public uint[] mSoldier_Embassy = new uint[16];
  public uint TotalSoldier_Embassy;
  private byte _MaxMarchEventNum;
  public MarchEventDataType[] MarchEventData;
  public TimeEventDataType[] MarchEventTime;
  public TimeEventDataType[] RallyCountDown;
  public ClientJoinedRallyDataType[] JoinedRallyDataType;
  public byte[] TempFightHeroID;
  public uint[] FightHeroID;
  public uint[] NonFightHeroID;
  public uint FightHeroCount;
  public uint NonFightHeroCount;
  public uint[] SortNonFightHeroID;
  public uint[] SortFightHeroID;
  public SortNonFightHeroIDComparer sortNonFightHeroIDComparer;
  public ushort[] SelectHeroID;
  private string BattleHeroIDList = nameof (BattleHeroIDList);
  private string BindMail = nameof (BindMail);
  public long m_FightNpcDataUserID;
  private CHashTable<ushort, FightNpcData> _m_FightNpcData;
  public e_BuildType OriginalBuildType;
  public byte OpenBagFilterByBuildingWindow;
  public byte OpenBuildingWindowUpdateNoClose;
  public Vector3 WorldCameraPos;
  public float WorldCameraLimit;
  public bool bWorldF = true;
  public Vector3 WorldCameraTransitionsPos = GameConstants.GoldGuy;
  public AllianceMemberClientDataType[] AllianceMember;
  public AllianceMemberComparer allianceMemberComparer;
  public int m_RecvDataIdx;
  private byte m_IsAllianceMemberDataFinish;
  public int m_RemoveIndex = -1;
  public string m_DemiseName;
  public CString m_TempDemiseStr = StringManager.Instance.SpawnString(50);
  public ushort FreeCompletePeriod;
  private ushort[] PriceListDataTypeStart;
  private byte[] PriceListDataTypeCount;
  public byte CurSelectLanguage;
  public ushort CurSelectBadge;
  public int SetSelectLanguage;
  public int SetSelectRequest;
  public AlliancePublic AllianceView;
  private EQueueBarIndex[] QueueIndexbyUesItemTarget = new EQueueBarIndex[19]
  {
    EQueueBarIndex.MAX,
    EQueueBarIndex.Building,
    EQueueBarIndex.Training,
    EQueueBarIndex.HeroEnhance,
    EQueueBarIndex.HeroEvolution,
    EQueueBarIndex.Researching,
    EQueueBarIndex.Treatmenting,
    EQueueBarIndex.Manufacturing,
    EQueueBarIndex.TrapRepair,
    EQueueBarIndex.Forging,
    EQueueBarIndex.WallRepair,
    EQueueBarIndex.AffairMission,
    EQueueBarIndex.AllianceMission,
    EQueueBarIndex.Building,
    EQueueBarIndex.Building,
    EQueueBarIndex.Building,
    EQueueBarIndex.VIPMission,
    EQueueBarIndex.Building,
    EQueueBarIndex.PetEvolution
  };
  private byte TechnologySendFinish;
  private ushort[] TechnologyLayoutTypeStart;
  private byte[] TechnologyLayoutTypeCount;
  public byte[] sortTechKindIndex;
  private _TechKindComparer TechKindComparer = new _TechKindComparer();
  private ushort[] TechKindLevelMax;
  private uint[] TechLevelupExSearchTable;
  private ushort[] TalentLevelMax;
  public long KingCoolEndTime;
  public CString[] PlayerName_War = new CString[2];
  public long[] MaxValue_War = new long[3];
  public long[] NowValue_War = new long[3];
  public ushort[] KindomID_War = new ushort[2];
  public CString[] AllianceTag_War = new CString[2];
  public long CastleTrapsDestroyedCount;
  public TroopLeaderType[] pLeftLeaderData = new TroopLeaderType[5];
  public TroopLeaderType[] pRightLeaderData = new TroopLeaderType[5];
  public byte War_LeftHeroNum;
  public byte War_RightHeroNum;
  public ushort War_LeftLordID;
  public ushort War_RightLordID;
  public byte War_LeftCastleLv;
  public byte War_RightCastleLv;
  public uint[,] pLeftTroopForce = new uint[4, 4];
  public uint[,] pRightTroopForce = new uint[4, 4];
  public uint[,] pCastleInfo = new uint[3, 4];
  public uint CurWallHp;
  public uint MaxWallHp;
  public byte War_WallLevel;
  public byte bSiege;
  public bool bWarAttacker;
  public byte WarType;
  public ushort War_RndSeed = 1;
  public ushort War_RndGap = 2;
  public byte War_LordCapture;
  public ushort War_MapKind = 1;
  public byte War_MapTheme = 1;
  public uint DramaTriggerFlag;
  public ulong[] WarMoraleValue = new ulong[2];
  public ulong[] WarLoseCount = new ulong[2];
  public bool bWarMoraleSpecialCale;
  public int[] WarMorale = new int[2];
  public CombatCastleDefAttrDataType War_WallAttr = new CombatCastleDefAttrDataType();
  public uint[] War_LeftAttackAttr = new uint[4];
  public uint[] War_LeftDefenseAttr = new uint[4];
  public uint[] War_LeftHealthAttr = new uint[4];
  public uint[] War_RightAttackAttr = new uint[4];
  public uint[] War_RightDefenseAttr = new uint[4];
  public uint[] War_RightHealthAttr = new uint[4];
  public uint BattleSimVer;
  public uint BattlePatchNo;
  public uint PetVersionNo;
  public AssetBundle TableAB;
  private int TableABKey;
  private long _ServerTime;
  private float _DeltaTimer;
  private float _DeltaTime;
  private static DataManager instance = (DataManager) null;
  private static MapManager mapDataController = (MapManager) null;
  private static StageManager stageDataController = (StageManager) null;
  public byte[] AllTechData;
  public ushort ResearchTech;
  public ushort CheckResearchTech;
  public byte[] AllTalentData;
  public DataManager._SaveTalentData[] SaveTalentData;
  private byte[][] ConsumeTalentPoint;
  public byte NoUseTalent;
  public byte RecvSaveIndexStart;
  public ushort RoleTalentPoint;
  public ushort tmpRoleTotalTalent;
  public byte TalentQueueCount;
  public byte TalentSaveQueueCount;
  public byte TalentSaveZero;
  public byte CehckSendIdx;
  public byte CheckRecvIdx;
  private byte[] CheckSendCount = new byte[4];
  private DataManager._TalentUpdateQueue[][] TalentAddQueue = new DataManager._TalentUpdateQueue[4][];
  private DataManager._TalentUpdateQueue[] TalentSaveQueue = new DataManager._TalentUpdateQueue[100];
  public AttribValManager AttribVal = new AttribValManager();
  private static MissionManager missionDataManager = (MissionManager) null;
  private static GamePlayAchievementManager achievementMgr;
  private static FBMissionManager FBmissionDataManager = (FBMissionManager) null;
  public KingReward KingGift = new KingReward();
  public MailBox OpenMail;
  public float Letter_Y = -1f;
  public int Letter_Idx = -1;
  public float Letter_PluralY = -1f;
  public int Letter_PluralIdx = -1;
  public string Letter_ReplyName;
  public string Letter_ReplyTitle;
  public string Letter_ReplyEditor;
  public CString Letter_ReplyName_KTN;
  public CString Letter_ReplyTitle_Alliance;
  public uint Letter_ReplyID;
  public bool bPlural;
  public bool bNoPlural;
  public uint Letter_PluralReplyID;
  public string Letter_PluralSenderName;
  public bool bMailAddBookMark;
  public List<uint> BlockedMail = new List<uint>();
  public long BlackoutMail;
  public int BlackoutCount;
  public float LetterFs_Y = -1f;
  public uint mFs_Serial;
  public uint m_WallRepairBeginValue;
  public uint m_WallRepairNowValue;
  public uint m_WallRepairMaxValue;
  public float m_WallRepairRate;
  public float m_WallTickTime;
  public float m_WallTempRate;
  public long m_WallBeginTime;
  public long m_WallTargetTime;
  public bool bNeedShowWallQueueBar;
  public ushort[] m_DefendersID;
  public BookMark RoleBookMark = new BookMark();
  public static byte[] DataBuffer = new byte[32];
  public static byte[] msgBuffer = new byte[32];
  public static byte[] refreshBuffer = new byte[30];
  public FS_Detail mFS_DetailData = new FS_Detail();
  public byte[] mFs_Main = new byte[2];
  public byte mFs_Side;
  public FS_Info[] mFs_Info_A = new FS_Info[30];
  public FS_Info[] mFs_Info_D = new FS_Info[30];
  public byte mFs_A_Count;
  public byte mFs_D_Count;
  public byte mSaveInfo;
  public byte mFs_A_MHIdx = 5;
  public byte mFs_D_MHIdx = 5;
  public float BossOpen_Y;
  public uint[] mFs_A_ST = new uint[16];
  public uint[] mFs_A_SL = new uint[16];
  public uint[] mFs_D_ST = new uint[16];
  public uint[] mFs_D_SL = new uint[16];
  public int MaxBuffTableCount;
  public ItemBuffData[] m_RecvItemBuffData;
  public byte[] m_SortBuffData;
  public ItemBuffComparer itemBuffComparer;
  public int m_BuffScrollIndex;
  public float m_BuffScrollPos;
  public byte m_BuffListOpenIcon;
  public int m_BuffListUseCount;
  public bool bHaveKvKBuff;
  public bool bHaveWarBuff;
  public bool bHaveWorldBattleBuff;
  public bool bHaveNobilityBattleBuff;
  public int m_RecvWarBuffIdx;
  public int m_RecvWorldBattleIdx;
  public int m_KingdomBattleIdx;
  public int m_NobilityBattleIdx;
  public SearchPlayerDataType[] m_SearchPlayerData;
  public byte m_RecvSearchPlayerCount;
  public int m_SearchListScrollIndex;
  public float m_SearchListScrollPos;
  public string m_PreSearchName;
  public bool bClaerSearchData;
  public bool bSearchError;
  public byte mLastSearchPage;
  public bool mAllianceSearchView;
  public CString mLordName;
  public PlayerProfile mLordProfile;
  public LordStatisticalData mLordStat;
  public LordEquipData mLordEquip;
  public PointCode AllyMemberLoc;
  public int AllyMemberIdx;
  public TimeEventDataType m_AltarEffect;
  public uint[] ScoutResource = new uint[5];
  public uint DefenseNum;
  public uint ReinforceNum;
  public uint TrapsNum;
  public uint MusterNum;
  public uint H_TrapsNum;
  public uint H_TroopsNum;
  public uint WallValue;
  public uint WallMaxValue;
  public uint CaveNum;
  public uint CantonmentNum;
  public ushort TroopsFlag;
  public ushort TrapsFlag;
  public ushort ReinforceFlag;
  public ushort MusterFlag;
  public ushort H_TroopsFlag;
  public ushort H_TrapsFlag;
  public ushort CaveFlag;
  public ushort CantonmentFlag;
  public byte TroopsCount;
  public byte TrapsCount;
  public byte H_TroopsCount;
  public byte H_TrapsCount;
  public byte ReinforceCount;
  public byte MusterCount;
  public byte DefenseHeroCount;
  public byte BuildingCount;
  public byte ReinforcePlayerCount;
  public byte WallStatus;
  public byte StrengthenCount;
  public byte CantonmentHeroCount;
  public byte MainHeroHome;
  public uint[] TrapsInfo = new uint[12];
  public uint[] TroopsInfo = new uint[16];
  public uint[] H_TrapsInfo = new uint[12];
  public uint[] H_TroopsInfo = new uint[16];
  public uint[] ReinforceInfo = new uint[16];
  public uint[] MusterInfo = new uint[16];
  public uint[] CaveInfo = new uint[16];
  public uint[] CantonmentInfo = new uint[16];
  public ushort MainHero;
  public ushort CantonmentMainHero;
  public Scout_Hero_Info MainHeroInfo;
  public Scout_Hero_Info[] DefenseHero = new Scout_Hero_Info[5];
  public Scout_Hero_Info[] CantonmentHero = new Scout_Hero_Info[5];
  public Scout_Build_Info[] BuildInfo = new Scout_Build_Info[60];
  public Scout_Strengthen_Info[] Strengthen_Info = new Scout_Strengthen_Info[14];
  public CString[] ReinforcePlayerName = new CString[30];
  public CString CantonmentPlayerName;
  public bool bCaveMainHero;
  public bool Prisoner_Requested;
  public byte[] sortedPrisonerList = new byte[30];
  public Prisoner[] PrisonerList = new Prisoner[30];
  public byte PrisonerNum;
  public byte PrisonerHighestLevel;
  public LordBeenCapturedData beCaptured;
  public List<MapPrisoner> MapPrisoners;
  public bool bHeroBattleSave;
  public eReinforceCheck ReinforceCheckType;
  public uint m_CurrTroopAmount;
  public uint m_InForceCapacity;
  public uint m_InForceMarchSpeedPlus;
  public byte m_CurrInForcePlayer;
  public PointCode m_InForcePoint;
  public string m_InForceName;
  public PointCode RallyDesPoint;
  public byte RallyCountDownIndex;
  public PointCode ScoutDesPoint;
  public ushort TreasureBox_ItemID;
  public ushort TreasureBox_Num;
  public byte TreasureBox_ItemRank;
  public float TreasureBox_CDTime;
  public uint m_Maintain;
  public uint m_UpdateVersion;
  public bool m_MaintainCount;
  public bool m_UpdateVersionCount;
  public bool bGetFBPrize;
  public float leadup_CDTime;
  public CryptData m_CryptData;
  public List<WonderData> m_Wonders = new List<WonderData>();
  private WonderDataComparer TC = new WonderDataComparer();
  public List<ActivityEquip> ActivityEquipListIdx = new List<ActivityEquip>();
  public List<ushort> ActivitylistEquip = new List<ushort>();
  public ActItemComparer mActSortItem = new ActItemComparer();
  public double mActivityCDTime = 86400.0;
  public bool bWaitTranslateClassifieds;
  public bool bTranslateClassifieds;
  public bool bTranslateClassifiedsFailed;
  public bool bNeedTranslateClassifieds = true;
  public string mKingdomClassifieds;
  public ushort mKingdomClassifieds_L;
  public CString KingdomMsg;
  public string mKingdomMsgTag;
  public string mKingdomMsgName;
  public byte mKingdomClassifiedsFlag;
  public bool bWaitTranslate_AA;
  public bool bTranslate_AA_Info;
  public bool bTranslate_AA_InfoFailed;
  public bool bNeedTranslate_AA_Info = true;
  public ushort mAA_Info_L;
  public bool bTranslate_AA_P;
  public bool bTranslate_AA_PFailed;
  public bool bNeedTranslate_AA_P = true;
  public ushort mAA_P_L;
  public bool bTransAA;
  public float OwnedPagePosY;
  public float NoOwnedPagePosY;
  public float OwnedPageContentHeight;
  public float NoOwnedPageContentYHeight;
  public float[] OwnedPagePosYArray;
  public float[] NoOwnedPagePosYArray;
  public int[] OwnedPageIDArray;
  public int[] NoOwnedPageIDArray;
  public ScrollViewIndexValue OwnedPageScrollValue;
  public ScrollViewIndexValue NoOwnedPageScrollValue;
  public TroopMemoryData[] mTroopMemoryData = new TroopMemoryData[5];
  public CString TeamName;
  public bool bChangName;
  public bool bChangHero;
  public bool bChangSoldier;
  public long mOpenExpeditionNum;
  public DailyGift mDailyGift = new DailyGift();
  public ushort mDailyGift_Pic;
  public byte mAllianceDisband = 60;
  private MailBox MailTranslation;
  public static string[] MailContent;
  private static List<CString> MailData = new List<CString>(2);
  private DataManager.eMsgState RecvItemState;
  public ushort WorldTeleportItemCount;
  public int WorldTeleportRank;

  private DataManager()
  {
    this.TableAB = (AssetBundle) null;
    this.TableABKey = 0;
    this.InitialQueueBarData();
    this.InitialMailData();
    this.InitialTalkData();
    this.RoleAttr.UserId = 0L;
    this.RoleAttr.Name = new CString(13);
    this.RoleAttr.NickName = new CString(41);
    this.RoleAlliance.Leader = new CString(13);
    this.RoleAlliance.Tag = new CString(4);
    this.RoleAlliance.Name = new CString(21);
    for (byte Type = 0; (int) Type < this.Resource.Length; ++Type)
      this.Resource[(int) Type] = new ResourceData((ResourceType) Type);
    this.WorldCameraLimit = 0.0f;
    this.RoleAttr.m_Soldier = new uint[16];
    this.curHeroData = new CHashTable<uint, CurHeroData>(this.MaxCurHeroData, false);
    this.sortHeroData = new uint[this.MaxCurHeroData];
    this.heroDAtaComparer = new HeroDAtaComparer();
    this.Medal = new byte[5]
    {
      (byte) 10,
      (byte) 20,
      (byte) 50,
      (byte) 100,
      (byte) 150
    };
    this.LegionBattleHero = new List<ushort>();
    this.MaxMarchEventNum = (byte) 0;
    this.MarchEventData = new MarchEventDataType[8];
    this.MarchEventTime = new TimeEventDataType[8];
    this.RallyCountDown = new TimeEventDataType[8];
    this.JoinedRallyDataType = new ClientJoinedRallyDataType[8];
    for (int index1 = 0; index1 < 8; ++index1)
    {
      this.MarchEventData[index1] = new MarchEventDataType();
      this.MarchEventData[index1].Type = EMarchEventType.EMET_Standby;
      this.MarchEventData[index1].HeroID = new ushort[10];
      Array.Clear((Array) this.MarchEventData[index1].HeroID, 0, this.MarchEventData[index1].HeroID.Length);
      this.MarchEventData[index1].TroopData = new uint[4][];
      for (int index2 = 0; index2 < 4; ++index2)
        this.MarchEventData[index1].TroopData[index2] = new uint[4];
      for (int index3 = 0; index3 < 4; ++index3)
      {
        for (int index4 = 0; index4 < 4; ++index4)
          this.MarchEventData[index1].TroopData[index3][index4] = 0U;
      }
      this.MarchEventData[index1].Point.zoneID = (ushort) 2048;
      this.MarchEventData[index1].Point.pointID = (byte) 0;
      this.MarchEventData[index1].ResourceGetCount = new uint[5];
      Array.Clear((Array) this.MarchEventData[index1].ResourceGetCount, 0, this.MarchEventData[index1].ResourceGetCount.Length);
      this.MarchEventData[index1].Crystal = 0U;
      this.MarchEventData[index1].MaxOverLoad = 0U;
      this.MarchEventData[index1].PointKind = POINT_KIND.PK_NONE;
      this.MarchEventData[index1].DesPointLevel = (byte) 1;
      this.MarchEventData[index1].DesPlayerName = string.Empty;
      this.MarchEventData[index1].bRallyHost = (byte) 0;
      this.MarchEventTime[index1] = new TimeEventDataType();
      this.MarchEventTime[index1].BeginTime = 0L;
      this.MarchEventTime[index1].RequireTime = 0U;
    }
    this.FightHeroID = new uint[this.MaxCurHeroData];
    this.NonFightHeroID = new uint[this.MaxCurHeroData];
    this.SortNonFightHeroID = new uint[this.MaxCurHeroData];
    this.SortFightHeroID = new uint[this.MaxCurHeroData];
    this.SelectHeroID = new ushort[5];
    Array.Clear((Array) this.SelectHeroID, 0, 5);
    this.sortNonFightHeroIDComparer = new SortNonFightHeroIDComparer();
    this.FightHeroCount = 0U;
    this.NonFightHeroCount = 0U;
    this.TempFightHeroID = new byte[(int) ushort.MaxValue];
    this.AllianceMember = new AllianceMemberClientDataType[100];
    this.allianceMemberComparer = new AllianceMemberComparer();
    this.PlayerName_War[0] = new CString(30);
    this.PlayerName_War[1] = new CString(30);
    this.AllianceTag_War[0] = new CString(4);
    this.AllianceTag_War[1] = new CString(4);
    this.InitWallInfo();
    this.m_DefendersID = new ushort[5];
    this.InitDefendersID();
    this.mFS_DetailData.mFS_Hero = new FS_Hero_Info[2];
    this.mFS_DetailData.mFS_Info = new FS_Info[2];
    for (int index = 0; index < 2; ++index)
    {
      this.mFS_DetailData.mFS_Info[index].Name = new CString(13);
      this.mFS_DetailData.mFS_Hero[index].HeroID = new ushort[5];
      this.mFS_DetailData.mFS_Hero[index].Rank = new byte[5];
      this.mFS_DetailData.mFS_Hero[index].Star = new byte[5];
      this.mFS_DetailData.mFS_Info[index].Troops_L = new uint[16];
      this.mFS_DetailData.mFS_Info[index].Troops_D = new uint[16];
      this.mFS_DetailData.mFS_Info[index].Troops_H = new uint[16];
    }
    this.mFS_DetailData.mTraps_L = new uint[12];
    this.mFS_DetailData.mTraps_D = new uint[12];
    this.mFS_DetailData.mTraps_S = new uint[12];
    this.InitSearchPlayerData();
    this.Letter_ReplyName_KTN = new CString(50);
    this.Letter_ReplyTitle_Alliance = new CString(60);
    for (int index = 0; index < 10; ++index)
    {
      this.tmpChatAllyRank[index] = (byte) 0;
      this.tmpChatNickName[index] = new CString(11);
      this.tmpChatKingdom[index] = (ushort) 0;
      this.tmpChatWTitleID[index] = (ushort) 0;
      this.tmpChatNTitleID[index] = (ushort) 0;
      this.tmpbCheckDirtyWord[index] = (byte) 0;
    }
    this.KingdomMsg = new CString(200);
    this.mKingdomClassifieds = string.Empty;
    this.OwnedPageIDArray = new int[16];
    this.NoOwnedPageIDArray = new int[16];
    for (int index = 0; index < 16; ++index)
    {
      this.OwnedPageIDArray[index] = index;
      this.NoOwnedPageIDArray[index] = index;
    }
    this.RoleAlliance.Notice = string.Empty;
    this.RoleAlliance.Header = string.Empty;
    this.RoleAlliance.Bullet = string.Empty;
    this.AllianceView.Notice = string.Empty;
    this.AllianceView.Header = string.Empty;
    this.AllianceView.Leader = string.Empty;
    this.AllianceView.Name = string.Empty;
    this.AllianceView.Tag = string.Empty;
    for (int index = 0; index < 5; ++index)
    {
      this.mTroopMemoryData[index].Leader = new ushort[5];
      this.mTroopMemoryData[index].TroopData = new uint[16];
      this.mTroopMemoryData[index].Label = string.Empty;
    }
    this.TeamName = new CString(41);
    this.mDailyGift.ItemData = new DailyGiftItemDataType();
    this.AllianceMoneyBonusRate = (ushort) 100;
    this.RoleAttr.Inviter = new SocialFriend();
  }

  public long ServerTime
  {
    get => this._ServerTime;
    set
    {
      this._ServerTime = this.RoleAttr.ServerTime = value;
      this._DeltaTime = Time.realtimeSinceStartup;
    }
  }

  public ushort HeroMaxMorale
  {
    get => (ushort) (120U + this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGE_MORALE_MAX));
  }

  public byte MaxMarchEventNum
  {
    get => this._MaxMarchEventNum;
    set
    {
      if (value > (byte) 8)
        this._MaxMarchEventNum = (byte) 8;
      else
        this._MaxMarchEventNum = value;
    }
  }

  public CHashTable<ushort, FightNpcData> m_FightNpcData
  {
    get
    {
      if (this._m_FightNpcData == null)
        this._m_FightNpcData = new CHashTable<ushort, FightNpcData>(200, false);
      return this._m_FightNpcData;
    }
  }

  public int TechCount => this.TechKindLevelMax != null ? this.TechKindLevelMax.Length : 0;

  public ushort MyKingdomID
  {
    get
    {
      return DataManager.mapDataController != null ? DataManager.mapDataController.kingdomData.kingdomID : (ushort) 0;
    }
  }

  public void Init()
  {
    DataManager.MapDataController.Init();
    DataManager.StageDataController.Init();
    this.InitialChat();
    this.InitialMail();
    this.lastBattleResult = (short) 0;
    this.BattleSeqID = 0UL;
    for (int index = 0; index < 5; ++index)
      this.heroBattleData[index] = new HeroBattleData();
    for (int index = 0; index < 5; ++index)
      this.heroBattleConditionData[index] = new HeroBattleData();
    BattleNetwork.bStageFirstTry[0] = true;
    BattleNetwork.bStageFirstTry[1] = true;
    this.Letter_Y = -1f;
    this.Letter_Idx = -1;
    this.Letter_PluralY = -1f;
    this.Letter_PluralIdx = -1;
    this.OpenMail.Kind = MailType.EMAIL_SYSTEM;
    for (int index = 0; index < 30; ++index)
      this.ReinforcePlayerName[index] = new CString(13);
    this.CantonmentPlayerName = new CString(13);
    this.bHeroBattleSave = false;
    this.bFirstOpenQueueBar = true;
  }

  public void loginFinish()
  {
    DataManager.MapDataController.loginFinish();
    DataManager.StageDataController.loginFinish();
    DataManager.missionDataManager.AllianceMissionBonusRate = (ushort) 100;
    DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 7, (ushort) this.RoleAlliance.Id);
    DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 6, (ushort) this.RoleAttr.Level);
    DataManager.missionDataManager.SetCompleteWhileLogin(eMissionKind.ChallengeAdvance);
    DataManager.missionDataManager.UpdateVipState();
    DataManager.FBMissionDataManager.ClearHUDArray();
    GamblingManager.Instance.bOpenTreasure = (byte) 0;
    if (this.RoleAttr.EnhanceEventHeroID != (ushort) 0)
    {
      this.SetQueueBarData(EQueueBarIndex.HeroEnhance, true, this.RoleAttr.HeroEnhanceEventTime.BeginTime, this.RoleAttr.HeroEnhanceEventTime.RequireTime);
      this.SetRecvQueueBarData(11);
    }
    if (this.RoleAttr.StarUpEventHeroID != (ushort) 0)
    {
      this.SetQueueBarData(EQueueBarIndex.HeroEvolution, true, this.RoleAttr.HeroStarUpEventTime.BeginTime, this.RoleAttr.HeroStarUpEventTime.RequireTime);
      this.SetRecvQueueBarData(12);
    }
    if (this.RoleAttr.LordEquipEventData.ItemID != (ushort) 0)
    {
      this.SetQueueBarData(EQueueBarIndex.Forging, true, this.RoleAttr.LordEquipEventTime.BeginTime, this.RoleAttr.LordEquipEventTime.RequireTime);
      this.SetRecvQueueBarData(18);
    }
    this.SetWallQueueBar();
    this.ResetQueueBarData();
    this.bBeginReLogin = false;
    NetworkManager.Instance.SetStage(LoginPhase.LP_InGame, 0L);
    if (!(GameManager.ActiveGameplay is BattleController))
      LordEquipData.ResetData();
    GUIManager.Instance.LoginCheckOpenBtn();
    NewbieManager.BuildCastleImmediate = false;
    bool flag = true;
    if (NewbieManager.UserIdCache == this.RoleAttr.UserId)
      flag = false;
    if (flag)
    {
      NewbieManager.UserIdCache = this.RoleAttr.UserId;
      if (!NewbieManager.CheckGoldGuy() && !NewbieManager.CheckArmyHole())
        NewbieManager.CheckPutOnEquipTeach();
    }
    if (!NewbieManager.IsWorking())
      GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie);
    DataManager.missionDataManager.AchievementMgr.RefleshRoleAchievement();
    if (NewbieManager.IsWorking())
      MallManager.Instance.bCanOpenMain = true;
    MallManager.Instance.CheckShowEffect();
    MallManager.Instance.bLoginFinish = true;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall, 8);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_FG, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_FG_Detail, 2);
    this.bRecvKingdom = (byte) 0;
    if (this.RoleAlliance.Id > 0U)
    {
      if (this.AskAllianceTime != 0L)
      {
        this.SendAskKind = 5;
      }
      else
      {
        this.SendAskKind = 3;
        this.AskAllianceTime = this.ServerTime;
        this.LastTime = this.RoleAttr.LogoutTime;
      }
      this.SendAskData((byte) 1, (byte) 1, this.SendAskKind, 0L, this.ServerTime + 5L);
      if (this.bOpenSetChannel)
        this.NowChannel = (byte) 1;
    }
    else
    {
      this.SendAskKind = -1;
      this.SendAskData((byte) 0, (byte) 0, DataID: 0L, DataTime: 0L);
    }
    this.bOpenSetChannel = false;
    if ((UnityEngine.Object) GUIManager.Instance.m_ChatBox != (UnityEngine.Object) null && GUIManager.Instance.ChannelIndex == (byte) 0)
      this.SendAskData((byte) 0, (byte) 0, DataID: 0L, DataTime: 0L);
    this.LoadBlackList();
    this.LoadEmojiSave();
    this.MIBDataCheck();
    this.UpdateMorale();
    this.UpdateMonsterPoint();
    this.bSetExpediton = false;
    this.mScroll_Idx = 0;
    this.mScroll_Y = 0.0f;
    this.WatchTowerDataCount = 0U;
    this.bReSetWTD = false;
    this.tmp_WatchTowerData.Clear();
    this.m_WatchTowerData.Clear();
    WatchTowerData watchTowerData = new WatchTowerData();
    for (int index = 0; index < 8; ++index)
    {
      watchTowerData.Index = (byte) 0;
      this.mtmpIdx[index] = watchTowerData;
    }
    this.bSoldierSave = false;
    this.DailyResetTimer = this.ServerTime + (86400L - (this.ServerTime - this.RoleAttr.FirstTimer) % 86400L);
    this.SortItemDataType = (byte) 0;
    DataManager.Instance.AttribVal.ResetAllVal();
    if (!this.bHeroBattleSave)
    {
      long result1;
      long.TryParse(PlayerPrefs.GetString("Battle_UserID"), out result1);
      long result2;
      long.TryParse(PlayerPrefs.GetString("ArenaBattle_UserID"), out result2);
      long result3;
      long.TryParse(PlayerPrefs.GetString("Battle_Condition_UserID"), out result3);
      if (NetworkManager.UserID == result1)
        DataManager.Instance.GetHeroBattleDataSave();
      if (NetworkManager.UserID == result3)
        DataManager.Instance.GetHero_Condition_BattleDataSave();
      if (result2 == NetworkManager.UserID)
        DataManager.Instance.GetArenaHeroBattleDataSave();
      DataManager.Instance.LoadNpcBattleHeroID();
    }
    long result4 = 0;
    long result5 = 0;
    byte result6 = 0;
    bool result7 = false;
    CString cstring = StringManager.Instance.StaticString1024();
    bool result8 = false;
    if (IGGGameSDK.Instance.GetStarStatus())
    {
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_Score_UseID");
      long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result4);
      if (result4 != 0L && !DataManager.Instance.CheckPrizeFlag((byte) 4))
      {
        cstring.ClearString();
        cstring.IntToFormat(result4);
        cstring.AppendFormat("{0}_Score_Count");
        byte.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result6);
        cstring.ClearString();
        cstring.IntToFormat(result4);
        cstring.AppendFormat("{0}_Score_bScoreFirst");
        bool.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result7);
        cstring.ClearString();
        cstring.IntToFormat(result4);
        cstring.AppendFormat("{0}_Score_bScoreEnd");
        bool.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result8);
        if (!result8 && result7 && result6 < (byte) 3)
        {
          cstring.ClearString();
          cstring.IntToFormat(result4);
          cstring.AppendFormat("{0}_Score_CD");
          long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result5);
          if (result5 + 604800L - this.ServerTime < 0L)
            GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 4, openMode: (byte) 0);
        }
      }
      else
        PlayerPrefs.SetString(cstring.ToString(), NetworkManager.UserID.ToString());
    }
    cstring.ClearString();
    cstring.IntToFormat(NetworkManager.UserID);
    cstring.AppendFormat("{0}_FB_UseID");
    long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result4);
    if (result4 != 0L && !DataManager.Instance.CheckPrizeFlag((byte) 3) && IGGGameSDK.Instance.GetStarStatus())
    {
      cstring.ClearString();
      cstring.IntToFormat(result4);
      cstring.AppendFormat("{0}_FB_Count");
      byte.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result6);
      cstring.ClearString();
      cstring.IntToFormat(result4);
      cstring.AppendFormat("{0}_FB_bScoreFirst");
      bool.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result7);
      if (result7 && result6 < (byte) 3)
      {
        cstring.ClearString();
        cstring.IntToFormat(result4);
        cstring.AppendFormat("{0}_FB_CD");
        long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result5);
        if (result5 + 259200L - this.ServerTime < 0L)
          GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 5, openMode: (byte) 0);
      }
    }
    if (this.bGetFBPrize && IGGGameSDK.Instance.GetStarStatus())
    {
      GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 2, 2, openMode: (byte) 0);
      this.bGetFBPrize = false;
    }
    this.bHeroBattleSave = true;
    this.RoleAttr.VIPLevelMax = (byte) this.VIPLevelTable.GetRecordByIndex(this.VIPLevelTable.TableCount - 1).VIPLevel;
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
    for (int index = 0; index < this.Resource.Length; ++index)
      this.Resource[index].UpdateCapacity();
    this.PetResource.UpdateCapacity();
    NewbieManager.CheckInitData();
    this.Prisoner_Requested = false;
    if (this.RoleAttr.VipLevelUp == (byte) 1)
      GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int) DataManager.Instance.RoleAttr.VIPLevel, 2, openMode: (byte) 0);
    else if (this.RoleAttr.VipLevelUp == (byte) 2)
      GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int) DataManager.Instance.RoleAttr.VIPLevel, 1, openMode: (byte) 0);
    this.bSendtoGetGift = true;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 6);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19);
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie_Protocal_ExtLock);
    PushManage.PushStart = true;
    DataManager.missionDataManager.AchievementMgr.UpdateGameCenterLevel((ushort) this.RoleAttr.Level);
    ArenaManager.Instance.bArenaOpenGet = true;
    ArenaManager.Instance.m_ArenaReportData.Clear();
    this.GetMaxActivityItem();
    this.KingGift.Reset();
    if (!byte.TryParse(PlayerPrefs.GetString("CollectionKind"), out this.mcollectionKind))
      this.mcollectionKind = byte.MaxValue;
    if (!byte.TryParse(PlayerPrefs.GetString("WarlobbyKind"), out this.mWarlobby_Kind))
      this.mWarlobby_Kind = byte.MaxValue;
    MobilizationManager.Instance.bFirstRequestActivityAmDegeePrize = false;
    MobilizationManager.Instance.bFirstOpen = true;
    AFAdvanceManager.Instance.CheckTriggerEvent_LoginFinish();
    cstring.ClearString();
    cstring.IntToFormat(NetworkManager.UserID);
    cstring.AppendFormat("{0}_Barrack_Soldier_Lock_UseID");
    long result9 = 0;
    if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result9))
    {
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_Barrack_Soldier_Lock");
      int result10 = 0;
      if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result10))
        GUIManager.Instance.Barrack_Soldier_Lock = result10;
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_Barrack_SliderValue");
      long result11 = 0;
      if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result11))
        GUIManager.Instance.Barrack_Soldier_SliderValue = result11;
    }
    cstring.ClearString();
    cstring.IntToFormat(NetworkManager.UserID);
    cstring.AppendFormat("{0}_Fusion_Lock_UseID");
    long result12 = 0;
    if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result12))
    {
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_Fusion_Lock");
      int result13 = 0;
      if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result13))
        PetManager.Instance.Fusion_Lock = result13;
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_Fusion_SliderValue");
      long result14 = 0;
      if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result14))
        PetManager.Instance.Fusion_SliderValue = result14;
    }
    cstring.ClearString();
    cstring.IntToFormat(NetworkManager.UserID);
    cstring.AppendFormat("{0}_FusionSkill_Lock_UseID");
    result12 = 0L;
    if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result12))
    {
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_FusionSkill_Lock");
      int result15 = 0;
      if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result15))
        PetManager.Instance.FusionSkill_Lock = result15;
      cstring.ClearString();
      cstring.IntToFormat(NetworkManager.UserID);
      cstring.AppendFormat("{0}_FusionSkill_SliderValue");
      long result16 = 0;
      if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result16))
        PetManager.Instance.FusionSkill_SliderValue = result16;
    }
    this.AllianceMoneyBonusRate = (ushort) 100;
    this.UpdateItemBuffIcon();
    GameManager.OnRefresh(NetworkNews.Refresh_BuffList);
    GamblingManager.Instance.loadGambleMode();
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
    JailManage.LoginCheckPrisoner();
    ActivityManager.Instance.bNeedSendUpData = true;
    ActivityManager.Instance.mSendAddCount = (ushort) 0;
    PetManager.Instance.LoadTrainingSet();
    PetManager.Instance.bRecvPetMarchFinish = true;
  }

  private void OnDailyReset()
  {
    this.DailyHelpGetAllianceMoney = 0U;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 4);
    DataManager.stageDataController.ResetLeanStageTimes();
    DataManager.missionDataManager.CleanVipBoxState();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mission, 4, 3);
    this.RoleAttr.DailyFreeScardStar = (byte) 0;
    this.RoleAttr.TodayUseMoraleItemTimes = (byte) 0;
    ArenaManager.Instance.m_ArenaTodayChallenge = (byte) 0;
    ArenaManager.Instance.m_ArenaTodayResetChallenge = (byte) 0;
    ArenaManager.Instance.m_ArenaExtraChallenge = (byte) 0;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Arena, 6);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Battle_Gambling, 8);
  }

  private void sendDailyReset()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_DAILY_RESET;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvDailyReset(MessagePacket MP)
  {
    if (MP.ReadByte() == (byte) 1)
    {
      this.DailyResetTimer = this.ServerTime + 10L;
    }
    else
    {
      byte vipLevel = this.RoleAttr.VIPLevel;
      this.RoleAttr.SuccessiveLoginDays = MP.ReadUShort();
      this.RoleAttr.VipPoint = MP.ReadUInt();
      this.RoleAttr.VIPLevel = this.GetVIPLevel(this.RoleAttr.VipPoint);
      this.OnDailyReset();
      this.DailyResetTimer = this.ServerTime + (86400L - (this.ServerTime - this.RoleAttr.FirstTimer) % 86400L);
      DataManager.missionDataManager.UpdateVipState();
      if ((int) vipLevel != (int) this.RoleAttr.VIPLevel)
      {
        GameManager.OnRefresh(NetworkNews.Refresh_VIP);
        GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int) this.RoleAttr.VIPLevel, 2, openMode: (byte) 0);
        if (this.RoleAttr.VIPLevel == (byte) 12)
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 8);
      }
      else if ((int) vipLevel != (int) this.RoleAttr.VIPLevelMax)
        GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int) this.RoleAttr.VIPLevel, 1, openMode: (byte) 0);
      this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_VIP, 0);
    }
  }

  public void SendTreasureBox()
  {
    if ((double) this.TreasureBox_CDTime != 0.0)
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ONLINE_GIFT;
    messagePacket.AddSeqId();
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.TreasureBox);
  }

  public void RecvOnline_Gift(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.TreasureBox);
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAttr.OnlineGiftOpenTimes = MP.ReadByte();
    this.RoleAttr.NextOnlineGiftOpenTime = MP.ReadLong();
    uint num = MP.ReadUInt();
    if (num != 0U)
      this.RoleAttr.Diamond += num;
    this.TreasureBox_ItemID = MP.ReadUShort();
    this.TreasureBox_Num = MP.ReadUShort();
    this.TreasureBox_ItemRank = MP.ReadByte();
    this.RoleAttr.OnlineGiftItemID.ItemID = MP.ReadUShort();
    this.RoleAttr.OnlineGiftItemID.Quantity = MP.ReadUShort();
    Vector2 mV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
    if (num == 0U)
    {
      ushort curItemQuantity = this.GetCurItemQuantity(this.TreasureBox_ItemID, (byte) 0);
      if (curItemQuantity < ushort.MaxValue)
        this.SetCurItemQuantity(this.TreasureBox_ItemID, (ushort) ((uint) curItemQuantity + (uint) this.TreasureBox_Num), (byte) 0, 0L);
      GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.Item, ItemID: this.TreasureBox_ItemID, EndTime: 2f);
    }
    else
    {
      GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num;
      GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.Diamond, ItemID: (ushort) 0, EndTime: 2f);
      GameManager.OnRefresh();
    }
    AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
    this.TreasureBox_CDTime = 1f;
    AFAdvanceManager.Instance.CheckOpenTreasureUnbroken();
  }

  public AssetBundle GetTableAB()
  {
    if ((UnityEngine.Object) this.TableAB == (UnityEngine.Object) null)
      this.TableAB = AssetManager.GetAssetBundle("Loading/Table", out this.TableABKey);
    return this.TableAB;
  }

  public void UnloadTableAB()
  {
    this.TableAB = (AssetBundle) null;
    AssetManager.UnloadAssetBundle(this.TableABKey);
    this.TableABKey = 0;
  }

  public static DataManager Instance
  {
    get
    {
      if (DataManager.instance == null)
        DataManager.instance = new DataManager();
      return DataManager.instance;
    }
  }

  public static MapManager MapDataController
  {
    get
    {
      if (DataManager.mapDataController == null)
        DataManager.mapDataController = new MapManager();
      return DataManager.mapDataController;
    }
  }

  public static StageManager StageDataController
  {
    get
    {
      if (DataManager.stageDataController == null)
        DataManager.stageDataController = new StageManager();
      return DataManager.stageDataController;
    }
  }

  public static MissionManager MissionDataManager
  {
    get
    {
      if (DataManager.missionDataManager == null)
        DataManager.missionDataManager = new MissionManager();
      return DataManager.missionDataManager;
    }
  }

  public static FBMissionManager FBMissionDataManager
  {
    get
    {
      if (DataManager.FBmissionDataManager == null)
        DataManager.FBmissionDataManager = new FBMissionManager();
      return DataManager.FBmissionDataManager;
    }
  }

  public static GamePlayAchievementManager AchievementMgr
  {
    get
    {
      if (DataManager.achievementMgr == null)
        DataManager.achievementMgr = new GamePlayAchievementManager();
      return DataManager.achievementMgr;
    }
  }

  public static void LoadTableData()
  {
    DataManager.Instance.bLoadingTableSuccess = true;
    DataManager.StageDataController.LoadTableData();
    DataManager.mapDataController.LoadTableData();
    DataManager.Instance.HeroTable = new CExternalTableWithWordKey<Hero>();
    DataManager.Instance.EnhanceTable = new CExternalTableWithWordKey<Enhance>();
    DataManager.Instance.EquipTable = new CExternalTableWithWordKey<Equip>();
    DataManager.Instance.ArrayTable = new CExternalTableWithWordKey<HeroArray>();
    DataManager.Instance.TeamTable = new CExternalTableWithWordKey<HeroTeam>();
    DataManager.Instance.RewardScoreTable = new CExternalTableWithWordKey<RewardScore>();
    DataManager.Instance.ComboTable = new CExternalTableWithWordKey<Combo>();
    DataManager.instance.TalentTreeLayout = new CExternalTableWithWordKey<TalentTreeLayoutTbl>();
    DataManager.instance.VIPLevelTable = new CExternalTableWithWordKey<VIP_DataTbl>();
    DataManager.instance.LordEquipEffectTable = new CExternalTableWithWordKey<LordEquipEffectData>();
    DataManager.instance.EventEquipmantTable = new CExternalTableWithWordKey<EventEquipmant>();
    DataManager.instance.ComboBoxTable = new CExternalTableWithWordKey<ComboBox>();
    DataManager.instance.LotteryBoxTable = new CExternalTableWithWordKey<LotteryBox>();
    DataManager.instance.GiftBoxTable = new CExternalTableWithWordKey<GiftBox>();
    DataManager.instance.MonsterActivityScoreTable = new CExternalTableWithWordKey<MonsterActivityScore>();
    DataManager.instance.LandWalkerData = new CExternalTableWithWordKey<global::LandWalkerData>();
    DataManager.instance.MallEquipmantTable = new CExternalTableWithWordKey<MallEquipmant>();
    DataManager.instance.TitleData = new CExternalTableWithWordKey<global::TitleData>();
    DataManager.instance.TitleDataW = new CExternalTableWithWordKey<global::TitleData>();
    DataManager.instance.TitleDataN = new CExternalTableWithWordKey<global::TitleData>();
    DataManager.instance.TitleDataF = new CExternalTableWithWordKey<global::TitleData>();
    DataManager.instance.TitleSortData = new CExternalTableWithWordKey<global::TitleSortData>();
    DataManager.instance.KOFPrize = new CExternalTableWithWordKey<KOFPrizeData>();
    DataManager.instance.AllianceMobilizationMission = new CExternalTableWithWordKey<MobilizationMissionData>();
    DataManager.instance.AllianceMobilizationDegreeInfo = new CExternalTableWithWordKey<MobilizationDegreeData>();
    DataManager.instance.AllianceMobilizationDegreeInfos[0] = new CExternalTableWithWordKey<MobilizationDegreeData>();
    DataManager.instance.AllianceMobilizationDegreeInfos[1] = new CExternalTableWithWordKey<MobilizationDegreeData>();
    DataManager.instance.AllianceMobilizationDegreeInfos[2] = new CExternalTableWithWordKey<MobilizationDegreeData>();
    DataManager.instance.AllianceMobilizationDegreeInfos[3] = new CExternalTableWithWordKey<MobilizationDegreeData>();
    DataManager.instance.SummonInfoData = new CExternalTableWithWordKey<SummonInfo>();
    DataManager.instance.DonateAmountTable = new CExternalTableWithWordKey<DonateAmountData>();
    DataManager.instance.FusionDataTable = new CExternalTableWithWordKey<FusionData>();
    DataManager.instance.FusionDataTable_Act = new CExternalTableWithWordKey<FusionData>();
    DataManager.instance.TechKindData = new CExternalTableWithWordKey<TechKindTbl>();
    DataManager.instance.TechLevelEx = new CExternalTableWithWordKey<TechLevelExTbl>();
    DataManager.Instance.HeroTable.LoadTable("Heros");
    DataManager.Instance.EnhanceTable.LoadTable("Enhance");
    DataManager.Instance.EquipTable.LoadTable("Item");
    DataManager.Instance.ArrayTable.LoadTable("Array");
    DataManager.Instance.TeamTable.LoadTable("Enemy");
    DataManager.Instance.RewardScoreTable.LoadTable("RewardScore");
    DataManager.Instance.ComboTable.LoadTable("Combo");
    DataManager.instance.VIPLevelTable.LoadTable("VIP");
    DataManager.instance.LordEquipEffectTable.LoadTable("equipment_effect");
    DataManager.instance.EventEquipmantTable.LoadTable("EventEquipmant");
    DataManager.instance.ComboBoxTable.LoadTable("ComboBox");
    DataManager.instance.LotteryBoxTable.LoadTable("LotteryBox");
    DataManager.instance.GiftBoxTable.LoadTable("AllianceGiftBox");
    DataManager.instance.MonsterActivityScoreTable.LoadTable("MonsterActivityScore");
    DataManager.instance.LandWalkerData.LoadTable("LandWalker");
    DataManager.instance.MallEquipmantTable.LoadTable("MallEquipmant");
    DataManager.instance.TitleData.LoadTable("WondersTitle");
    DataManager.instance.TitleDataW.LoadTable("EmperorTitle");
    DataManager.instance.TitleDataN.LoadTable("EmperorKingdomTitle");
    DataManager.instance.TitleDataF.LoadTable("FederalTitle");
    DataManager.instance.TitleSortData.LoadTable("TitleSort");
    DataManager.instance.KOFPrize.LoadTable("KingOfTheWorldPrize");
    DataManager.instance.AllianceMobilizationMission.LoadTable("AllianceMobilizationMission");
    DataManager.instance.AllianceMobilizationDegreeInfo.LoadTable("AllianceMobilizationDegreeInfo");
    DataManager.instance.AllianceMobilizationDegreeInfos[0].LoadTable("AllianceMobilizationDegreeInfo20rate");
    DataManager.instance.AllianceMobilizationDegreeInfos[1].LoadTable("AllianceMobilizationDegreeInfo30rate");
    DataManager.instance.AllianceMobilizationDegreeInfos[2].LoadTable("AllianceMobilizationDegreeInfo40rate");
    DataManager.instance.AllianceMobilizationDegreeInfos[3].LoadTable("AllianceMobilizationDegreeInfo50rate");
    DataManager.Instance.SkillTable = new CExternalTableWithWordKey<Skill>();
    DataManager.Instance.SkillTable.LoadTable("Skills");
    DataManager.Instance.AITable = new CExternalTableWithWordKey<AI>();
    DataManager.Instance.AITable.LoadTable("AI");
    DataManager.Instance.BuffTable = new CExternalTableWithWordKey<Buff>();
    DataManager.Instance.BuffTable.LoadTable("Buff");
    DataManager.Instance.SkillCostTable = new CExternalTableWithWordKey<SkillCost>();
    DataManager.Instance.SkillCostTable.LoadTable("SkillCost");
    DataManager.Instance.LevelUpTable = new CExternalTableWithWordKey<LevelUp>();
    DataManager.Instance.LevelUpTable.LoadTable("LevelUp");
    DataManager.Instance.SoldierDataTable = new CExternalTableWithWordKey<SoldierData>();
    DataManager.Instance.SoldierDataTable.LoadTable("Soldier");
    if (DataManager.Instance.mStringTable == null)
    {
      DataManager.Instance.mStringTable = new StringTable();
      DataManager.Instance.mStringTable.LoadStringTable();
    }
    DataManager.Instance.BuildsRequest = new CExternalTableWithWordKey<BuildLevelRequest>();
    DataManager.Instance.BuildsRequest.LoadTable("Buildup");
    DataManager.Instance.BuildsLevelRequestGroup = new CExternalTableWithWordKey<BuildLevelRequestGroup>();
    DataManager.Instance.BuildsLevelRequestGroup.LoadTable("BuildRequestGroup");
    DataManager.Instance.BuildsTypeData = new CExternalTableWithWordKey<BuildTypeData>();
    DataManager.Instance.BuildsTypeData.LoadTable("Buildkind");
    DataManager.Instance.BuildManorData = new CExternalTableWithWordKey<global::BuildManorData>();
    DataManager.Instance.BuildManorData.LoadTable("BuildManor");
    DataManager.Instance.EffectData = new CExternalTableWithWordKey<Effect>();
    DataManager.Instance.EffectData.LoadTable("Effect");
    DataManager.instance.StoreData = new CExternalTableWithWordKey<StoreTbl>();
    DataManager.instance.StoreData.LoadTable("Store");
    DataManager.instance.PriceListData = new CExternalTableWithWordKey<PriceListTbl>();
    DataManager.instance.PriceListData.LoadTable("PriceList");
    DataManager.instance.PriceListDataEx = new CExternalTableWithWordKey<PriceListTbl>();
    DataManager.instance.PriceListDataEx.LoadTable("PriceListPet");
    DataManager.instance.MarchPaltformTable = new CExternalTableWithWordKey<MarchPaltform>();
    DataManager.instance.MarchPaltformTable.LoadTable("Paltform");
    DataManager.instance.MarchOffsetTable = new CExternalTableWithWordKey<MarchOffset>();
    DataManager.instance.MarchOffsetTable.LoadTable("Offset");
    DataManager.instance.TechTreeLayout = new CExternalTableWithWordKey<TechTreeLayoutTbl>();
    DataManager.instance.TechTreeLayout.LoadTable("TechTree");
    DataManager.instance.TechData = new CExternalTableWithWordKey<TechDataTbl>();
    DataManager.instance.TechData.LoadTable("Tech");
    DataManager.instance.TechLevel = new CExternalTableWithWordKey<TechLevelTbl>();
    DataManager.instance.TechLevel.LoadTable("TechLv");
    DataManager.instance.TechKindData.LoadTable("TechKindSP");
    DataManager.instance.TechLevelEx.LoadTable("TechLvSP");
    DataManager.instance.InitTechTreeData();
    DataManager.instance.HUDTypeData = new CExternalTableWithWordKey<HUDTypeTbl>();
    DataManager.instance.HUDTypeData.LoadTable("HUD");
    DataManager.instance.CastleUpgradeRewardTable = new CExternalTableWithWordKey<CastleUpgradeRewardTbl>();
    DataManager.instance.CastleUpgradeRewardTable.LoadTable("CastleUpgradeReward");
    DataManager.instance.TalentData = new CExternalTableWithWordKey<TalentTbl>();
    DataManager.instance.TalentData.LoadTable("Talent");
    DataManager.instance.TalentLevel = new CExternalTableWithWordKey<TalentLevelTbl>();
    DataManager.instance.TalentLevel.LoadTable("Talentlv");
    DataManager.instance.TalentTreeLayout.LoadTable("TalentTree");
    DataManager.instance.ItemBuffTable = new CExternalTableWithWordKey<ItemBuff>();
    DataManager.instance.ItemBuffTable.LoadTable("Item_BUFF");
    DataManager.instance.LordEnhanceTable = new CExternalTableWithWordKey<LordEnhanceTbl>();
    DataManager.instance.LordEnhanceTable.LoadTable("LordEnhance");
    DataManager.instance.HeroTalkTable = new CExternalTableWithWordKey<HeroTalkTbl>();
    DataManager.instance.HeroTalkTable.LoadTable("talk");
    DataManager.instance.LordEquipEffectFilter = new CExternalTableWithWordKey<LordEquipEffectFilterData>();
    DataManager.instance.LordEquipEffectFilter.LoadTable("EffectFilter");
    DataManager.instance.NewbieTable = new CExternalTableWithWordKey<NewbieData>();
    DataManager.instance.NewbieTable.LoadTable("NewbieFake");
    DataManager.instance.NewbieUITable = new CExternalTableWithWordKey<NewbieUI>();
    DataManager.instance.NewbieUITable.LoadTable("NewbieList");
    DataManager.Instance.AllianceLvUpData = new CExternalTableWithWordKey<global::AllianceLvUpData>();
    DataManager.Instance.AllianceLvUpData.LoadTable("alliance_gift");
    DataManager.Instance.ArenaRewardData = new CExternalTableWithWordKey<ArenaReward>();
    DataManager.Instance.ArenaRewardData.LoadTable("ArenaReward");
    DataManager.Instance.ArenaHeroTopicData = new CExternalTableWithWordKey<ArenaHeroTopic>();
    DataManager.Instance.ArenaHeroTopicData.LoadTable("ArenaHeroTopic");
    DataManager.instance.CoordTable = new CExternalTableWithWordKey<CoordData>();
    DataManager.instance.CoordTable.LoadTable("ArmyCoordinate");
    DataManager.instance.CoordDisplayTable = new CExternalTableWithWordKey<CoordDisplayData>();
    DataManager.instance.CoordDisplayTable.LoadTable("ExerciseAmount");
    DataManager.instance.CoordResultTable = new CExternalTableWithWordKey<CoordResultData>();
    DataManager.instance.CoordResultTable.LoadTable("ExerciseResults");
    DataManager.instance.NPCPrize = new CExternalTableWithWordKey<NPCPrizeData>();
    DataManager.instance.NPCPrize.LoadTable("DarkElementBaseInfo");
    DataManager.instance.GambleMonsterPriceTable[0] = new CExternalTableWithWordKey<MonsterPriceTbl>();
    DataManager.instance.GambleMonsterPriceTable[0].LoadTable("CPalaceSmallPrize");
    DataManager.instance.GambleMonsterPriceTable[1] = new CExternalTableWithWordKey<MonsterPriceTbl>();
    DataManager.instance.GambleMonsterPriceTable[1].LoadTable("CPalaceBigPrize");
    GamblingManager.Instance.MakeMonsterPriceIndexTable();
    DataManager.instance.FusionDataTable.LoadTable("ItemCraft");
    DataManager.MissionDataManager.LoadTable();
    DataManager.instance.PushNotification = new CExternalTableWithWordKey<PushNotificationData>();
    DataManager.instance.PushNotification.LoadTable("Pushnotification");
    DataManager.instance.AllianceMobilizationDegreeRange = new CExternalTableWithWordKey<DegreeRange>();
    DataManager.instance.AllianceMobilizationDegreeRange.LoadTable("AllianceMobilizationDegreeRange");
    DataManager.instance.MapEffectTB = new CExternalTableWithWordKey<MapEffect>();
    DataManager.instance.MapEffectTB.LoadTable("MapEffect");
    GUIManager.Instance.BuildingData.MakeIndexTable();
    GUIManager.Instance.BuildingData.castleSkin.LoadTable();
    DataManager.Instance.InitPriceListData();
    DataManager.instance.InitBuffData();
    DataManager.instance.InitTalentData();
    if (DataManager.instance.m_BannedWord == null)
      DataManager.instance.m_BannedWord = new BannedWord();
    DataManager.instance.SummonInfoData.LoadTable("AllianceSummonInfo");
    DataManager.instance.DonateAmountTable.LoadTable("DonateAmount");
    PetManager.Instance.LoadTable();
    DataManager.instance.FastivalSpecialDataTable = new CExternalTableWithWordKey<FastivalSpecialData>();
    DataManager.instance.FastivalSpecialDataTable.LoadTable("AllianceRedPocket");
    DataManager.instance.FusionDataTable_Act.LoadTable("ItemCraftAct");
    DataManager.FBMissionDataManager.LoadTable();
    DataManager.instance.PushCallBackTable = new CExternalTableWithWordKey<PushCallBack>();
    DataManager.instance.PushCallBackTable.LoadTable("pushback");
    DataManager.Instance.UnloadTableAB();
  }

  public static void checkLineColorID(
    int LineTableID,
    out ELineColor lineColorid,
    out EUnitSide unitSideid,
    out bool bEase)
  {
    bEase = true;
    lineColorid = ELineColor.BLUE;
    unitSideid = EUnitSide.BLUE;
    DataManager instance = DataManager.Instance;
    MapLine mapLine = DataManager.MapDataController.MapLineTable[LineTableID];
    if (DataManager.CompareStr(mapLine.playerName, instance.RoleAttr.Name) == 0)
    {
      bEase = false;
      lineColorid = ELineColor.DEEPBLUE;
    }
    else if (DataManager.MapDataController.OtherKingdomData.kingdomPeriod == KINGDOM_PERIOD.KP_KVK && DataManager.MapDataController.IsEnemy(mapLine.kingdomID))
    {
      lineColorid = ELineColor.RED;
      unitSideid = EUnitSide.RED;
      if (GameConstants.IsPetSkillLine(LineTableID))
        bEase = !instance.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID);
      else if (mapLine.lineFlag > (byte) 4 && (mapLine.lineFlag < (byte) 9 || mapLine.lineFlag == (byte) 12))
      {
        bEase = !instance.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID);
      }
      else
      {
        if (mapLine.lineFlag != (byte) 14 && mapLine.lineFlag != (byte) 18 && mapLine.lineFlag < (byte) 23)
          return;
        bEase = !instance.IsMapIdMine(mapLine.start.zoneID, mapLine.start.pointID);
      }
    }
    else if (instance.IsSameAlliance(mapLine.allianceTag))
    {
      bEase = false;
      lineColorid = ELineColor.BLUE;
    }
    else
    {
      unitSideid = EUnitSide.RED;
      if (!GameConstants.IsPetSkillLine(LineTableID))
      {
        if (mapLine.lineFlag > (byte) 4 && (mapLine.lineFlag < (byte) 9 || mapLine.lineFlag == (byte) 12) && instance.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID))
        {
          bEase = false;
          lineColorid = ELineColor.RED;
        }
        if (bEase && (mapLine.lineFlag == (byte) 14 || mapLine.lineFlag == (byte) 18 || mapLine.lineFlag == (byte) 23 || mapLine.lineFlag == (byte) 26) && instance.IsMapIdMine(mapLine.start.zoneID, mapLine.start.pointID))
        {
          bEase = false;
          lineColorid = ELineColor.RED;
        }
      }
      else if (instance.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID))
      {
        bEase = false;
        lineColorid = ELineColor.RED;
      }
      if (!bEase)
        return;
      lineColorid = ELineColor.ORANGE;
    }
  }

  public void InitPriceListData()
  {
    this.PriceListDataTypeStart = new ushort[8];
    this.PriceListDataTypeCount = new byte[8];
    Array.Clear((Array) this.PriceListDataTypeStart, 0, this.PriceListDataTypeStart.Length);
    Array.Clear((Array) this.PriceListDataTypeCount, 0, this.PriceListDataTypeCount.Length);
    byte index1 = 0;
    byte num = 0;
    for (ushort Index = 0; (int) Index < this.PriceListData.TableCount; ++Index)
    {
      byte index2 = (byte) ((uint) this.PriceListData.GetRecordByIndex((int) Index).Type - 1U);
      if ((int) index2 < this.PriceListDataTypeCount.Length)
      {
        if ((int) index1 != (int) index2)
        {
          this.PriceListDataTypeCount[(int) index1] = num;
          num = (byte) 1;
          this.PriceListDataTypeStart[(int) index2] = Index;
          index1 = index2;
        }
        else
          ++num;
      }
    }
    for (ushort Index = 0; (int) Index < this.PriceListDataEx.TableCount; ++Index)
    {
      byte index3 = (byte) ((uint) this.PriceListDataEx.GetRecordByIndex((int) Index).Type - 1U);
      if ((int) index3 < this.PriceListDataTypeCount.Length)
      {
        if ((int) index1 != (int) index3)
        {
          this.PriceListDataTypeCount[(int) index1] = num;
          num = (byte) 1;
          this.PriceListDataTypeStart[(int) index3] = Index;
          index1 = index3;
        }
        else
          ++num;
      }
    }
    this.PriceListDataTypeCount[(int) index1] = num;
  }

  public uint GetResourceExchange(PriceListType Type, uint Num)
  {
    uint num1 = 0;
    uint num2 = 0;
    uint num3 = 0;
    uint num4 = 0;
    for (byte index = 0; (int) index < (int) this.PriceListDataTypeCount[(int) (byte) Type]; ++index)
    {
      PriceListTbl priceListTbl = Type > PriceListType.Time ? this.PriceListDataEx.GetRecordByIndex((int) this.PriceListDataTypeStart[(int) (byte) Type] + (int) index) : this.PriceListData.GetRecordByIndex((int) this.PriceListDataTypeStart[(int) (byte) Type] + (int) index);
      if ((int) priceListTbl.Inierval == (int) Num)
        return (uint) priceListTbl.Price;
      if (priceListTbl.Inierval > Num)
      {
        num2 = (uint) priceListTbl.Price;
        num4 = priceListTbl.Inierval;
        break;
      }
      num1 = (uint) priceListTbl.Price;
      num3 = priceListTbl.Inierval;
    }
    if (num1 > num2 || (int) num4 == (int) num3)
    {
      num4 = num3;
      num2 = num1;
      num3 = 0U;
      num1 = 0U;
    }
    if ((int) num4 - (int) num3 == 0)
      return 0;
    ulong num5 = 1000000000;
    ulong num6 = (ulong) (num2 - num1) * num5 / (ulong) (num4 - num3);
    ulong num7 = (ulong) (Num - num3) * num6;
    return num7 % num5 > 0UL ? Convert.ToUInt32((ulong) (1U + num1) + num7 / num5) : Convert.ToUInt32((ulong) num1 + num7 / num5);
  }

  public void SetFightHeroData()
  {
    int curHeroDataCount = (int) this.CurHeroDataCount;
    this.FightHeroCount = 0U;
    this.NonFightHeroCount = 0U;
    Array.Clear((Array) this.FightHeroID, 0, this.FightHeroID.Length);
    Array.Clear((Array) this.NonFightHeroID, 0, this.NonFightHeroID.Length);
    Array.Clear((Array) this.SortNonFightHeroID, 0, this.SortNonFightHeroID.Length);
    Array.Clear((Array) this.SortFightHeroID, 0, this.SortFightHeroID.Length);
    for (int index1 = 0; index1 < curHeroDataCount; ++index1)
    {
      uint index2 = this.sortHeroData[index1];
      if (this.TempFightHeroID[(IntPtr) index2] == (byte) 1)
      {
        this.FightHeroID[(IntPtr) DataManager.Instance.FightHeroCount] = index2;
        this.SortFightHeroID[(IntPtr) DataManager.Instance.FightHeroCount] = index2;
        ++DataManager.Instance.FightHeroCount;
      }
      else
      {
        this.SortNonFightHeroID[(IntPtr) DataManager.Instance.NonFightHeroCount] = index2;
        this.NonFightHeroID[(IntPtr) DataManager.Instance.NonFightHeroCount] = index2;
        ++DataManager.Instance.NonFightHeroCount;
      }
    }
  }

  public void Update()
  {
    if (NetworkManager.Connected() && (double) (this._DeltaTime = NetworkManager.SynchTime) >= 1.0)
    {
      this.UpdateMorale();
      DataManager.MissionDataManager.Update(this._DeltaTime);
      if (this.DailyResetTimer > 0L && this.ServerTime > this.DailyResetTimer)
      {
        this.DailyResetTimer = this.ServerTime + 10L;
        this.sendDailyReset();
      }
      if (this.m_CryptData.startTime > 0L && this.m_CryptData.startTime + (long) GameConstants.CryptSecends[(int) this.m_CryptData.kind] - this.ServerTime <= 0L)
        GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
      this.UpdateMonsterPoint();
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 16);
      PetBuff.UpdateFatigue();
    }
    byte num = 0;
    for (byte index = 0; (int) index < this.Resource.Length; ++index)
      num |= this.Resource[(int) index].Update(NetworkManager.DeltaTime);
    if (num > (byte) 0)
    {
      GUIManager.Instance.BuildingData.UpdateLevelupResource();
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    }
    if (this.PetResource.Update(NetworkManager.DeltaTime) != (byte) 0)
      GameManager.OnRefresh(NetworkNews.Refresh_PetResource);
    if (LandWalkerManager.alive)
      LandWalkerManager.Instance.Update();
    if ((double) this.TreasureBox_CDTime > 0.0)
    {
      this.TreasureBox_CDTime -= Time.smoothDeltaTime;
      if ((double) this.TreasureBox_CDTime <= 0.0)
      {
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
        GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
      }
    }
    if ((double) this.leadup_CDTime > 0.0)
    {
      this.leadup_CDTime -= Time.smoothDeltaTime;
      if ((double) this.leadup_CDTime <= 0.0)
      {
        Array.Clear((Array) GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
        Array.Clear((Array) GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
        Array.Clear((Array) GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
        GUIManager.Instance.SE_Kind[0] = SpeciallyEffect_Kind.LeadCoin;
        GUIManager.Instance.SE_Kind[1] = SpeciallyEffect_Kind.Power;
        GUIManager.Instance.mStartV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
        GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID);
      }
    }
    if ((double) this.CDGiftTime > 0.0 && this.bCDStart && !this.bSendtoGetGift)
    {
      this.CDGiftTime -= Time.smoothDeltaTime;
      if ((double) this.CDGiftTime < 0.0)
      {
        this.RoleAlliance.GiftNum = (ushort) 0;
        for (int index = 0; index < this.mShowListIdx.Count; ++index)
        {
          if (this.mListGift[this.mShowListIdx[index]].Status == (byte) 0 && this.mListGift[this.mShowListIdx[index]].RcvTime + 86400L - this.ServerTime > 0L)
            ++this.RoleAlliance.GiftNum;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        this.CDGiftTime = 300f;
      }
    }
    this.UpdateMailData(false);
    float deltaTime = Time.deltaTime;
    this.UpdateWallInfo(deltaTime);
    if ((double) this.sendTimer > 0.0)
      this.sendTimer -= deltaTime;
    if (this.mActivityCDTime > 0.0)
      this.mActivityCDTime -= (double) deltaTime;
    else
      this.GetMaxActivityItem();
    if (NetworkManager.Connected())
      AFAdvanceManager.Instance.CheckTriggerEvent_Time(Time.deltaTime);
    if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count <= 0 || (double) GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime <= 0.0)
      return;
    GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime -= Time.smoothDeltaTime;
    if ((double) GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime >= 0.0)
      return;
    if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count >= 3)
    {
      Array.Clear((Array) GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
      Array.Clear((Array) GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
      Array.Clear((Array) GUIManager.Instance.SE_Item_L_Color, 0, GUIManager.Instance.SE_Item_L_Color.Length);
      for (int index = 0; index < 3; ++index)
      {
        if (GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].ItemID != (ushort) 0)
        {
          GUIManager.Instance.SE_ItemID[index] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].ItemID;
          GUIManager.Instance.SE_Item_L_Color[index] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].color;
        }
      }
      GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID);
      for (int index = 0; index < 3; ++index)
        GUIManager.Instance.m_SpeciallyEffect.mItemlist.RemoveAt(0);
      if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count <= 0)
        return;
      GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime = 0.75f;
    }
    else
    {
      Array.Clear((Array) GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
      Array.Clear((Array) GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
      Array.Clear((Array) GUIManager.Instance.SE_Item_L_Color, 0, GUIManager.Instance.SE_Item_L_Color.Length);
      for (int index = 0; index < GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count; ++index)
      {
        if (GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].ItemID != (ushort) 0)
        {
          GUIManager.Instance.SE_ItemID[index] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].ItemID;
          GUIManager.Instance.SE_Item_L_Color[index] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[index].color;
        }
      }
      GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID);
      GUIManager.Instance.m_SpeciallyEffect.mItemlist.Clear();
    }
  }

  public void UpdateMorale()
  {
    ushort heroMaxMorale = this.HeroMaxMorale;
    long num = this.ServerTime - this.RoleAttr.LastMoraleRecoverTime;
    if ((int) this.RoleAttr.Morale >= (int) heroMaxMorale || num < 360L)
      return;
    this.RoleAttr.Morale += (ushort) ((ulong) num / 360UL);
    if ((int) this.RoleAttr.Morale > (int) heroMaxMorale)
      DataManager.StageDataController.UpdateRoleAttrMorale(heroMaxMorale);
    this.RoleAttr.LastMoraleRecoverTime = this.ServerTime - (long) ((int) num % 360);
    GameManager.OnRefresh();
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public uint GetMaxMonsterPoint()
  {
    return 15000U + this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MONSTERPOINT_MAX);
  }

  public void UpdateMonsterPoint()
  {
    uint maxMonsterPoint = this.GetMaxMonsterPoint();
    if (this.RoleAttr.MonsterPoint >= maxMonsterPoint)
    {
      this.RoleAttr.MonsterPoint = maxMonsterPoint;
      GameManager.OnRefresh(NetworkNews.Refresh_MonsterPoint);
    }
    else
    {
      long num1 = this.ServerTime - this.RoleAttr.LastMonsterPointRecoverTime;
      ushort recoverFrequency = this.RoleAttr.MonsterPointRecoverFrequency;
      if (recoverFrequency <= (ushort) 0 || num1 * 1000L <= (long) recoverFrequency)
        return;
      long num2 = num1 * 1000L / (long) recoverFrequency;
      this.RoleAttr.MonsterPoint = (long) this.RoleAttr.recvMonsterPoint + num2 < (long) maxMonsterPoint ? (uint) ((ulong) this.RoleAttr.recvMonsterPoint + (ulong) num2) : maxMonsterPoint;
      GameManager.OnRefresh(NetworkNews.Refresh_MonsterPoint);
    }
  }

  public static void SortHeroData()
  {
    if (DataManager.Instance.sortHeroData.Length <= 1)
      return;
    Array.Sort<uint>(DataManager.Instance.sortHeroData, 0, (int) DataManager.Instance.CurHeroDataCount, (IComparer<uint>) DataManager.Instance.heroDAtaComparer);
  }

  public static void SortConditionHeroData()
  {
    if (DataManager.Instance.sortHeroData.Length <= 1)
      return;
    Array.Sort<uint>(DataManager.Instance.sortHeroData, 0, (int) DataManager.Instance.CurHeroDataCount, (IComparer<uint>) DataManager.Instance.mHeroConditionComparer);
  }

  private void DownloadHero()
  {
    List<ushort> ushortList = new List<ushort>();
    for (int index = 0; index < this.heroBattleData.Length; ++index)
    {
      ushort heroId = this.heroBattleData[index].HeroID;
      ushortList.Add(heroId);
    }
    for (int index = 0; index < this.heroBattleConditionData.Length; ++index)
    {
      ushort heroId = this.heroBattleConditionData[index].HeroID;
      ushortList.Add(heroId);
    }
    for (int index = 0; index < ArenaManager.Instance.m_ArenaTargetHero.Length; ++index)
    {
      ushort num = ArenaManager.Instance.m_ArenaTargetHero[index];
      ushortList.Add(num);
    }
    DataManager.SortHeroData();
    for (int index = 0; (long) index < (long) this.CurHeroDataCount; ++index)
    {
      ushort num = (ushort) DataManager.Instance.sortHeroData[index];
      ushortList.Add(num);
    }
    for (int index = 0; index < ushortList.Count; ++index)
    {
      ushort heroID = ushortList[index];
      this.CheckHero3DMesh(heroID);
      this.CheckHeroEffectRes(heroID);
      this.CheckHeroSound(heroID);
    }
  }

  public void RecvHeroSave(MessagePacket MP)
  {
    this.curHeroData.Clear();
    this.CurHeroDataCount = 0U;
    MP.ReadLong();
    short num = MP.ReadShort();
    CurHeroData val = new CurHeroData();
    for (int index1 = 0; index1 < (int) num && index1 <= this.MaxCurHeroData; ++index1)
    {
      val.EquipEnchant = new byte[6];
      val.SkillLV = new byte[4];
      val.ID = MP.ReadUShort();
      val.Level = MP.ReadByte();
      val.Exp = MP.ReadUInt();
      val.Enhance = MP.ReadByte();
      val.Star = MP.ReadByte();
      val.Equip = MP.ReadByte();
      for (int index2 = 0; index2 < 6; ++index2)
        val.EquipEnchant[index2] = MP.ReadByte();
      for (int index3 = 0; index3 < 4; ++index3)
        val.SkillLV[index3] = MP.ReadByte();
      this.curHeroData.Add((uint) val.ID, val);
      this.sortHeroData[(IntPtr) this.CurHeroDataCount++] = (uint) val.ID;
    }
    DataManager.Instance.AttribVal.UpdateHeroCalData();
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 20, (ushort) this.CurHeroDataCount);
    if (this.RoleAttr.UserId != 0L)
      return;
    this.DownloadHero();
  }

  public void RecvHeroCreate(MessagePacket MP)
  {
    CurHeroData val = new CurHeroData();
    byte num1 = MP.ReadByte();
    uint num2 = MP.ReadUInt();
    DataManager.instance.Resource[4].Stock = num2;
    if (num1 == (byte) 0)
    {
      val.ID = MP.ReadUShort();
      val.Level = MP.ReadByte();
      val.Exp = MP.ReadUInt();
      val.Enhance = MP.ReadByte();
      val.Star = MP.ReadByte();
      val.Equip = MP.ReadByte();
      val.EquipEnchant = new byte[6];
      val.SkillLV = new byte[4];
      for (int index = 0; index < 6; ++index)
        val.EquipEnchant[index] = MP.ReadByte();
      for (int index = 0; index < 4; ++index)
        val.SkillLV[index] = MP.ReadByte();
      ushort ItemID = MP.ReadUShort();
      ushort Quantity = MP.ReadUShort();
      this.curHeroData.Add((uint) val.ID, val);
      this.sortHeroData[(IntPtr) this.CurHeroDataCount++] = (uint) val.ID;
      this.SetCurItemQuantity(ItemID, Quantity, (byte) 0, 0L);
      GUIManager.Instance.HideUILock(EUILock.HeroList);
      DataManager.Instance.AttribVal.UpdateHeroCalData();
      GameManager.OnRefresh(NetworkNews.Refresh_Item);
      GameManager.OnRefresh(NetworkNews.Refresh_Hero);
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
      GUIManager.Instance.OpenUI_Queued_Restricted_Top(EGUIWindow.UI_TreasureBox, 3, (int) val.ID, true, (byte) 1);
      if (val.ID == (ushort) 3 && IGGGameSDK.Instance.GetStarStatus())
        GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 5, openMode: (byte) 0);
    }
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie_Protocal_ExtLock);
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
  }

  public void RecvHeroPutOnEq(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    CurHeroData curHeroData1 = new CurHeroData();
    if (num1 != (byte) 0)
      return;
    ushort key = MP.ReadUShort();
    if (!this.curHeroData.ContainsKey((uint) key))
      return;
    CurHeroData curHeroData2 = this.curHeroData[(uint) key];
    byte num2 = MP.ReadByte();
    byte num3 = (byte) ((uint) num2 - (uint) curHeroData2.Equip);
    int num4 = 0;
    for (int index = 0; index < 6; ++index)
    {
      if (((int) num3 >> index & 1) == 1)
      {
        num4 = index;
        break;
      }
    }
    curHeroData2.Equip = num2;
    this.curHeroData[(uint) key] = curHeroData2;
    this.SetCurItemQuantity(MP.ReadUShort(), MP.ReadUShort(), (byte) 0, 0L);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 1, num4);
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
    AudioManager.Instance.PlayUISFX(UIKind.EquipTake);
  }

  public void SendHeroEnhance_Free()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_HEROENHANCE_FREECOMPLETE;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RoleAttr.EnhanceEventHeroID);
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
  }

  public void SendHeroEnhance_Instant()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_HEROENHANCE_INSTANT;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RoleAttr.EnhanceEventHeroID);
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
  }

  public void RecvHeroEnhance_Start(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAttr.EnhanceEventHeroID = MP.ReadUShort();
    this.RoleAttr.HeroEnhanceEventTime.BeginTime = MP.ReadLong();
    this.RoleAttr.HeroEnhanceEventTime.RequireTime = MP.ReadUInt();
    if (this.RoleAttr.HeroEnhanceEventTime.BeginTime != 0L)
    {
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.HeroEnhance, true, this.RoleAttr.HeroEnhanceEventTime.BeginTime, this.RoleAttr.HeroEnhanceEventTime.RequireTime);
      DataManager.Instance.SetRecvQueueBarData(11);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 2);
    }
    else
      this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
  }

  public void RecvHeroEnhance(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    CurHeroData curHeroData1 = new CurHeroData();
    switch (num1)
    {
      case 0:
        ushort num2 = MP.ReadUShort();
        if (!this.curHeroData.ContainsKey((uint) num2))
          break;
        CurHeroData curHeroData2 = this.curHeroData[(uint) num2];
        byte num3 = MP.ReadByte();
        byte num4 = MP.ReadByte();
        byte num5 = MP.ReadByte();
        curHeroData2.Enhance = num3;
        curHeroData2.Equip = num4;
        if (num5 > (byte) 0 && num5 < (byte) 3)
        {
          curHeroData2.SkillLV[(int) num5 - 1] = curHeroData2.Level;
        }
        else
        {
          switch (num5)
          {
            case 3:
              curHeroData2.SkillLV[(int) num5 - 1] = (byte) ((uint) curHeroData2.Level - 20U);
              break;
            case 4:
              curHeroData2.SkillLV[(int) num5 - 1] = (byte) ((uint) curHeroData2.Level - 40U);
              break;
          }
        }
        this.curHeroData[(uint) num2] = curHeroData2;
        this.RoleAttr.HeroEnhanceEventTime.BeginTime = MP.ReadLong();
        this.RoleAttr.HeroEnhanceEventTime.RequireTime = MP.ReadUInt();
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eHeroEnhance);
        this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0U);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 3, (int) num2);
        GameManager.OnRefresh(NetworkNews.Refresh_Hero);
        GameManager.OnRefresh();
        this.RoleAttr.EnhanceEventHeroID = (ushort) 0;
        GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
        GUIManager.Instance.HideUILock(EUILock.Hero_Info);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5);
        AudioManager.Instance.PlayUISFX(UIKind.HeroEnhance);
        Hero recordByKey = this.HeroTable.GetRecordByKey(num2);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.HeroTitle));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(679U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 6);
        this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
        break;
    }
  }

  public void RecvHeroEnhance_Cancel(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    ushort num = MP.ReadUShort();
    if ((int) num != (int) this.RoleAttr.EnhanceEventHeroID)
      return;
    this.RoleAttr.EnhanceEventHeroID = (ushort) 0;
    this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 7, (int) num);
    GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
  }

  public void SendHeroStarUp_Free()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_HEROSTARUP_FREECOMPLETE;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RoleAttr.StarUpEventHeroID);
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
  }

  public void SendHeroStarUp_Instant()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_HEROSTARUP_INSTANT;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RoleAttr.StarUpEventHeroID);
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
  }

  public void RecvHeroStarUp_Start(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAttr.StarUpEventHeroID = MP.ReadUShort();
    this.SetCurItemQuantity(MP.ReadUShort(), MP.ReadUShort(), (byte) 0, 0L);
    this.RoleAttr.HeroStarUpEventTime.BeginTime = MP.ReadLong();
    this.RoleAttr.HeroStarUpEventTime.RequireTime = MP.ReadUInt();
    if (this.RoleAttr.HeroStarUpEventTime.BeginTime != 0L)
    {
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.HeroEvolution, true, this.RoleAttr.HeroStarUpEventTime.BeginTime, this.RoleAttr.HeroStarUpEventTime.RequireTime);
      DataManager.Instance.SetRecvQueueBarData(12);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 4);
    }
    else
      this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
  }

  public void RecvHeroStarUp(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    CurHeroData curHeroData1 = new CurHeroData();
    if (num1 != (byte) 0)
      return;
    ushort num2 = MP.ReadUShort();
    if (!this.curHeroData.ContainsKey((uint) num2))
      return;
    this.RoleAttr.StarUpEventHeroID = num2;
    CurHeroData curHeroData2 = this.curHeroData[(uint) num2];
    byte num3 = MP.ReadByte();
    curHeroData2.Star = num3;
    this.curHeroData[(uint) num2] = curHeroData2;
    this.RoleAttr.HeroStarUpEventTime.BeginTime = MP.ReadLong();
    this.RoleAttr.HeroStarUpEventTime.RequireTime = MP.ReadUInt();
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eHeroStarUp);
    this.SetCurItemQuantity(MP.ReadUShort(), MP.ReadUShort(), (byte) 0, 0L);
    this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 5, (int) num2);
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GameManager.OnRefresh();
    this.RoleAttr.StarUpEventHeroID = (ushort) 0;
    GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
    AudioManager.Instance.PlayUISFX(UIKind.HeroEnhance);
    Hero recordByKey = this.HeroTable.GetRecordByKey(num2);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.HeroTitle));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(680U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 7);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
  }

  public void RecvHeroStarUp_Cancel(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    ushort num = MP.ReadUShort();
    this.SetCurItemQuantity(MP.ReadUShort(), MP.ReadUShort(), (byte) 0, 0L);
    if ((int) num == (int) this.RoleAttr.StarUpEventHeroID)
    {
      this.RoleAttr.StarUpEventHeroID = (ushort) 0;
      this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0U);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 8, (int) num);
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
  }

  public byte UpdateHeroAttr(ushort updateHeroID, MessagePacket MP)
  {
    byte num1 = 0;
    if (updateHeroID != (ushort) 0 && this.curHeroData.ContainsKey((uint) updateHeroID))
    {
      CurHeroData curHeroData = this.curHeroData[(uint) updateHeroID];
      num1 = curHeroData.Level;
      byte num2 = MP.ReadByte();
      curHeroData.Level = num2;
      curHeroData.Exp = MP.ReadUInt();
      for (int index = 0; index < curHeroData.SkillLV.Length; ++index)
        curHeroData.SkillLV[index] = MP.ReadByte();
      this.curHeroData[(uint) updateHeroID] = curHeroData;
    }
    else
    {
      int num3 = (int) MP.ReadByte();
      int num4 = (int) MP.ReadUInt();
      int num5 = (int) MP.ReadUInt();
    }
    return num1;
  }

  public void RecvHeroSkillAdd(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte targetLv = 0;
    if (num1 != (byte) 0)
      return;
    ushort num2 = MP.ReadUShort();
    byte beginLv = this.UpdateHeroAttr(num2, MP);
    if (this.curHeroData.ContainsKey((uint) num2))
      targetLv = this.curHeroData[(uint) num2].Level;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 6, (int) num2);
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GUIManager.Instance.HideUILock(EUILock.Hero_Info);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
    if ((int) targetLv <= (int) beginLv)
      return;
    GUIManager.Instance.AddHerodLvUpData(num2, beginLv, targetLv);
    if (!GUIManager.Instance.bOpenHeroLvUp)
    {
      GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_HeroUp, openMode: (byte) 0);
      GUIManager.Instance.bOpenHeroLvUp = true;
    }
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroUp, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, -1);
  }

  public void SendHeroPutOnEq(ushort HeroID, byte EquipPos)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Hero_Info))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_HEROPUTONEQ;
    messagePacket.AddSeqId();
    messagePacket.Add(HeroID);
    messagePacket.Add(EquipPos);
    messagePacket.Send();
  }

  public void NPCCombatDetail_Leaderdata(MessagePacket MP)
  {
    this.mFs_A_MHIdx = (byte) 5;
    this.mFs_D_MHIdx = (byte) 5;
    int num1 = (int) MP.ReadByte();
    int num2 = (int) MP.ReadUShort();
    byte num3 = MP.ReadByte();
    this.mFS_DetailData.HasSeigeData = num3;
    int num4 = (int) MP.ReadByte();
    byte num5 = MP.ReadByte();
    this.mFs_A_MHIdx = MP.ReadByte();
    this.mFS_DetailData.mFS_Hero[0].HeroNum = num5;
    for (int index = 0; index < (int) num5; ++index)
    {
      this.mFS_DetailData.mFS_Hero[0].HeroID[index] = MP.ReadUShort();
      this.mFS_DetailData.mFS_Hero[0].Rank[index] = MP.ReadByte();
      this.mFS_DetailData.mFS_Hero[0].Star[index] = MP.ReadByte();
    }
    MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[0].Name);
    this.mFS_DetailData.mFS_Info[0].Troops = MP.ReadUInt();
    this.mFS_DetailData.mFS_Info[0].Traps = MP.ReadUInt();
    ushort num6 = MP.ReadUShort();
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    this.mFS_DetailData.mFS_Info[0].TroopsCount = (byte) 0;
    this.mFS_DetailData.mFS_Info[0].TroopsFlag = num6;
    for (int index = 0; index < 16; ++index)
    {
      this.mFs_A_ST[index] = 0U;
      this.mFs_A_SL[index] = 0U;
      if (((int) num6 >> index & 1) == 1)
      {
        numArray1[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[0].Troops_L[index] = numArray1[index];
        numArray2[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[0].Troops_D[index] = numArray2[index];
        ++this.mFS_DetailData.mFS_Info[0].TroopsCount;
        this.mFs_A_ST[index] += numArray1[index];
        this.mFs_A_ST[index] += numArray2[index];
        this.mFs_A_SL[index] += numArray2[index];
      }
    }
    byte num7 = MP.ReadByte();
    this.mFs_D_MHIdx = MP.ReadByte();
    this.mFS_DetailData.mFS_Hero[1].HeroNum = num7;
    for (int index = 0; index < (int) num7; ++index)
    {
      this.mFS_DetailData.mFS_Hero[1].HeroID[index] = MP.ReadUShort();
      this.mFS_DetailData.mFS_Hero[1].Rank[index] = MP.ReadByte();
      this.mFS_DetailData.mFS_Hero[1].Star[index] = MP.ReadByte();
    }
    this.mFS_DetailData.mFS_Info[1].Name.ClearString();
    int num8 = (int) MP.ReadByte();
    int num9 = (int) MP.ReadUShort();
    this.mFS_DetailData.mFS_Info[1].Troops = MP.ReadUInt();
    this.mFS_DetailData.mFS_Info[1].Traps = MP.ReadUInt();
    ushort num10 = MP.ReadUShort();
    uint[] numArray3 = new uint[16];
    uint[] numArray4 = new uint[16];
    this.mFS_DetailData.mFS_Info[1].TroopsCount = (byte) 0;
    this.mFS_DetailData.mFS_Info[1].TroopsFlag = num10;
    for (int index = 0; index < 16; ++index)
    {
      this.mFs_D_ST[index] = 0U;
      this.mFs_D_SL[index] = 0U;
      if (((int) num10 >> index & 1) == 1)
      {
        numArray3[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[1].Troops_L[index] = numArray3[index];
        numArray4[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[1].Troops_D[index] = numArray4[index];
        ++this.mFS_DetailData.mFS_Info[1].TroopsCount;
        this.mFs_D_ST[index] += numArray3[index];
        this.mFs_D_ST[index] += numArray4[index];
        this.mFs_D_SL[index] += numArray4[index];
      }
    }
    this.mFS_DetailData.TrapsFlag = (ushort) 0;
    if (num3 == (byte) 1)
    {
      ushort num11 = MP.ReadUShort();
      this.mFS_DetailData.TrapsFlag = num11;
      uint[] numArray5 = new uint[12];
      uint[] numArray6 = new uint[12];
      uint[] numArray7 = new uint[12];
      this.mFS_DetailData.TrapsCount = (byte) 0;
      for (int index = 0; index < 12; ++index)
      {
        if (((int) num11 >> index & 1) == 1)
        {
          numArray5[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_L[index] = numArray5[index];
          numArray6[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_D[index] = numArray6[index];
          numArray7[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_S[index] = numArray7[index];
          ++this.mFS_DetailData.TrapsCount;
        }
      }
    }
    else
    {
      Array.Clear((Array) this.mFS_DetailData.mTraps_L, 0, this.mFS_DetailData.mTraps_L.Length);
      Array.Clear((Array) this.mFS_DetailData.mTraps_D, 0, this.mFS_DetailData.mTraps_D.Length);
      Array.Clear((Array) this.mFS_DetailData.mTraps_S, 0, this.mFS_DetailData.mTraps_S.Length);
      Array.Clear((Array) this.mFS_DetailData.mFS_Info[1].Troops_H, 0, this.mFS_DetailData.mFS_Info[1].Troops_H.Length);
    }
    this.mFs_A_Count = (byte) 0;
    this.mFs_D_Count = (byte) 0;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 1);
    GUIManager.Instance.HideUILock(EUILock.Mailing_Battle);
  }

  public void RecvCombatDetail_Leaderdata(MessagePacket MP)
  {
    this.mFs_A_MHIdx = (byte) 5;
    this.mFs_D_MHIdx = (byte) 5;
    int num1 = (int) MP.ReadByte();
    int num2 = (int) MP.ReadUShort();
    byte num3 = MP.ReadByte();
    this.mFS_DetailData.HasSeigeData = num3;
    int num4 = (int) MP.ReadByte();
    byte num5 = MP.ReadByte();
    this.mFs_A_MHIdx = MP.ReadByte();
    this.mFS_DetailData.mFS_Hero[0].HeroNum = num5;
    for (int index = 0; index < (int) num5; ++index)
    {
      this.mFS_DetailData.mFS_Hero[0].HeroID[index] = MP.ReadUShort();
      this.mFS_DetailData.mFS_Hero[0].Rank[index] = MP.ReadByte();
      this.mFS_DetailData.mFS_Hero[0].Star[index] = MP.ReadByte();
    }
    MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[0].Name);
    this.mFS_DetailData.mFS_Info[0].Troops = MP.ReadUInt();
    this.mFS_DetailData.mFS_Info[0].Traps = MP.ReadUInt();
    ushort num6 = MP.ReadUShort();
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    this.mFS_DetailData.mFS_Info[0].TroopsCount = (byte) 0;
    this.mFS_DetailData.mFS_Info[0].TroopsFlag = num6;
    for (int index = 0; index < 16; ++index)
    {
      this.mFs_A_ST[index] = 0U;
      this.mFs_A_SL[index] = 0U;
      if (((int) num6 >> index & 1) == 1)
      {
        numArray1[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[0].Troops_L[index] = numArray1[index];
        numArray2[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[0].Troops_D[index] = numArray2[index];
        ++this.mFS_DetailData.mFS_Info[0].TroopsCount;
        this.mFs_A_ST[index] += numArray1[index];
        this.mFs_A_ST[index] += numArray2[index];
        this.mFs_A_SL[index] += numArray2[index];
      }
    }
    int num7 = (int) MP.ReadByte();
    byte num8 = MP.ReadByte();
    this.mFs_D_MHIdx = MP.ReadByte();
    this.mFS_DetailData.mFS_Hero[1].HeroNum = num8;
    for (int index = 0; index < (int) num8; ++index)
    {
      this.mFS_DetailData.mFS_Hero[1].HeroID[index] = MP.ReadUShort();
      this.mFS_DetailData.mFS_Hero[1].Rank[index] = MP.ReadByte();
      this.mFS_DetailData.mFS_Hero[1].Star[index] = MP.ReadByte();
    }
    MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[1].Name);
    this.mFS_DetailData.mFS_Info[1].Troops = MP.ReadUInt();
    this.mFS_DetailData.mFS_Info[1].Traps = MP.ReadUInt();
    ushort num9 = MP.ReadUShort();
    uint[] numArray3 = new uint[16];
    uint[] numArray4 = new uint[16];
    this.mFS_DetailData.mFS_Info[1].TroopsCount = (byte) 0;
    this.mFS_DetailData.mFS_Info[1].TroopsFlag = num9;
    for (int index = 0; index < 16; ++index)
    {
      this.mFs_D_ST[index] = 0U;
      this.mFs_D_SL[index] = 0U;
      if (((int) num9 >> index & 1) == 1)
      {
        numArray3[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[1].Troops_L[index] = numArray3[index];
        numArray4[index] = MP.ReadUInt();
        this.mFS_DetailData.mFS_Info[1].Troops_D[index] = numArray4[index];
        ++this.mFS_DetailData.mFS_Info[1].TroopsCount;
        this.mFs_D_ST[index] += numArray3[index];
        this.mFs_D_ST[index] += numArray4[index];
        this.mFs_D_SL[index] += numArray4[index];
      }
    }
    this.mFS_DetailData.TrapsFlag = (ushort) 0;
    if (num3 == (byte) 1)
    {
      ushort num10 = MP.ReadUShort();
      this.mFS_DetailData.TrapsFlag = num10;
      uint[] numArray5 = new uint[12];
      uint[] numArray6 = new uint[12];
      uint[] numArray7 = new uint[12];
      this.mFS_DetailData.TrapsCount = (byte) 0;
      for (int index = 0; index < 12; ++index)
      {
        if (((int) num10 >> index & 1) == 1)
        {
          numArray5[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_L[index] = numArray5[index];
          numArray6[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_D[index] = numArray6[index];
          numArray7[index] = MP.ReadUInt();
          this.mFS_DetailData.mTraps_S[index] = numArray7[index];
          ++this.mFS_DetailData.TrapsCount;
        }
      }
    }
    else
    {
      Array.Clear((Array) this.mFS_DetailData.mTraps_L, 0, this.mFS_DetailData.mTraps_L.Length);
      Array.Clear((Array) this.mFS_DetailData.mTraps_D, 0, this.mFS_DetailData.mTraps_D.Length);
      Array.Clear((Array) this.mFS_DetailData.mTraps_S, 0, this.mFS_DetailData.mTraps_S.Length);
      Array.Clear((Array) this.mFS_DetailData.mFS_Info[1].Troops_H, 0, this.mFS_DetailData.mFS_Info[1].Troops_H.Length);
    }
    this.mFs_A_Count = (byte) 0;
    this.mFs_D_Count = (byte) 0;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 1);
    GUIManager.Instance.HideUILock(EUILock.Mailing_Battle);
  }

  public void RecvCombatDetail_Playerdata(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    uint[] numArray3 = new uint[16];
    uint[] numArray4 = new uint[16];
    for (int index1 = 0; index1 < (int) num2; ++index1)
    {
      if ((int) this.mFs_A_Count >= this.mFs_Info_A.Length || (int) this.mFs_D_Count >= this.mFs_Info_D.Length)
        return;
      if (((int) MP.ReadByte() & 128) == 0)
      {
        if (this.mFs_Info_A[(int) this.mFs_A_Count].Name == null)
        {
          this.mFs_Info_A[(int) this.mFs_A_Count].Name = new CString(13);
          this.mFs_Info_A[(int) this.mFs_A_Count].Troops_L = new uint[16];
          this.mFs_Info_A[(int) this.mFs_A_Count].Troops_D = new uint[16];
          this.mFs_Info_A[(int) this.mFs_A_Count].Troops_H = new uint[16];
        }
        MP.ReadStringPlus(13, this.mFs_Info_A[(int) this.mFs_A_Count].Name);
        this.mFs_Info_A[(int) this.mFs_A_Count].Troops = MP.ReadUInt();
        this.mFs_Info_A[(int) this.mFs_A_Count].Traps = MP.ReadUInt();
        this.mFs_Info_A[(int) this.mFs_A_Count].TroopsFlag = MP.ReadUShort();
        this.mFs_Info_A[(int) this.mFs_A_Count].TroopsCount = (byte) 0;
        for (int index2 = 0; index2 < 16; ++index2)
        {
          if (((int) this.mFs_Info_A[(int) this.mFs_A_Count].TroopsFlag >> index2 & 1) == 1)
          {
            numArray1[index2] = MP.ReadUInt();
            this.mFs_Info_A[(int) this.mFs_A_Count].Troops_L[index2] = numArray1[index2];
            numArray2[index2] = MP.ReadUInt();
            this.mFs_Info_A[(int) this.mFs_A_Count].Troops_D[index2] = numArray2[index2];
            ++this.TroopsCount;
            this.mFs_A_ST[index2] += numArray1[index2];
            this.mFs_A_ST[index2] += numArray2[index2];
            this.mFs_A_SL[index2] += numArray2[index2];
          }
        }
        ++this.mFs_A_Count;
      }
      else
      {
        if (this.mFs_Info_D[(int) this.mFs_D_Count].Name == null)
        {
          this.mFs_Info_D[(int) this.mFs_D_Count].Name = new CString(13);
          this.mFs_Info_D[(int) this.mFs_D_Count].Troops_L = new uint[16];
          this.mFs_Info_D[(int) this.mFs_D_Count].Troops_D = new uint[16];
          this.mFs_Info_D[(int) this.mFs_D_Count].Troops_H = new uint[16];
        }
        MP.ReadStringPlus(13, this.mFs_Info_D[(int) this.mFs_D_Count].Name);
        this.mFs_Info_D[(int) this.mFs_D_Count].Troops = MP.ReadUInt();
        this.mFs_Info_D[(int) this.mFs_D_Count].Traps = MP.ReadUInt();
        this.mFs_Info_D[(int) this.mFs_D_Count].TroopsFlag = MP.ReadUShort();
        this.mFs_Info_D[(int) this.mFs_D_Count].TroopsCount = (byte) 0;
        for (int index3 = 0; index3 < 16; ++index3)
        {
          if (((int) this.mFs_Info_D[(int) this.mFs_D_Count].TroopsFlag >> index3 & 1) == 1)
          {
            numArray3[index3] = MP.ReadUInt();
            this.mFs_Info_D[(int) this.mFs_D_Count].Troops_L[index3] = numArray3[index3];
            numArray4[index3] = MP.ReadUInt();
            this.mFs_Info_D[(int) this.mFs_D_Count].Troops_D[index3] = numArray4[index3];
            ++this.TroopsCount;
            this.mFs_D_ST[index3] += numArray3[index3];
            this.mFs_D_ST[index3] += numArray4[index3];
            this.mFs_D_SL[index3] += numArray4[index3];
          }
        }
        ++this.mFs_D_Count;
      }
    }
    if (num1 != (byte) 1)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary_Info, 1);
  }

  public void RecvCombatDetail_Injuredata(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    for (int index1 = 0; index1 < (int) num2; ++index1)
    {
      byte num3 = MP.ReadByte();
      byte num4 = (byte) ((uint) num3 & (uint) sbyte.MaxValue);
      if (((int) num3 & 128) == 0)
      {
        if (num4 == (byte) 0)
        {
          this.mFS_DetailData.mFS_Info[0].TroopsFlag = MP.ReadUShort();
          this.mFS_DetailData.mFS_Info[0].TroopsCount = (byte) 0;
          for (int index2 = 0; index2 < 16; ++index2)
          {
            if (((int) this.mFS_DetailData.mFS_Info[0].TroopsFlag >> index2 & 1) == 1)
            {
              numArray1[index2] = MP.ReadUInt();
              this.mFS_DetailData.mFS_Info[0].Troops_H[index2] = numArray1[index2];
              ++this.mFS_DetailData.mFS_Info[0].TroopsCount;
              this.mFs_A_ST[index2] += numArray1[index2];
              this.mFs_A_SL[index2] += numArray1[index2];
            }
          }
        }
        else
        {
          byte index3 = (byte) ((uint) num4 - 1U);
          this.mFs_Info_A[(int) index3].TroopsFlag = MP.ReadUShort();
          this.mFs_Info_A[(int) index3].TroopsCount = (byte) 0;
          for (int index4 = 0; index4 < 16; ++index4)
          {
            if (((int) this.mFs_Info_A[(int) index3].TroopsFlag >> index4 & 1) == 1)
            {
              numArray1[index4] = MP.ReadUInt();
              this.mFs_Info_A[(int) index3].Troops_H[index4] = numArray1[index4];
              this.mFs_A_ST[index4] += numArray1[index4];
              this.mFs_A_SL[index4] += numArray1[index4];
            }
          }
        }
      }
      else if (num4 == (byte) 0)
      {
        this.mFS_DetailData.mFS_Info[1].TroopsFlag = MP.ReadUShort();
        this.mFS_DetailData.mFS_Info[1].TroopsCount = (byte) 0;
        for (int index5 = 0; index5 < 16; ++index5)
        {
          if (((int) this.mFS_DetailData.mFS_Info[1].TroopsFlag >> index5 & 1) == 1)
          {
            numArray2[index5] = MP.ReadUInt();
            this.mFS_DetailData.mFS_Info[1].Troops_H[index5] = numArray2[index5];
            ++this.mFS_DetailData.mFS_Info[1].TroopsCount;
            this.mFs_D_ST[index5] += numArray2[index5];
            this.mFs_D_SL[index5] += numArray2[index5];
          }
        }
      }
      else
      {
        byte index6 = (byte) ((uint) num4 - 1U);
        this.mFs_Info_D[(int) index6].TroopsFlag = MP.ReadUShort();
        this.mFs_Info_D[(int) index6].TroopsCount = (byte) 0;
        for (int index7 = 0; index7 < 16; ++index7)
        {
          if (((int) this.mFs_Info_D[(int) index6].TroopsFlag >> index7 & 1) == 1)
          {
            numArray2[index7] = MP.ReadUInt();
            this.mFs_Info_D[(int) index6].Troops_H[index7] = numArray2[index7];
            this.mFs_D_ST[index7] += numArray2[index7];
            this.mFs_D_SL[index7] += numArray2[index7];
          }
        }
      }
    }
    if (num1 != (byte) 1)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary_Info, 1);
  }

  public void RecvAllianceAttr(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 1:
        MP.ReadStringPlus(13, this.RoleAlliance.Leader);
        break;
      case 2:
        this.RoleAlliance.Power = MP.ReadULong();
        break;
      case 3:
        MP.ReadStringPlus(3, this.RoleAlliance.Tag);
        break;
      case 4:
        MP.ReadStringPlus(20, this.RoleAlliance.Name);
        break;
      case 5:
        this.RoleAlliance.Header = MP.ReadString(20);
        break;
      case 6:
        this.RoleAlliance.Bullet = MP.ReadString(900);
        this.RoleAlliance.BulletinFlag = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 1);
        break;
      case 7:
        this.RoleAlliance.Emblem = MP.ReadUShort();
        break;
      case 8:
        this.RoleAlliance.Member = MP.ReadByte();
        this.RoleAlliance.Power = MP.ReadULong();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 5);
        break;
      case 9:
        this.RoleAlliance.Approval = MP.ReadByte();
        break;
      case 10:
        this.RoleAlliance.Applicant = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        break;
      case 11:
        this.RoleAlliance.Language = MP.ReadByte();
        break;
      case 12:
        this.RoleAlliance.Rank = (AllianceRank) MP.ReadByte();
        this.bSetAllianceScroll = true;
        GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 9);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 11);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 4);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        break;
      case 13:
        this.RoleAlliance.Money = MP.ReadUInt();
        break;
      case 14:
        uint num2 = MP.ReadUInt();
        for (int index = 0; index < this.mHelpDataList.Count; ++index)
        {
          if ((int) this.mHelpDataList[index].AllianceHelpRecordSN == (int) num2)
          {
            AllianceHelpRecordCMsgDataType mHelpData = this.mHelpDataList[index] with
            {
              AlreadyHelperNum = MP.ReadByte()
            };
            if ((int) mHelpData.AlreadyHelperNum == (int) this.mHelpDataList[index].HelpMax)
            {
              this.mHelpDataList.RemoveAt(index);
              GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
              GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
            }
            else
              this.mHelpDataList[index] = mHelpData;
            GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3);
            break;
          }
        }
        break;
      case 15:
        CString cstring1 = StringManager.Instance.StaticString1024();
        CString cstring2 = StringManager.Instance.StaticString1024();
        cstring1.ClearString();
        MP.ReadStringPlus(13, cstring1);
        cstring2.ClearString();
        cstring2.StringToFormat(cstring1);
        cstring2.AppendFormat(this.mStringTable.GetStringByID(764U));
        GUIManager.Instance.AddHUDMessage(cstring2.ToString(), (ushort) 9);
        byte index1 = (byte) Mathf.Clamp((int) MP.ReadByte(), 0, this.mPlayHelpDataType.Length - 1);
        this.mPlayHelpDataType[(int) index1].AlreadyHelperNum = MP.ReadByte();
        byte num3 = 0;
        if (index1 == (byte) 0)
        {
          long StartTime = MP.ReadLong();
          uint TotalTime = MP.ReadUInt();
          if (StartTime > 0L)
            DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, StartTime, TotalTime);
          GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 2);
          GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
          GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
          num3 = (byte) 1;
        }
        else
        {
          long StartTime = MP.ReadLong();
          uint TotalTime = MP.ReadUInt();
          if (StartTime > 0L)
            DataManager.Instance.SetQueueBarData(EQueueBarIndex.Building, true, StartTime, TotalTime);
          GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
          GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
          GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 2);
        DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) (105U + (uint) num3), (ushort) 1);
        break;
      case 16:
        byte index2 = (byte) Mathf.Clamp((int) MP.ReadByte(), 0, this.mPlayHelpDataType.Length - 1);
        this.mPlayHelpDataType[(int) index2].Kind = MP.ReadByte();
        if (this.mPlayHelpDataType[(int) index2].Kind == (byte) 0)
        {
          this.mPlayHelpDataType[(int) index2].AlreadyHelperNum = (byte) 0;
          this.mPlayHelpDataType[(int) index2].HelpMax = (byte) 0;
          this.mPlayHelpDataType[(int) index2].EventID = (ushort) 0;
          this.mPlayHelpDataType[(int) index2].EventDataLv = (byte) 0;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 1);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
        break;
      case 17:
        uint num4 = MP.ReadUInt();
        for (int index3 = 0; index3 < this.mHelpDataList.Count; ++index3)
        {
          if ((int) this.mHelpDataList[index3].AllianceHelpRecordSN == (int) num4)
          {
            this.mHelpDataList.RemoveAt(index3);
            GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
            GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
            GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
            GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3);
            break;
          }
        }
        break;
      case 18:
        ushort num5 = MP.ReadUShort();
        if (this.bSendtoGetGift)
        {
          this.RoleAlliance.GiftNum = num5;
          if (this.RoleAlliance.GiftNum > (ushort) 300)
            this.RoleAlliance.GiftNum = (ushort) 300;
        }
        Equip recordByKey1 = this.EquipTable.GetRecordByKey(MP.ReadUShort());
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey1.EquipName));
        if (recordByKey1.PropertiesInfo != null)
        {
          switch (recordByKey1.PropertiesInfo[4].Propertieskey)
          {
            case 1:
              GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7014U));
              break;
            case 2:
              GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7015U));
              break;
            case 3:
              GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7019U));
              break;
          }
        }
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 28);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 5);
        break;
      case 19:
        if (this.bSendtoGetGift)
          return;
        AllianceBoxDataType val1 = new AllianceBoxDataType();
        val1.SN = MP.ReadUInt();
        val1.Status = MP.ReadByte();
        val1.RcvTime = MP.ReadLong();
        val1.BoxItemID = MP.ReadUShort();
        val1.Item.ItemID = MP.ReadUShort();
        val1.Item.Num = MP.ReadUShort();
        val1.Item.ItemRank = MP.ReadByte();
        this.mGift_UpdateSN = MP.ReadUInt();
        if (this.mGift_UpdateSN != 0U)
        {
          if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
          {
            if ((int) this.mShowListUnOpenIdx > this.mShowListIdx.Count)
              return;
            this.mShowListIdx.Insert((int) this.mShowListUnOpenIdx, val1.SN);
            if (this.mShowListUnOpenIdx < (ushort) 300)
              ++this.mShowListUnOpenIdx;
            ++this.RoleAlliance.GiftNum;
            if (this.mListGift[this.mGift_UpdateSN].Status == (byte) 0)
            {
              --this.mShowListUnOpenIdx;
              if (this.RoleAlliance.GiftNum > (ushort) 0)
                --this.RoleAlliance.GiftNum;
            }
            this.mListGift.Remove(this.mGift_UpdateSN);
            this.mListGift.Add(val1.SN, val1);
            this.mShowListIdx.Remove(this.mGift_UpdateSN);
          }
        }
        else
        {
          this.mListGift.Add(val1.SN, val1);
          if (this.mShowListIdx.Count < (int) this.mShowListUnOpenIdx)
            this.mShowListIdx.Insert((int) this.mShowListUnOpenIdx, val1.SN);
          else
            this.mShowListIdx.Add(val1.SN);
          ++this.mShowListUnOpenIdx;
          ++this.RoleAlliance.GiftNum;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, 1);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        this.CDGiftTime = 300f;
        break;
      case 20:
        if (this.bSendtoGetGift)
          return;
        AllianceBoxDataType val2 = new AllianceBoxDataType();
        val2.SN = MP.ReadUInt();
        val2.Status = MP.ReadByte();
        val2.RcvTime = MP.ReadLong();
        val2.BoxItemID = MP.ReadUShort();
        val2.Item.ItemID = MP.ReadUShort();
        val2.Item.Num = MP.ReadUShort();
        val2.Item.ItemRank = MP.ReadByte();
        uint key = MP.ReadUInt();
        if (key != 0U)
        {
          if (this.mListGift.ContainsKey(key))
          {
            this.mShowListIdx.Insert((int) this.mShowListUnOpenIdx, val2.SN);
            if (this.mShowListUnOpenIdx < (ushort) 300)
              ++this.mShowListUnOpenIdx;
            ++this.RoleAlliance.GiftNum;
            if (this.mListGift[key].Status == (byte) 0)
            {
              --this.mShowListUnOpenIdx;
              if (this.RoleAlliance.GiftNum > (ushort) 0)
                --this.RoleAlliance.GiftNum;
            }
            this.mListGift.Remove(key);
            this.mListGift.Add(val2.SN, val2);
            this.mShowListIdx.Remove(key);
          }
        }
        else
        {
          this.mListGift.Add(val2.SN, val2);
          if (this.mShowListIdx.Count < (int) this.mShowListUnOpenIdx)
            this.mShowListIdx.Insert((int) this.mShowListUnOpenIdx, val2.SN);
          else
            this.mShowListIdx.Add(val2.SN);
          ++this.mShowListUnOpenIdx;
          ++this.RoleAlliance.GiftNum;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, 1);
        this.RoleAlliance.PackItemID = MP.ReadUShort();
        this.RoleAlliance.PackPoint = MP.ReadUInt();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 3);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        this.CDGiftTime = 300f;
        break;
      case 21:
        this.RoleAlliance.PackPoint = MP.ReadUInt();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 4);
        GUIManager.Instance.m_SpeciallyEffect.mAddGiftPoint = false;
        break;
      case 22:
        this.RoleAlliance.GiftExp = MP.ReadUInt();
        uint num6 = 0;
        byte num7 = 0;
        for (int index4 = 0; index4 < this.AllianceLvUpData.TableCount; ++index4)
        {
          ++num7;
          num6 += this.AllianceLvUpData.GetRecordByKey((ushort) (index4 + 1)).LvExp;
          if (num6 > this.RoleAlliance.GiftExp)
          {
            this.RoleAlliance.GiftLv = (byte) index4;
            break;
          }
        }
        if (num6 > 0U && (int) num7 == this.AllianceLvUpData.TableCount && num6 <= this.RoleAlliance.GiftExp)
          this.RoleAlliance.GiftLv = num7;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 5);
        GUIManager.Instance.m_SpeciallyEffect.mAddGiftExp = false;
        break;
      case 23:
        this.RoleAlliance.ChatMax = MP.ReadLong();
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        break;
      case 24:
        WonderData wonderData1 = new WonderData();
        wonderData1.KingdomID = MP.ReadUShort();
        wonderData1.WonderID = MP.ReadByte();
        wonderData1.OpenState = MP.ReadByte();
        wonderData1.StateCountDown.BeginTime = MP.ReadLong();
        wonderData1.StateCountDown.RequireTime = MP.ReadUInt();
        int num8 = this.m_Wonders.BinarySearch(wonderData1, (IComparer<WonderData>) this.TC);
        if (num8 < 0)
          this.m_Wonders.Insert(~num8, wonderData1);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6);
        this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
        break;
      case 25:
        WonderData wonderData2 = new WonderData();
        wonderData2.KingdomID = MP.ReadUShort();
        wonderData2.WonderID = MP.ReadByte();
        byte num9 = MP.ReadByte();
        wonderData2.OpenState = (byte) 1;
        wonderData2.StateCountDown.BeginTime = MP.ReadLong();
        wonderData2.StateCountDown.RequireTime = MP.ReadUInt();
        int index5 = this.m_Wonders.BinarySearch(wonderData2, (IComparer<WonderData>) this.TC);
        if (index5 < 0)
        {
          wonderData2.OpenState = (byte) 0;
          index5 = this.m_Wonders.BinarySearch(wonderData2, (IComparer<WonderData>) this.TC);
          if (index5 < 0)
            return;
        }
        this.m_Wonders.RemoveAt(index5);
        wonderData2.OpenState = num9;
        int num10 = this.m_Wonders.BinarySearch(wonderData2, (IComparer<WonderData>) this.TC);
        if (num10 < 0)
          this.m_Wonders.Insert(~num10, wonderData2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6);
        this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
        break;
      case 26:
        WonderData wonderData3 = new WonderData();
        wonderData3.KingdomID = MP.ReadUShort();
        wonderData3.WonderID = MP.ReadByte();
        wonderData3.OpenState = (byte) 1;
        int index6 = this.m_Wonders.BinarySearch(wonderData3, (IComparer<WonderData>) this.TC);
        if (index6 < 0)
        {
          wonderData3.OpenState = (byte) 0;
          index6 = this.m_Wonders.BinarySearch(wonderData3, (IComparer<WonderData>) this.TC);
          if (index6 < 0)
            return;
        }
        this.m_Wonders.RemoveAt(index6);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6);
        this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
        break;
      case 27:
        ushort num11 = MP.ReadUShort();
        if (this.bSendtoGetGift)
        {
          this.RoleAlliance.GiftNum = num11;
          if (this.RoleAlliance.GiftNum > (ushort) 300)
            this.RoleAlliance.GiftNum = (ushort) 300;
        }
        Equip recordByKey2 = this.EquipTable.GetRecordByKey(MP.ReadUShort());
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey2.EquipName));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9554U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 28);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 5);
        break;
      case 28:
        byte num12 = (byte) Mathf.Clamp((int) MP.ReadByte(), 0, 19);
        MobilizationManager.Instance.mMobilizationMission[(int) num12 + 1].MissionType = MP.ReadUShort();
        MobilizationManager.Instance.mMobilizationMission[(int) num12 + 1].Difficulty = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 3, (int) num12 + 1);
        break;
      case 29:
        byte num13 = (byte) Mathf.Clamp((int) MP.ReadByte(), 0, 19);
        MobilizationManager.Instance.mMobilizationMission[(int) num13 + 1].MissionType = (ushort) 1001;
        MobilizationManager.Instance.mMobilizationMission[(int) num13 + 1].CDTime = MP.ReadLong();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 3, (int) num13 + 1);
        break;
      case 30:
        MobilizationManager.Instance.involvedMember = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 4);
        break;
      case 31:
        MobilizationManager.Instance.AMScore = MP.ReadUInt();
        MobilizationDegreeData recordByIndex1;
        for (int Index = 0; Index < this.AllianceMobilizationDegreeInfo.TableCount; ++Index)
        {
          recordByIndex1 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(Index);
          if (Index == this.AllianceMobilizationDegreeInfo.TableCount - 1)
          {
            if (MobilizationManager.Instance.AMScore >= recordByIndex1.MissionDegreeScore)
            {
              MobilizationManager.Instance.AMCompleteDegree = (byte) this.AllianceMobilizationDegreeInfo.TableCount;
              MobilizationManager.Instance.CompleteScore = recordByIndex1.MissionDegreeScore;
              break;
            }
          }
          else
          {
            MobilizationDegreeData recordByIndex2 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(Index + 1);
            if (MobilizationManager.Instance.AMScore >= recordByIndex1.MissionDegreeScore && MobilizationManager.Instance.AMScore < recordByIndex2.MissionDegreeScore)
            {
              MobilizationManager.Instance.AMCompleteDegree = (byte) (Index + 1);
              MobilizationManager.Instance.CompleteScore = recordByIndex2.MissionDegreeScore;
              break;
            }
          }
        }
        if (MobilizationManager.Instance.AMCompleteDegree == (byte) 0)
        {
          recordByIndex1 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(0);
          MobilizationManager.Instance.CompleteScore = recordByIndex1.MissionDegreeScore;
        }
        if ((int) MobilizationManager.Instance.AMCompleteDegree > (int) this.RoleAlliance.AMMaxDegree)
          MobilizationManager.Instance.AMCompleteDegree = this.RoleAlliance.AMMaxDegree;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 2, 206);
        MobilizationManager.Instance.OnAMCompleteDegreeChange();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_RewardsSelect, 1);
        break;
      case 32:
        this.RoleAlliance.KingdomID = MP.ReadUShort();
        break;
      case 34:
        this.RoleAlliance.AMRank = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11);
        break;
      case 35:
        ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt());
        break;
      case 36:
        ActivityManager.Instance.AllianceSummon_SummonData.SummonPoint = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
        break;
      case 37:
        ActivityManager.Instance.SetAllianceSummon_NPCCityCombatTimes(MP.ReadByte(), MP.ReadByte());
        ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt());
        break;
      case 38:
        int num14 = (int) MP.ReadUShort();
        ActivityManager.Instance.AllianceSummon_SummonData.GiftID = MP.ReadUShort();
        ActivityManager.Instance.AllianceSummon_SummonData.MonsterID = MP.ReadUShort();
        ActivityManager.Instance.AllianceSummon_SummonData.CostPoint = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
        break;
      case 39:
        ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.KingdomID = MP.ReadUShort();
        ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.zoneID = MP.ReadUShort();
        ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.pointID = MP.ReadByte();
        ActivityManager.Instance.AllianceSummon_SummonData.MonsterEndTime = MP.ReadLong();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
        break;
      case 40:
        CString tmp = StringManager.Instance.StaticString1024();
        CString cstring3 = StringManager.Instance.StaticString1024();
        CString tmpS = StringManager.Instance.StaticString1024();
        MP.ReadStringPlus(13, cstring3);
        uint nameId = (uint) DataManager.MapDataController.MapMonsterTable.GetRecordByKey(MP.ReadUShort()).NameID;
        tmpS.StringToFormat(this.RoleAlliance.Tag);
        tmpS.StringToFormat(cstring3);
        tmpS.AppendFormat("[{0}]{1}");
        tmp.ClearString();
        tmp.StringToFormat(tmpS);
        tmp.StringToFormat(this.mStringTable.GetStringByID(nameId));
        tmp.AppendFormat(this.mStringTable.GetStringByID(14512U));
        GUIManager.Instance.AddHUDMessage(tmp.ToString(), (ushort) byte.MaxValue);
        tmp.ClearString();
        tmp.StringToFormat(cstring3);
        tmp.StringToFormat(this.mStringTable.GetStringByID(nameId));
        tmp.AppendFormat(this.mStringTable.GetStringByID(14514U));
        this.AddSystemMessage(tmp, (byte) 7, -1L);
        break;
      case 41:
        ActivityManager.Instance.AW_NowAllianceEnterWar = MP.ReadByte();
        ActivityManager.Instance.CheckAWShowHint();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 6);
        break;
      case 42:
        ActivityManager.Instance.AW_Rank = MP.ReadByte();
        ActivityManager.Instance.AW_MemberCount = MP.ReadByte();
        ActivityManager.Instance.SetNowState();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 15, 210);
        break;
      case 43:
        byte index7 = (byte) Mathf.Clamp((int) MP.ReadByte(), 0, this.mPlayHelpDataType.Length - 1);
        this.mPlayHelpDataType[(int) index7].AlreadyHelperNum = MP.ReadByte();
        byte num15 = 0;
        if (index7 == (byte) 0)
        {
          long StartTime = MP.ReadLong();
          uint TotalTime = MP.ReadUInt();
          if (StartTime > 0L)
            DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, StartTime, TotalTime);
          GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 2);
          GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
          GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
          num15 = (byte) 1;
        }
        else
        {
          long StartTime = MP.ReadLong();
          uint TotalTime = MP.ReadUInt();
          if (StartTime > 0L)
            DataManager.Instance.SetQueueBarData(EQueueBarIndex.Building, true, StartTime, TotalTime);
          GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
          GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
          GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 2);
        DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) (105U + (uint) num15), (ushort) 1);
        break;
      case 44:
        this.RoleAlliance.BookmarkTime = MP.ReadLong();
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if ((UnityEngine.Object) menu != (UnityEngine.Object) null && menu.m_eMapMode == EUIOriginMapMode.KingdomMap)
        {
          DataManager.Instance.RoleBookMark.sendBookMarkInfo_Alliance(false);
          break;
        }
        break;
      case 45:
        ushort InKey1 = MP.ReadUShort();
        byte serverIndex = MP.ReadByte();
        CString cstring4 = StringManager.Instance.StaticString1024();
        MP.ReadStringPlus(13, cstring4);
        ActivityGiftManager.Instance.SendDataRequest(serverIndex);
        ++ActivityGiftManager.Instance.EnableRedPocketNum;
        FastivalSpecialData recordByKey3 = DataManager.Instance.FastivalSpecialDataTable.GetRecordByKey(InKey1);
        if ((int) recordByKey3.ID == (int) InKey1)
        {
          CString cstring5 = StringManager.Instance.StaticString1024();
          cstring5.ClearString();
          cstring5.StringToFormat(cstring4);
          cstring5.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint) recordByKey3.ItemName));
          cstring5.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(11218U));
          GUIManager.Instance.AddHUDMessage(cstring5.ToString(), (ushort) byte.MaxValue);
          break;
        }
        break;
      case 46:
        ushort InKey2 = MP.ReadUShort();
        ActivityGiftManager.Instance.SendDataRequest(MP.ReadByte());
        ++ActivityGiftManager.Instance.EnableRedPocketNum;
        FastivalSpecialData recordByKey4 = DataManager.Instance.FastivalSpecialDataTable.GetRecordByKey(InKey2);
        if ((int) recordByKey4.ID == (int) InKey2)
        {
          CString cstring6 = StringManager.Instance.StaticString1024();
          cstring6.ClearString();
          cstring6.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint) recordByKey4.ItemName));
          cstring6.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(11217U));
          GUIManager.Instance.AddHUDMessage(cstring6.ToString(), (ushort) byte.MaxValue);
          break;
        }
        break;
      case 47:
        ActivityGiftManager.Instance.mLeaderRedPocketResetTime = MP.ReadLong();
        ActivityGiftManager.Instance.bReSetMainGift = ActivityGiftManager.Instance.mLeaderRedPocketResetTime > ActivityManager.Instance.ServerEventTime;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 4);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 11);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        break;
      case 48:
        ActivityGiftManager.Instance.updateGiftCount(MP.ReadByte(), MP.ReadByte());
        break;
      case 49:
        ActivityGiftManager.Instance.RecvUpdate_EventInfo(MP);
        break;
    }
    DataManager.msgBuffer[0] = num1;
    GameManager.OnRefresh(NetworkNews.Refresh_Alliance, DataManager.msgBuffer);
  }

  public void RecvPrizeFlag(MessagePacket MP)
  {
    ERoleFlagKind eroleFlagKind = (ERoleFlagKind) MP.ReadByte();
    switch (eroleFlagKind)
    {
      case ERoleFlagKind.ERFK_JoinAlliance:
        GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 2, openMode: (byte) 0);
        DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt();
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
        DataManager.Instance.Resource[4].Stock = MP.ReadUInt();
        DataManager.Instance.RoleAlliance.Money = MP.ReadUInt();
        GameManager.OnRefresh(NetworkNews.Refresh_Item);
        GameManager.OnRefresh(NetworkNews.Refresh_Attr);
        GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        GameManager.OnRefresh();
        break;
      case ERoleFlagKind.ERFK_PassNewbie:
        GUIManager.Instance.HideUILock(EUILock.ForceNewbie);
        DataManager instance = DataManager.Instance;
        instance.RoleAttr.PrizeFlag = MP.ReadUInt();
        DataManager.StageDataController.RoleAttrLevelUp(MP, 24);
        instance.RoleAttr.Power = MP.ReadULong();
        instance.Resource[0].Stock = MP.ReadUInt();
        instance.Resource[1].Stock = MP.ReadUInt();
        instance.Resource[2].Stock = MP.ReadUInt();
        instance.Resource[3].Stock = MP.ReadUInt();
        instance.Resource[4].Stock = MP.ReadUInt();
        instance.RoleAttr.VipPoint = MP.ReadUInt();
        instance.RoleAttr.VIPLevel = instance.GetVIPLevel(instance.RoleAttr.VipPoint);
        DataManager.missionDataManager.UpdateVipState();
        GameManager.OnRefresh();
        instance.SendAskData((byte) 0, (byte) 0, DataID: 0L, DataTime: 0L);
        ((Component) GUIManager.Instance.m_HUDsTransform).gameObject.SetActive(true);
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if (!((UnityEngine.Object) menu != (UnityEngine.Object) null))
          break;
        menu.RunningText.CheckAddStr();
        break;
      case ERoleFlagKind.ERFK_AccountBind:
        DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt();
        GUIManager.Instance.SetRoleAttrDiamond(DataManager.Instance.RoleAttr.Diamond + (uint) MP.ReadUShort(), (ushort) 0);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Other_Account, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Other, 1);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 20);
        GameManager.OnRefresh();
        break;
      case ERoleFlagKind.ERFK_FBFansPrize:
        GUIManager.Instance.HideUILock(EUILock.TreasureBox);
        DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt();
        GUIManager.Instance.SetRoleAttrDiamond(DataManager.Instance.RoleAttr.Diamond + (uint) MP.ReadUShort(), (ushort) 0);
        long result1 = 0;
        byte result2 = 0;
        CString cstring = StringManager.Instance.StaticString1024();
        cstring.ClearString();
        cstring.IntToFormat(NetworkManager.UserID);
        cstring.AppendFormat("{0}_FB_UseID");
        long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result1);
        cstring.ClearString();
        cstring.IntToFormat(result1);
        cstring.AppendFormat("{0}_FB_Count");
        byte.TryParse(PlayerPrefs.GetString(cstring.ToString()), out result2);
        byte num = 5;
        PlayerPrefs.SetString(cstring.ToString(), num.ToString());
        if (DataManager.Instance.UserLanguage == GameLanguage.GL_Chs)
          IGGSDKPlugin.LoadWebView("http://weibo.com/lordsmobilecn");
        else
          IGGSDKPlugin.LoadWebView(GameConstants.GlobalEditionFUrl);
        this.bGetFBPrize = true;
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
        GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
        GameManager.OnRefresh();
        break;
      case ERoleFlagKind.ERFK_GoogleStarPrize:
        GUIManager.Instance.HideUILock(EUILock.TreasureBox);
        break;
      case ERoleFlagKind.ERFK_GiftItem:
        this.RoleAttr.PrizeFlag = MP.ReadUInt();
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9089U), (ushort) 28);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_Detail, 6);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 0);
        break;
      case ERoleFlagKind.ERFK_NewbieShieldEnable:
        this.RoleAttr.PrizeFlag = MP.ReadUInt();
        break;
      default:
        if (eroleFlagKind != ERoleFlagKind.ERFK_ArenaPlaceDown)
          break;
        this.RoleAttr.PrizeFlag = MP.ReadUInt();
        if (!this.CheckPrizeFlag((byte) 20))
          break;
        ArenaManager.Instance.m_ArenaPlacedropTime = 4f;
        ArenaManager.Instance.bShowArenaPlacedrop = true;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Arena, 11);
        GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
        break;
    }
  }

  public void RecvAllianceInfo(MessagePacket MP)
  {
    this.RoleAlliance.Channel = MP.ReadUInt();
    if ((int) this.RoleAlliance.Id != (int) this.RoleAlliance.Channel)
    {
      this.RoleAlliance.Tag.ClearString();
      this.ClearTalkAlliance();
    }
    if ((this.RoleAlliance.Id = this.RoleAlliance.Channel) > 0U && this.RoleAlliance.ApplyList != null)
    {
      AllianceHint.Search = (AllianceSearch[]) null;
      this.RoleAlliance.ApplyList = (uint[]) null;
      Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
      if ((bool) (UnityEngine.Object) menu)
      {
        if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceHint))
          menu.CloseMenu();
        for (int index = menu.m_WindowStack.Count - 1; index >= 0; --index)
        {
          if (menu.m_WindowStack[index].m_eWindow == EGUIWindow.UI_AllianceHint)
            menu.m_WindowStack.RemoveAt(index);
        }
        if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UIAlliance_publicinfo))
        {
          menu.CloseMenu();
          if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_SearchList))
          {
            menu.CloseMenu();
            if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Other))
              menu.CloseMenu();
          }
          if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_LetterDetail))
          {
            menu.CloseMenu();
            if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Letter))
              menu.CloseMenu();
          }
        }
      }
    }
    this.RoleAlliance.Rank = (AllianceRank) MP.ReadByte();
    this.RoleAlliance.Apply = MP.ReadByte();
    this.RoleAlliance.Money = MP.ReadUInt();
    this.DailyHelpGetAllianceMoney = MP.ReadUInt();
    for (int index = 0; index < 2; ++index)
    {
      this.mPlayHelpDataType[index].Kind = MP.ReadByte();
      this.mPlayHelpDataType[index].AlreadyHelperNum = MP.ReadByte();
      this.mPlayHelpDataType[index].HelpMax = MP.ReadByte();
    }
    this.RoleAlliance.GiftNum = MP.ReadUShort();
    if (this.RoleAlliance.GiftNum > (ushort) 300)
      this.RoleAlliance.GiftNum = (ushort) 300;
    this.RoleAlliance.ChatId = MP.ReadLong();
    ActivityManager.Instance.CheckAMShowHint();
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 3);
    this.RoleAlliance.PackItemID = (ushort) 0;
    this.RoleAlliance.KingdomID = (ushort) 0;
    this.RoleAlliance.Applicant = (byte) 0;
    this.RoleAlliance.PackPoint = 0U;
    this.RoleAlliance.ChatMax = 0L;
    this.RoleAlliance.GiftExp = 0U;
    this.RoleAlliance.GiftLv = (byte) 1;
  }

  public unsafe void RecvAllianceMain(MessagePacket MP)
  {
    this.RoleAlliance.Channel = MP.ReadUInt();
    this.RoleAlliance.Language = MP.ReadByte();
    MP.ReadStringPlus(13, this.RoleAlliance.Leader);
    this.RoleAlliance.Power = MP.ReadULong();
    MP.ReadStringPlus(3, this.RoleAlliance.Tag);
    MP.ReadStringPlus(20, this.RoleAlliance.Name);
    this.RoleAlliance.Header = MP.ReadString(20);
    this.RoleAlliance.Bullet = MP.ReadString(900);
    string str = this.RoleAlliance.Bullet;
    char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
    for (int index = 0; index < this.RoleAlliance.Bullet.Length; ++index)
    {
      if (!this.isNotEmojiCharacter(this.RoleAlliance.Bullet[index]))
        chPtr[index] = ' ';
    }
    str = (string) null;
    this.RoleAlliance.Emblem = MP.ReadUShort();
    this.RoleAlliance.Member = MP.ReadByte();
    this.RoleAlliance.Approval = MP.ReadByte();
    this.RoleAlliance.Applicant = MP.ReadByte();
    this.RoleAlliance.PackItemID = MP.ReadUShort();
    this.RoleAlliance.PackPoint = MP.ReadUInt();
    this.RoleAlliance.GiftExp = MP.ReadUInt();
    this.RoleAlliance.ChatMax = MP.ReadLong();
    this.RoleAlliance.KingdomID = MP.ReadUShort();
    for (ushort index = 0; (int) index < (int) DataManager.mapDataController.showYolkNum; ++index)
    {
      uint yolkMapId = DataManager.mapDataController.GetYolkMapID((ushort) DataManager.mapDataController.showYolkMapYolkID[(int) index], DataManager.mapDataController.OtherKingdomData.kingdomID);
      DataManager.msgBuffer[0] = (byte) 54;
      GameConstants.GetBytes(yolkMapId, DataManager.msgBuffer, 1);
      GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
    }
    ActivityManager.Instance.RecvKVKEventPoint((byte) 3, MP);
    MobilizationManager.Instance.AMScore = MP.ReadUInt();
    MobilizationManager.Instance.AMCompleteDegree = (byte) 0;
    MobilizationDegreeData recordByIndex1;
    for (int Index = 0; Index < this.AllianceMobilizationDegreeInfo.TableCount; ++Index)
    {
      recordByIndex1 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(Index);
      if (Index == this.AllianceMobilizationDegreeInfo.TableCount - 1)
      {
        if (MobilizationManager.Instance.AMScore >= recordByIndex1.MissionDegreeScore)
        {
          MobilizationManager.Instance.AMCompleteDegree = (byte) this.AllianceMobilizationDegreeInfo.TableCount;
          MobilizationManager.Instance.CompleteScore = recordByIndex1.MissionDegreeScore;
          break;
        }
      }
      else
      {
        MobilizationDegreeData recordByIndex2 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(Index + 1);
        if (MobilizationManager.Instance.AMScore >= recordByIndex1.MissionDegreeScore && MobilizationManager.Instance.AMScore < recordByIndex2.MissionDegreeScore)
        {
          MobilizationManager.Instance.AMCompleteDegree = (byte) (Index + 1);
          MobilizationManager.Instance.CompleteScore = recordByIndex2.MissionDegreeScore;
          break;
        }
      }
    }
    if (MobilizationManager.Instance.AMCompleteDegree == (byte) 0)
    {
      recordByIndex1 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(0);
      MobilizationManager.Instance.CompleteScore = recordByIndex1.MissionDegreeScore;
    }
    this.RoleAlliance.BulletinFlag = MP.ReadByte();
    this.RoleAlliance.AMRank = MP.ReadByte();
    ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt());
    ActivityManager.Instance.AllianceSummon_SummonData.SummonPoint = MP.ReadByte();
    int num1 = (int) MP.ReadUShort();
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.KingdomID = MP.ReadUShort();
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.zoneID = MP.ReadUShort();
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.pointID = MP.ReadByte();
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterEndTime = MP.ReadLong();
    for (int index = 0; index < 5; ++index)
      ActivityManager.Instance.NPCCityCombatTimes[index] = MP.ReadByte();
    ActivityManager.Instance.AW_Rank = MP.ReadByte();
    ActivityManager.Instance.AW_MemberCount = MP.ReadByte();
    ActivityManager.Instance.SetNowState();
    if ((int) MobilizationManager.Instance.AMCompleteDegree > (int) this.RoleAlliance.AMMaxDegree)
      MobilizationManager.Instance.AMCompleteDegree = this.RoleAlliance.AMMaxDegree;
    this.RoleAlliance.BookmarkTime = MP.ReadLong();
    uint num2 = 0;
    byte num3 = 0;
    for (int index = 0; index < this.AllianceLvUpData.TableCount; ++index)
    {
      ++num3;
      num2 += this.AllianceLvUpData.GetRecordByKey((ushort) (index + 1)).LvExp;
      if (num2 > this.RoleAlliance.GiftExp)
      {
        this.RoleAlliance.GiftLv = (byte) index;
        break;
      }
    }
    if (num2 > 0U && (int) num3 == this.AllianceLvUpData.TableCount && num2 <= this.RoleAlliance.GiftExp)
      this.RoleAlliance.GiftLv = num3;
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if ((int) this.RoleAlliance.Id != (int) this.RoleAlliance.Channel)
    {
      this.RoleAlliance.Id = this.RoleAlliance.Channel;
      this.RoleAlliance.Rank = AllianceRank.RANK1;
      this.RoleAlliance.JoinTime = this.ServerTime;
      this.RoleAlliance.ApplyList = (uint[]) null;
      AllianceHint.Search = (AllianceSearch[]) null;
      this.RoleAlliance.ChatId = 0L;
      this.SendAllianceID = 0U;
      GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
      if ((bool) (UnityEngine.Object) menu)
      {
        if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceHint))
          menu.CloseMenu();
        for (int index = menu.m_WindowStack.Count - 1; index >= 0; --index)
        {
          if (menu.m_WindowStack[index].m_eWindow == EGUIWindow.UI_AllianceHint)
            menu.m_WindowStack.RemoveAt(index);
        }
        if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UIAlliance_publicinfo))
        {
          menu.CloseMenu();
          if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_SearchList))
          {
            menu.CloseMenu();
            if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Other))
              menu.CloseMenu();
          }
          if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_LetterDetail))
          {
            menu.CloseMenu();
            if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Letter))
              menu.CloseMenu();
          }
        }
        if (menu.m_eMapMode == EUIOriginMapMode.KingdomMap)
          DataManager.Instance.RoleBookMark.CheckUpdate_Alliance(false);
      }
      GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_Alliance_Info, openMode: (byte) 2);
      GUIManager.Instance.UpdateChatBox(7);
      GUIManager.Instance.UpdateChatBox(9);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 5);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 2, 208);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 1, 208);
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.StringToFormat(this.RoleAlliance.Name);
      cstring.AppendFormat(this.mStringTable.GetStringByID(598U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
      DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 7, (ushort) this.RoleAlliance.Id);
      DataManager.msgBuffer[0] = (byte) 53;
      GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
      AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.JOIN_GUILD);
      ActivityManager.Instance.UpDateAllianceWarTop();
    }
    else
      GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
    if ((UnityEngine.Object) menu != (UnityEngine.Object) null && menu.m_eMapMode == EUIOriginMapMode.KingdomMap)
      DataManager.Instance.RoleBookMark.CheckUpdate_Alliance(false);
    GameManager.OnRefresh(NetworkNews.Refresh_RecvAllianceInfo);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
    DataManager.Instance.bNeedSortQueueBarData = true;
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 5);
  }

  public void RecvAllianceCreate(MessagePacket MP)
  {
    Protocol protocol = MP.Protocol;
    switch (protocol)
    {
      case Protocol._MSG_RESP_ALLIANCE_NAMECHECK:
      case Protocol._MSG_RESP_ALLIANCE_TAGCHECK:
        if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput))
        {
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceInput, (int) MP.ReadByte(), (int) MP.ReadByte());
          break;
        }
        if (AllianceHint.Sequencing(MP.Protocol) != (int) MP.ReadByte())
          break;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceHint, (int) AllianceHint.Sequencing(MP.ReadByte()), 2);
        break;
      case Protocol._MSG_RESP_ALLIANCE_CREATE:
        byte num1 = MP.ReadByte();
        if (num1 == (byte) 0)
        {
          MP.ReadStringPlus(20, this.RoleAlliance.Name);
          MP.ReadStringPlus(3, this.RoleAlliance.Tag);
          this.RoleAlliance.Bullet = this.RoleAlliance.Header = string.Empty;
          this.RoleAlliance.Emblem = MP.ReadUShort();
          this.RoleAlliance.Language = MP.ReadByte();
          this.RoleAlliance.Id = MP.ReadUInt();
          this.RoleAlliance.PackItemID = MP.ReadUShort();
          this.RoleAlliance.Power = this.RoleAttr.Power;
          this.RoleAlliance.Leader.ClearString();
          this.RoleAlliance.Leader.Append(this.RoleAttr.Name);
          this.RoleAlliance.Member = (byte) 1;
          this.RoleAlliance.Rank = AllianceRank.RANK5;
          this.RoleAlliance.ChatId = this.RoleAlliance.ChatMax = 0L;
          this.RoleAlliance.Approval = this.RoleAlliance.Applicant = (byte) 0;
          this.RoleAlliance.GiftLv = (byte) 1;
          this.RoleAlliance.JoinTime = this.ServerTime;
          this.RoleAlliance.KingdomID = DataManager.MapDataController.OtherKingdomData.kingdomID;
          this.bSetAllianceScroll = true;
          GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
          CString cstring = StringManager.Instance.StaticString1024();
          cstring.StringToFormat(this.RoleAlliance.Name);
          cstring.AppendFormat(this.mStringTable.GetStringByID(597U));
          GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
          (GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door).AllianceOnClick();
          GUIManager.Instance.UpdateChatBox(9);
          GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9);
          GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
          GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19);
          GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
          DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 7, (ushort) this.RoleAlliance.Id);
          ActivityManager.Instance.CheckAMShowHint();
          break;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceHint, (int) num1, 1);
        break;
      default:
        switch (protocol)
        {
          case Protocol._MSG_RESP_ALLIANCE_MODIFY_NAME:
            byte num2 = MP.ReadByte();
            switch (num2)
            {
              case 0:
                ushort num3 = MP.ReadUShort();
                this.SetCurItemQuantity(num3, MP.ReadUShort(), (byte) 0, 0L);
                GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), num3);
                this.RoleAlliance.Money = MP.ReadUInt();
                if (num2 == (byte) 0)
                {
                  MP.ReadStringPlus(20, this.RoleAlliance.Name);
                  GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(609U), (ushort) byte.MaxValue);
                  GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
                }
                GameManager.OnRefresh(NetworkNews.Refresh_Item);
                GameManager.OnRefresh(NetworkNews.Refresh_Attr);
                break;
              case 2:
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(426U), (ushort) byte.MaxValue);
                break;
              case 5:
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(702U), (ushort) byte.MaxValue);
                break;
            }
            GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
            DataManager.msgBuffer[0] = num2;
            GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
            return;
          case Protocol._MSG_RESP_ALLIANCE_MODIFY_TAG:
            byte num4 = MP.ReadByte();
            switch (num4)
            {
              case 0:
              case 3:
              case 4:
                ushort num5 = MP.ReadUShort();
                this.SetCurItemQuantity(num5, MP.ReadUShort(), (byte) 0, 0L);
                GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), num5);
                this.RoleAlliance.Money = MP.ReadUInt();
                if (num4 == (byte) 0)
                {
                  MP.ReadStringPlus(3, this.RoleAlliance.Tag);
                  GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(610U), (ushort) byte.MaxValue);
                  GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
                }
                GameManager.OnRefresh(NetworkNews.Refresh_Item);
                GameManager.OnRefresh(NetworkNews.Refresh_Attr);
                break;
              case 2:
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(426U), (ushort) byte.MaxValue);
                break;
              case 5:
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(702U), (ushort) byte.MaxValue);
                break;
              default:
                GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
                break;
            }
            GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
            DataManager.msgBuffer[0] = num4;
            GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
            return;
          default:
            AllianceHint.RecvAllianceCreate(MP);
            return;
        }
    }
  }

  public void RecvAllianceInvite(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    if (num != (byte) 0)
      return;
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7083U), (ushort) byte.MaxValue);
  }

  public void OpenAllianceBox(ushort Type, int CharLimit = 0, bool CheckOnly = false, long Para = 0)
  {
    if (!((UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput) == (UnityEngine.Object) null))
      return;
    AllianceHint.OpenAllianceBox(Type, CharLimit, CheckOnly, Para);
  }

  public void SetUserLanguage()
  {
    if (!byte.TryParse(PlayerPrefs.GetString("Other_Language"), out DataManager.Instance.MySysSetting.mUserLanguage) || DataManager.Instance.MySysSetting.mUserLanguage < (byte) 1 || DataManager.Instance.MySysSetting.mUserLanguage > (byte) 18)
    {
      SystemLanguage systemLanguage = Application.systemLanguage;
      switch (systemLanguage)
      {
        case SystemLanguage.French:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Fre;
          break;
        case SystemLanguage.German:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Gem;
          break;
        case SystemLanguage.Indonesian:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Idn;
          break;
        case SystemLanguage.Italian:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Ita;
          break;
        case SystemLanguage.Japanese:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Jpn;
          break;
        case SystemLanguage.Korean:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Kor;
          break;
        case SystemLanguage.Portuguese:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Pot;
          break;
        case SystemLanguage.Russian:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Rus;
          break;
        case SystemLanguage.Spanish:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Spa;
          break;
        case SystemLanguage.Thai:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Tha;
          break;
        case SystemLanguage.Turkish:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Tur;
          break;
        case SystemLanguage.Ukrainian:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Ukr;
          break;
        case SystemLanguage.Vietnamese:
          DataManager.Instance.UserLanguage = GameLanguage.GL_Vet;
          break;
        case SystemLanguage.Unknown:
          DataManager.Instance.UserLanguage = !(IGGSDKPlugin.GetCountry() == "MY") ? GameLanguage.GL_Eng : GameLanguage.GL_Mys;
          break;
        default:
          if (systemLanguage != SystemLanguage.Arabic)
          {
            if (systemLanguage == SystemLanguage.Chinese)
            {
              DataManager.Instance.UserLanguage = GameLanguage.GL_Cht;
              if (IGGSDKPlugin.GetCountry() == "CN")
              {
                DataManager.Instance.UserLanguage = GameLanguage.GL_Chs;
                break;
              }
              break;
            }
            DataManager.Instance.UserLanguage = GameLanguage.GL_Eng;
            break;
          }
          DataManager.Instance.UserLanguage = GameLanguage.GL_Arb;
          break;
      }
      DataManager.Instance.MySysSetting.mUserLanguage = (byte) DataManager.Instance.UserLanguage;
      PlayerPrefs.SetString("Other_Language", DataManager.Instance.MySysSetting.mUserLanguage.ToString());
    }
    else
      DataManager.Instance.UserLanguage = (GameLanguage) DataManager.Instance.MySysSetting.mUserLanguage;
  }

  public byte GetUserLanguageID()
  {
    switch (Application.systemLanguage)
    {
      case SystemLanguage.Afrikaans:
        return 3;
      case SystemLanguage.Arabic:
        return 2;
      case SystemLanguage.Bulgarian:
        return 5;
      case SystemLanguage.Catalan:
        return 6;
      case SystemLanguage.Chinese:
        return 7;
      case SystemLanguage.Czech:
        return 9;
      case SystemLanguage.Danish:
        return 10;
      case SystemLanguage.Dutch:
        return 11;
      case SystemLanguage.English:
        return 12;
      case SystemLanguage.Estonian:
        return 13;
      case SystemLanguage.Finnish:
        return 14;
      case SystemLanguage.French:
        return 15;
      case SystemLanguage.German:
        return 16;
      case SystemLanguage.Greek:
        return 17;
      case SystemLanguage.Hebrew:
        return 18;
      case SystemLanguage.Hugarian:
        return 20;
      case SystemLanguage.Indonesian:
        return 21;
      case SystemLanguage.Italian:
        return 22;
      case SystemLanguage.Japanese:
        return 23;
      case SystemLanguage.Korean:
        return 24;
      case SystemLanguage.Latvian:
        return 25;
      case SystemLanguage.Lithuanian:
        return 26;
      case SystemLanguage.Norwegian:
        return 28;
      case SystemLanguage.Polish:
        return 30;
      case SystemLanguage.Portuguese:
        return 31;
      case SystemLanguage.Romanian:
        return 32;
      case SystemLanguage.Russian:
        return 33;
      case SystemLanguage.SerboCroatian:
        return 34;
      case SystemLanguage.Slovak:
        return 35;
      case SystemLanguage.Slovenian:
        return 36;
      case SystemLanguage.Spanish:
        return 37;
      case SystemLanguage.Swedish:
        return 38;
      case SystemLanguage.Thai:
        return 39;
      case SystemLanguage.Turkish:
        return 40;
      case SystemLanguage.Ukrainian:
        return 41;
      case SystemLanguage.Vietnamese:
        return 42;
      default:
        return IGGSDKPlugin.GetCountry() == "MY" ? (byte) 27 : (byte) 12;
    }
  }

  public void CombatReplay(ulong AutoID, int ServerID, int AssKey, bool bNPC = false)
  {
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Battle);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = !bNPC ? Protocol._MSG_REQUEST_COMBATREPLAY : Protocol._MSG_REQUEST_COMBATREPLAY_NPCCITY;
    messagePacket.AddSeqId();
    messagePacket.Add(AutoID);
    messagePacket.Add(ServerID);
    messagePacket.Add(AssKey);
    messagePacket.Send();
  }

  public bool MailTranslate(uint Id, MailType Kind)
  {
    if (this.MailTranslation.Serial != 0U)
      return false;
    this.MailTranslation.Serial = Id;
    this.MailTranslation.Kind = Kind;
    return true;
  }

  public void BattleReportRead(uint id, bool Lockchan = true)
  {
    ReportSubSet data = ReportSubSet.REPORTSet_COMBAT_SCOUT;
    List<uint> uintList = new List<uint>((int) this.Mailing.ReportSerial.Select);
    if (id > 0U)
    {
      if ((int) this.Mailing.ReportSerial.GatheringID == (int) id)
      {
        data = ReportSubSet.REPORTSet_GATHER;
        for (int index = 0; index < this.Mailing.ReportSerial.Gather.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.Gather[index]);
        }
      }
      else if ((int) this.Mailing.ReportSerial.ResourceID == (int) id)
      {
        data = ReportSubSet.REPORTSet_HELP;
        for (int index = 0; index < this.Mailing.ReportSerial.Resource.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.Resource[index]);
        }
      }
      else if ((int) this.Mailing.ReportSerial.AntiScoutID == (int) id)
      {
        data = ReportSubSet.REPORTSet_RECON;
        for (int index = 0; index < this.Mailing.ReportSerial.AntiScout.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.AntiScout[index]);
        }
      }
      else if (this.Mailing.ReportSerial.Mail.TryGetValue(id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
        uintList.Add(id);
      if (uintList.Count <= 0)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) data);
      messagePacket.Add((byte) uintList.Count);
      for (int index = 0; index < uintList.Count; ++index)
        messagePacket.Add(uintList[index]);
      messagePacket.Send();
    }
    else
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.GatheringID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        for (int index = 0; index < this.Mailing.ReportSerial.Gather.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.Gather[index]);
        }
      }
      if (uintList.Count > 0)
      {
        data = ReportSubSet.REPORTSet_GATHER;
        MessagePacket messagePacket = new MessagePacket((ushort) 1024);
        messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
        messagePacket.AddSeqId();
        messagePacket.Add((byte) data);
        messagePacket.Add((byte) uintList.Count);
        for (int index = 0; index < uintList.Count; ++index)
          messagePacket.Add(uintList[index]);
        messagePacket.Send();
        uintList.Clear();
      }
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.ResourceID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        for (int index = 0; index < this.Mailing.ReportSerial.Resource.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.Resource[index]);
        }
      }
      if (uintList.Count > 0)
      {
        data = ReportSubSet.REPORTSet_HELP;
        MessagePacket messagePacket = new MessagePacket((ushort) 1024);
        messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
        messagePacket.AddSeqId();
        messagePacket.Add((byte) data);
        messagePacket.Add((byte) uintList.Count);
        for (int index = 0; index < uintList.Count; ++index)
          messagePacket.Add(uintList[index]);
        messagePacket.Send();
        uintList.Clear();
      }
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScoutID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        for (int index = 0; index < this.Mailing.ReportSerial.AntiScout.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[index], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
            uintList.Add(this.Mailing.ReportSerial.AntiScout[index]);
        }
      }
      if (uintList.Count > 0)
      {
        data = ReportSubSet.REPORTSet_RECON;
        MessagePacket messagePacket = new MessagePacket((ushort) 1024);
        messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
        messagePacket.AddSeqId();
        messagePacket.Add((byte) data);
        messagePacket.Add((byte) uintList.Count);
        for (int index = 0; index < uintList.Count; ++index)
          messagePacket.Add(uintList[index]);
        messagePacket.Send();
        uintList.Clear();
      }
      for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && !this.DoFavor.Combat.BeRead && this.DoFavor.Combat.More == (byte) 0)
          uintList.Add(this.DoFavor.Combat.SerialID);
      }
      if (uintList.Count > 0)
      {
        MessagePacket messagePacket = new MessagePacket((ushort) 1024);
        messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
        messagePacket.AddSeqId();
        messagePacket.Add((byte) 0);
        messagePacket.Add((byte) uintList.Count);
        for (int index = 0; index < uintList.Count; ++index)
          messagePacket.Add(uintList[index]);
        messagePacket.Send();
      }
      if (!Lockchan || data <= ReportSubSet.REPORTSet_COMBAT_SCOUT && uintList.Count <= 0)
        return;
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
    }
  }

  public void MailReportRead(uint id, bool Lockchan = true)
  {
    if (this.Mailing.MailSerial.Mail.TryGetValue(id, out this.DoFavor.Mail))
    {
      if (this.DoFavor.Mail.BeRead)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      messagePacket.Add(id);
      messagePacket.Send();
    }
    else
    {
      List<uint> uintList1 = new List<uint>((int) this.Mailing.MailSerial.Select);
      for (int index1 = 0; (long) index1 < (long) this.Mailing.MailSerial.Count; ++index1)
      {
        if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[index1].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
        {
          if (this.DoFavor.Mail.More > (byte) 1)
          {
            SubContent subContent;
            List<uint> uintList2;
            if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList2))
            {
              for (int index2 = 0; index2 < uintList2.Count; ++index2)
              {
                if (this.Mailing.MailSerial.Mail.TryGetValue(uintList2[index2], out this.DoFavor.Mail) && !this.DoFavor.Mail.BeRead)
                  uintList1.Add(this.DoFavor.Mail.SerialID);
              }
            }
          }
          else if (!this.DoFavor.Mail.BeRead)
            uintList1.Add(this.DoFavor.Mail.SerialID);
        }
      }
      if (uintList1.Count <= 0)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) uintList1.Count);
      for (int index = 0; index < uintList1.Count; ++index)
        messagePacket.Add(uintList1[index]);
      messagePacket.Send();
    }
  }

  public void MailReportRead(uint id, uint ReplyID, string ReplySender, bool Lockchan = true)
  {
    if (this.Mailing.MailSerial.Mail.TryGetValue(id, out this.DoFavor.Mail))
      return;
    List<uint> uintList1 = new List<uint>((int) this.Mailing.MailSerial.Select);
    SubContent subContent;
    List<uint> uintList2;
    if (!this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) || !subContent.Mail.TryGetValue(ReplySender, out uintList2))
      return;
    for (int index = 0; index < uintList2.Count; ++index)
    {
      global::MailContent mailContent;
      if (this.Mailing.MailSerial.Mail.TryGetValue(uintList2[index], out mailContent) && mailContent.BeChecked && !mailContent.BeRead)
        uintList1.Add(mailContent.SerialID);
    }
    if (uintList1.Count <= 0)
      return;
    if (Lockchan)
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
    messagePacket.AddSeqId();
    messagePacket.Add((byte) uintList1.Count);
    for (int index = 0; index < uintList1.Count; ++index)
      messagePacket.Add(uintList1[index]);
    messagePacket.Send();
  }

  public void SystemReportRead(uint id, bool Lockchan = true)
  {
    if (id > 0U)
    {
      if (!this.Mailing.SystemSerial.Mail.TryGetValue(id, out this.DoFavor.System) || this.DoFavor.System.BeRead)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_NOTICEMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      messagePacket.Add(id);
      messagePacket.Send();
    }
    else
    {
      byte data = 0;
      for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.Count; ++index)
      {
        if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked && !this.DoFavor.System.BeRead)
          ++data;
      }
      if (data <= (byte) 0)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_NOTICEMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add(data);
      for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.Count; ++index)
      {
        if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked && !this.DoFavor.System.BeRead)
          messagePacket.Add(this.DoFavor.System.SerialID);
      }
      messagePacket.Send();
    }
  }

  public void FavorReportRead(uint id = 0, bool Lockchan = true)
  {
    MyFavorite myFavorite1 = new MyFavorite(Id: 0U);
    if (id > 0U)
    {
      this.DoFavor.Serial = id;
      this.DoFavor.Type = this.OpenMail.Type;
      if (!this.FavorReportGet(ref this.DoFavor))
        return;
      if (this.OpenMail.Type == MailType.EMAIL_LETTER && !this.DoFavor.Mail.BeRead)
        myFavorite1.Type = MailType.EMAIL_SYSTEM;
      else if (this.OpenMail.Type == MailType.EMAIL_SYSTEM && !this.DoFavor.System.BeRead)
        myFavorite1.Type = MailType.EMAIL_FAVORY;
      else if (!this.DoFavor.Combat.BeRead)
        myFavorite1.Type = MailType.EMAIL_BATTLE;
      if (myFavorite1.Type >= MailType.EMAIL_MAX)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      messagePacket.Add((byte) myFavorite1.Type);
      messagePacket.Add(id);
      messagePacket.Send();
    }
    else
    {
      if (this.Mailing.FavorSerial.Select <= 0U)
        return;
      List<uint> uintList = new List<uint>((int) this.Mailing.FavorSerial.Select);
      List<byte> byteList = new List<byte>((int) this.Mailing.FavorSerial.Select);
      for (int id1 = 0; id1 < this.Mailing.FavorSerial.Inbox.Length; ++id1)
      {
        MyFavorite myFavorite2;
        if ((myFavorite2 = this.FavorReportGet(id1)) != null)
        {
          if (myFavorite2.Type == MailType.EMAIL_BATTLE && myFavorite2.Combat.BeChecked && !myFavorite2.Combat.BeRead)
          {
            uintList.Add(myFavorite2.Combat.SerialID);
            byteList.Add((byte) 1);
          }
          else if (myFavorite2.Type == MailType.EMAIL_LETTER && myFavorite2.Mail.BeChecked && !myFavorite2.Mail.BeRead)
          {
            uintList.Add(myFavorite2.Mail.SerialID);
            byteList.Add((byte) 0);
          }
          else if (myFavorite2.Type == MailType.EMAIL_SYSTEM && myFavorite2.System.BeChecked && !myFavorite2.System.BeRead)
          {
            uintList.Add(myFavorite2.System.SerialID);
            byteList.Add((byte) 3);
          }
        }
      }
      if (byteList.Count <= 0)
        return;
      if (Lockchan)
        GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEMARKREAD;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) byteList.Count);
      for (int index = 0; index < byteList.Count; ++index)
      {
        messagePacket.Add(byteList[index]);
        messagePacket.Add(uintList[index]);
      }
      messagePacket.Send();
    }
  }

  public void FavorReportDelete(uint id)
  {
    if (this.Mailing.FavorSerial.Select <= 0U)
      return;
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
    messagePacket.AddSeqId();
    messagePacket.Add((byte) this.Mailing.FavorSerial.Select);
    for (int id1 = 0; id1 < this.Mailing.FavorSerial.Inbox.Length; ++id1)
    {
      MyFavorite myFavorite;
      if ((myFavorite = this.FavorReportGet(id1)) != null)
      {
        if (myFavorite.Type == MailType.EMAIL_SYSTEM && myFavorite.System.BeChecked)
        {
          messagePacket.Add((byte) 3);
          messagePacket.Add(myFavorite.System.SerialID);
        }
        else if (myFavorite.Type == MailType.EMAIL_LETTER && myFavorite.Mail.BeChecked)
        {
          messagePacket.Add((byte) 0);
          messagePacket.Add(myFavorite.Mail.SerialID);
        }
        else if (myFavorite.Type == MailType.EMAIL_BATTLE && myFavorite.Combat.BeChecked)
        {
          messagePacket.Add((byte) 1);
          messagePacket.Add(myFavorite.Combat.SerialID);
        }
      }
    }
    messagePacket.Send();
  }

  public bool BattleReportDelete(uint id)
  {
    this.DoFavor.Serial = id;
    this.DoFavor.Kind = this.OpenMail.Kind;
    this.DoFavor.Type = this.OpenMail.Type;
    if (this.MailReportGet(ref this.DoFavor))
    {
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.AddSeqId();
      if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
      {
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
        messagePacket.Add((byte) 1);
        messagePacket.Add((byte) this.DoFavor.Type);
        messagePacket.Add(id);
      }
      else
      {
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
        if ((int) this.Mailing.ReportSerial.GatheringID == (int) id)
        {
          messagePacket.Add((byte) 1);
          messagePacket.Add((byte) this.Mailing.ReportSerial.Gather.Count);
          for (int index = 0; index < this.Mailing.ReportSerial.Gather.Count; ++index)
            messagePacket.Add(this.Mailing.ReportSerial.Gather[index]);
        }
        else if ((int) this.Mailing.ReportSerial.ResourceID == (int) id)
        {
          messagePacket.Add((byte) 2);
          messagePacket.Add((byte) this.Mailing.ReportSerial.Resource.Count);
          for (int index = 0; index < this.Mailing.ReportSerial.Resource.Count; ++index)
            messagePacket.Add(this.Mailing.ReportSerial.Resource[index]);
        }
        else if ((int) this.Mailing.ReportSerial.AntiScoutID == (int) id)
        {
          messagePacket.Add((byte) 3);
          messagePacket.Add((byte) this.Mailing.ReportSerial.AntiScout.Count);
          for (int index = 0; index < this.Mailing.ReportSerial.AntiScout.Count; ++index)
            messagePacket.Add(this.Mailing.ReportSerial.AntiScout[index]);
        }
        else
        {
          messagePacket.Add((byte) 0);
          messagePacket.Add((byte) 1);
          messagePacket.Add(id);
        }
      }
      messagePacket.Send();
      return true;
    }
    if (id != 0U)
      return false;
    bool flag = false;
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
    MessagePacket messagePacket1 = new MessagePacket((ushort) 1024);
    messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
    for (int index1 = 0; index1 < this.Mailing.ReportSerial.Gather.Count; ++index1)
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[index1], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        flag = true;
        messagePacket1.AddSeqId();
        messagePacket1.Add((byte) 1);
        messagePacket1.Add(this.DoFavor.Combat.More);
        for (int index2 = 0; index2 < this.Mailing.ReportSerial.Gather.Count; ++index2)
          messagePacket1.Add(this.Mailing.ReportSerial.Gather[index2]);
        messagePacket1.Send();
        messagePacket1 = (MessagePacket) null;
        break;
      }
    }
    for (int index3 = 0; index3 < this.Mailing.ReportSerial.Resource.Count; ++index3)
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[index3], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        flag = true;
        if (messagePacket1 == null)
          messagePacket1 = new MessagePacket((ushort) 1024);
        messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
        messagePacket1.AddSeqId();
        messagePacket1.Add((byte) 2);
        messagePacket1.Add(this.DoFavor.Combat.More);
        for (int index4 = 0; index4 < this.Mailing.ReportSerial.Resource.Count; ++index4)
          messagePacket1.Add(this.Mailing.ReportSerial.Resource[index4]);
        messagePacket1.Send();
        messagePacket1 = (MessagePacket) null;
        break;
      }
    }
    for (int index5 = 0; index5 < this.Mailing.ReportSerial.AntiScout.Count; ++index5)
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[index5], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
      {
        flag = true;
        if (messagePacket1 == null)
          messagePacket1 = new MessagePacket((ushort) 1024);
        messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
        messagePacket1.AddSeqId();
        messagePacket1.Add((byte) 3);
        messagePacket1.Add(this.DoFavor.Combat.More);
        for (int index6 = 0; index6 < this.Mailing.ReportSerial.AntiScout.Count; ++index6)
          messagePacket1.Add(this.Mailing.ReportSerial.AntiScout[index6]);
        messagePacket1.Send();
        messagePacket1 = (MessagePacket) null;
        break;
      }
    }
    for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && this.DoFavor.Combat.More == (byte) 0)
        ++id;
    }
    if (id > 0U)
    {
      flag = true;
      if (messagePacket1 == null)
        messagePacket1 = new MessagePacket((ushort) 1024);
      messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
      messagePacket1.AddSeqId();
      messagePacket1.Add((byte) 0);
      messagePacket1.Add((byte) id);
      for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && this.DoFavor.Combat.More == (byte) 0)
          messagePacket1.Add(this.DoFavor.Combat.SerialID);
      }
      messagePacket1.Send();
      messagePacket1 = (MessagePacket) null;
    }
    messagePacket1?.Send();
    return flag;
  }

  public bool MailReportDelete(uint id)
  {
    this.DoFavor.Serial = id;
    this.DoFavor.Kind = this.OpenMail.Kind;
    this.DoFavor.Type = this.OpenMail.Type;
    if (this.MailReportGet(ref this.DoFavor))
    {
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
      {
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
        messagePacket.Add((byte) 0);
      }
      else
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
      messagePacket.Add(id);
      messagePacket.Send();
      return true;
    }
    if (id != 0U)
      return false;
    MessagePacket messagePacket1 = new MessagePacket((ushort) 1024);
    messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
    messagePacket1.AddSeqId();
    messagePacket1.Add((byte) this.Mailing.MailSerial.Select);
    for (int index1 = 0; (long) index1 < (long) this.Mailing.MailSerial.Count; ++index1)
    {
      if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[index1].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
      {
        if (this.DoFavor.Mail.More > (byte) 1)
        {
          SubContent subContent;
          List<uint> uintList;
          if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList))
          {
            for (int index2 = 0; index2 < uintList.Count; ++index2)
              messagePacket1.Add(uintList[index2]);
          }
        }
        else
          messagePacket1.Add(this.DoFavor.Mail.SerialID);
      }
    }
    messagePacket1.Send();
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
    return true;
  }

  public bool MailReportDelete(uint id, uint ReplyID, string ReplySender)
  {
    this.DoFavor.Serial = id;
    this.DoFavor.Kind = this.OpenMail.Kind;
    this.DoFavor.Type = this.OpenMail.Type;
    if (this.MailReportGet(ref this.DoFavor))
    {
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      messagePacket.Add(id);
      messagePacket.Send();
      return true;
    }
    SubContent subContent;
    List<uint> uintList;
    if (id != 0U || !this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) || !subContent.Mail.TryGetValue(ReplySender, out uintList))
      return false;
    for (int index = 0; index < uintList.Count; ++index)
    {
      if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[index], out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
        ++id;
    }
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
    MessagePacket messagePacket1 = new MessagePacket((ushort) 1024);
    messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
    messagePacket1.AddSeqId();
    messagePacket1.Add((byte) id);
    for (int index = 0; index < uintList.Count; ++index)
    {
      if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[index], out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
        messagePacket1.Add(this.DoFavor.Mail.SerialID);
    }
    messagePacket1.Send();
    return true;
  }

  public void SystemReportSave(int id)
  {
    if (id < 0 || (long) id >= (long) this.Mailing.SystemSerial.Count || !this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[id].Serial, out this.DoFavor.System))
      return;
    this.SystemReportSave(this.DoFavor.System.SerialID);
  }

  public bool SystemReportDelete(uint id)
  {
    this.DoFavor.Serial = id;
    this.DoFavor.Kind = this.OpenMail.Kind;
    this.DoFavor.Type = this.OpenMail.Type;
    if (this.MailReportGet(ref this.DoFavor))
    {
      GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 1);
      if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
      {
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
        if (this.DoFavor.Type == MailType.EMAIL_LETTER)
          this.DoFavor.Type = MailType.EMAIL_SYSTEM;
        else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
          this.DoFavor.Type = MailType.EMAIL_FAVORY;
        messagePacket.Add((byte) this.DoFavor.Type);
      }
      else
        messagePacket.Protocol = Protocol._MSG_REQUEST_DELETENOTICE;
      messagePacket.Add(id);
      messagePacket.Send();
      return true;
    }
    if (id != 0U)
      return false;
    MessagePacket messagePacket1 = new MessagePacket((ushort) 1024);
    messagePacket1.Protocol = Protocol._MSG_REQUEST_DELETENOTICE;
    messagePacket1.AddSeqId();
    messagePacket1.Add((byte) this.Mailing.SystemSerial.Select);
    for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.Count; ++index)
    {
      if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked)
        messagePacket1.Add(this.DoFavor.System.SerialID);
    }
    messagePacket1.Send();
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
    return true;
  }

  public void BattleReportSave(int id, byte num)
  {
    if (this.Mailing.FavorSerial.Total == 100U)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019U), (ushort) byte.MaxValue);
    }
    else
    {
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEREPORT;
      global::CombatReport combatReport = this.CombatReportGet(id);
      combatReport.BeSave = true;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) 0);
      messagePacket.Add(combatReport.SerialID);
      messagePacket.Send();
      if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(combatReport.SerialID))
      {
        this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Type = MailType.EMAIL_BATTLE;
        this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Serial = combatReport.SerialID;
        this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Timing = combatReport.Times;
        ++this.Mailing.FavorSerial.Total;
      }
      this.Mailing.FavorSerial.Combat.Mail[combatReport.SerialID] = combatReport;
      this.MailDataRefresh(MailType.EMAIL_FAVORY);
      this.Mailing.ReportSerial.Mail.Remove(combatReport.SerialID);
      for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
      {
        if ((int) this.Mailing.ReportSerial.Inbox[index].Serial == (int) combatReport.SerialID)
        {
          this.Mailing.ReportSerial.Inbox[index].Serial = 0U;
          break;
        }
      }
      --this.Mailing.ReportSerial.Count;
      ++this.Mailing.ReportSerial.Change;
      this.MailDataRefresh(MailType.EMAIL_BATTLE);
      GameManager.OnRefresh(NetworkNews.Refresh_Mailing);
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(682U), (ushort) byte.MaxValue);
    }
  }

  public void BattleReportSave(int id)
  {
    if (id < 0 || (long) id >= (long) this.Mailing.ReportSerial.Count || !this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[id].Serial, out this.DoFavor.Combat))
      return;
    this.BattleReportSave(this.DoFavor.Combat.SerialID);
  }

  public bool BattleReportSave(uint id)
  {
    if (this.Mailing.FavorSerial.Count == 100U)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019U), (ushort) byte.MaxValue);
      return false;
    }
    global::CombatReport combatReport = this.CombatReportGet(id);
    if (combatReport == null)
      return false;
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEREPORT;
    messagePacket.AddSeqId();
    messagePacket.Add((byte) 0);
    messagePacket.Add(combatReport.SerialID);
    messagePacket.Send();
    return true;
  }

  public bool SystemReportSave(uint id)
  {
    if (this.Mailing.FavorSerial.Count == 100U)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019U), (ushort) byte.MaxValue);
      return false;
    }
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SAVENOTICE;
    messagePacket.AddSeqId();
    messagePacket.Add(id);
    messagePacket.Send();
    return true;
  }

  public void MailReportSave(int id)
  {
    global::MailContent mailContent = this.MailReportGet(id);
    if (mailContent == null)
      return;
    this.MailReportSave(mailContent.SerialID);
  }

  public void MailReportSave(int id, uint ReplyID, string ReplySender)
  {
    global::MailContent mailContent = this.MailReportGet(id, ReplyID, ReplySender);
    if (mailContent == null)
      return;
    this.MailReportSave(mailContent.SerialID);
  }

  public bool MailReportSave(uint id)
  {
    if (this.Mailing.FavorSerial.Count == 100U)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019U), (ushort) byte.MaxValue);
      return false;
    }
    global::MailContent mailContent = this.MailReportGet(id);
    if (mailContent == null)
      return false;
    GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEMAIL;
    messagePacket.AddSeqId();
    messagePacket.Add(mailContent.SerialID);
    messagePacket.Send();
    return true;
  }

  public void CheckMailer()
  {
    if (NetworkManager.UserID != this.Mailing.UserId)
    {
      this.Mailing.MailSerial.Old = 0U;
      this.Mailing.ReportSerial.Old = 0U;
      this.SaveData<global::MailData>(ref this.Mailing, "Mail");
    }
    this.Mailing.UserId = NetworkManager.UserID;
    this.Mailing.Failed = false;
  }

  public global::MailContent MailReportGet(int id)
  {
    global::MailContent mailContent;
    return id >= 0 && (long) id < (long) this.Mailing.MailSerial.Count && this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[id].Serial, out mailContent) ? mailContent : (global::MailContent) null;
  }

  public global::MailContent MailReportGet(int id, uint ReplyID, string ReplySender)
  {
    SubContent subContent;
    List<uint> uintList;
    global::MailContent mailContent;
    return this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out uintList) && id >= 0 && id < uintList.Count && this.Mailing.MailSerial.Mail.TryGetValue(uintList[uintList.Count - id - 1], out mailContent) ? mailContent : (global::MailContent) null;
  }

  public global::MailContent MailReportGet(uint id)
  {
    global::MailContent mailContent;
    return this.Mailing.MailSerial.Mail.TryGetValue(id, out mailContent) ? mailContent : (global::MailContent) null;
  }

  public NoticeContent SystemReportGet(uint id)
  {
    NoticeContent noticeContent;
    return this.Mailing.SystemSerial.Mail.TryGetValue(id, out noticeContent) ? noticeContent : (NoticeContent) null;
  }

  public bool MailReportGet(ref MyFavorite MyFavor, bool Next)
  {
    switch (MyFavor.Kind)
    {
      case MailType.EMAIL_SYSTEM:
        for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.Count; ++index)
        {
          if ((int) this.Mailing.SystemSerial.Inbox[index].Serial == (int) MyFavor.Serial)
          {
            if (Next && (long) index < (long) (this.Mailing.SystemSerial.Count - 1U))
            {
              MyFavor.Serial = this.Mailing.SystemSerial.Inbox[index + 1].Serial;
              MyFavor.Type = this.Mailing.SystemSerial.Inbox[index + 1].Type;
              break;
            }
            if (Next || index <= 0)
              return false;
            MyFavor.Serial = this.Mailing.SystemSerial.Inbox[index - 1].Serial;
            MyFavor.Type = this.Mailing.SystemSerial.Inbox[index - 1].Type;
            break;
          }
        }
        return this.MailReportGet(ref MyFavor);
      case MailType.EMAIL_BATTLE:
        for (int index = 0; (long) index < (long) this.Mailing.ReportSerial.Count; ++index)
        {
          if ((int) this.Mailing.ReportSerial.Inbox[index].Serial == (int) MyFavor.Serial)
          {
            if (Next && (long) index < (long) (this.Mailing.ReportSerial.Count - 1U))
            {
              MyFavor.Serial = this.Mailing.ReportSerial.Inbox[index + 1].Serial;
              MyFavor.Type = this.Mailing.ReportSerial.Inbox[index + 1].Type;
              break;
            }
            if (Next || index <= 0)
              return false;
            MyFavor.Serial = this.Mailing.ReportSerial.Inbox[index - 1].Serial;
            MyFavor.Type = this.Mailing.ReportSerial.Inbox[index - 1].Type;
            break;
          }
        }
        return this.MailReportGet(ref MyFavor);
      case MailType.EMAIL_LETTER:
        for (int index = 0; (long) index < (long) this.Mailing.MailSerial.Count; ++index)
        {
          if ((int) this.Mailing.MailSerial.Inbox[index].Serial == (int) MyFavor.Serial)
          {
            if (Next && (long) index < (long) (this.Mailing.MailSerial.Count - 1U))
            {
              MyFavor.Serial = this.Mailing.MailSerial.Inbox[index + 1].Serial;
              MyFavor.Type = this.Mailing.MailSerial.Inbox[index + 1].Type;
              break;
            }
            if (Next || index <= 0)
              return false;
            MyFavor.Serial = this.Mailing.MailSerial.Inbox[index - 1].Serial;
            MyFavor.Type = this.Mailing.MailSerial.Inbox[index - 1].Type;
            break;
          }
        }
        return this.MailReportGet(ref MyFavor);
      case MailType.EMAIL_FAVORY:
        for (int index = 0; (long) index < (long) this.Mailing.FavorSerial.Count; ++index)
        {
          if ((int) this.Mailing.FavorSerial.Inbox[index].Serial == (int) MyFavor.Serial && this.Mailing.FavorSerial.Inbox[index].Type == MyFavor.Type)
          {
            if (Next && (long) index < (long) (this.Mailing.FavorSerial.Count - 1U))
            {
              MyFavor.Serial = this.Mailing.FavorSerial.Inbox[index + 1].Serial;
              MyFavor.Type = this.Mailing.FavorSerial.Inbox[index + 1].Type;
              break;
            }
            if (Next || index <= 0)
              return false;
            MyFavor.Serial = this.Mailing.FavorSerial.Inbox[index - 1].Serial;
            MyFavor.Type = this.Mailing.FavorSerial.Inbox[index - 1].Type;
            break;
          }
        }
        return this.FavorReportGet(ref MyFavor);
      default:
        return false;
    }
  }

  public bool MailReportGet(ref MyFavorite MyFavor, bool Next, uint ReplyID, string ReplySender)
  {
    SubContent subContent;
    List<uint> uintList;
    if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out uintList))
    {
      for (int index = uintList.Count - 1; index >= 0; --index)
      {
        if ((int) uintList[index] == (int) MyFavor.Serial)
        {
          if (!Next && index < uintList.Count - 1)
          {
            MyFavor.Serial = uintList[index + 1];
          }
          else
          {
            if (!Next || index <= 0)
              return false;
            MyFavor.Serial = uintList[index - 1];
          }
          return true;
        }
      }
    }
    return false;
  }

  public bool MailReportGet(ref MyFavorite MyFavor)
  {
    switch (MyFavor.Kind)
    {
      case MailType.EMAIL_SYSTEM:
        return this.Mailing.SystemSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.System);
      case MailType.EMAIL_BATTLE:
        return this.Mailing.ReportSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat);
      case MailType.EMAIL_LETTER:
        return this.Mailing.MailSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail);
      case MailType.EMAIL_FAVORY:
        return this.FavorReportGet(ref MyFavor);
      default:
        return false;
    }
  }

  public bool MailSerialGet(ref MyFavorite MyFavor)
  {
    MyFavor.Kind = MyFavor.Type;
    switch (MyFavor.Type)
    {
      case MailType.EMAIL_BATTLE:
        return this.Mailing.ReportSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat) || this.FavorReportGet(ref MyFavor);
      case MailType.EMAIL_LETTER:
        return this.Mailing.MailSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail) || this.FavorReportGet(ref MyFavor);
      default:
        return false;
    }
  }

  public MyFavorite MailSerialGet(uint SerialID, MailType Type)
  {
    this.DoFavor.Type = Type;
    this.DoFavor.Serial = SerialID;
    this.MailSerialGet(ref this.DoFavor);
    return this.DoFavor;
  }

  public MyFavorite FavorReportGet(int id)
  {
    if (id >= 0 && (long) id < (long) this.Mailing.FavorSerial.Count)
    {
      switch (this.Mailing.FavorSerial.Inbox[id].Type)
      {
        case MailType.EMAIL_SYSTEM:
          if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out this.DoFavor.System))
            return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0U)
            {
              Kind = MailType.EMAIL_FAVORY,
              System = this.DoFavor.System
            };
          break;
        case MailType.EMAIL_BATTLE:
          global::CombatReport combatReport;
          if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out combatReport))
            return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0U)
            {
              Kind = MailType.EMAIL_FAVORY,
              Combat = combatReport
            };
          break;
        case MailType.EMAIL_LETTER:
          global::MailContent mailContent;
          if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out mailContent))
            return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0U)
            {
              Kind = MailType.EMAIL_FAVORY,
              Mail = mailContent
            };
          break;
      }
    }
    return (MyFavorite) null;
  }

  public NoticeContent SystemReportGet(int id)
  {
    NoticeContent noticeContent;
    return id >= 0 && (long) id < (long) this.Mailing.SystemSerial.Count && this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[id].Serial, out noticeContent) ? noticeContent : (NoticeContent) null;
  }

  public global::CombatReport ReconReportGet(int id)
  {
    return id >= 0 && id < this.Mailing.ReportSerial.AntiScout.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[id], out this.DoFavor.Combat) ? this.DoFavor.Combat : (global::CombatReport) null;
  }

  public global::CombatReport GatherReportGet(int id)
  {
    return id >= 0 && id < this.Mailing.ReportSerial.Gather.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[id], out this.DoFavor.Combat) ? this.DoFavor.Combat : (global::CombatReport) null;
  }

  public global::CombatReport ResourceReportGet(int id)
  {
    return id >= 0 && id < this.Mailing.ReportSerial.Resource.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[id], out this.DoFavor.Combat) ? this.DoFavor.Combat : (global::CombatReport) null;
  }

  public bool FavorReportGet(ref MyFavorite MyFavor)
  {
    MyFavor.Kind = MailType.EMAIL_FAVORY;
    if (MyFavor.Serial >= 0U && this.Mailing.FavorSerial.Count > 0U)
    {
      switch (MyFavor.Type)
      {
        case MailType.EMAIL_SYSTEM:
          return this.Mailing.FavorSerial.System.Mail.TryGetValue(MyFavor.Serial, out MyFavor.System);
        case MailType.EMAIL_BATTLE:
          return this.Mailing.FavorSerial.Combat.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat);
        case MailType.EMAIL_LETTER:
          return this.Mailing.FavorSerial.Mail.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail);
      }
    }
    return false;
  }

  public global::CombatReport CombatReportGet(int id)
  {
    global::CombatReport combatReport;
    return id >= 0 && (long) id < (long) this.Mailing.ReportSerial.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[id].Serial, out combatReport) ? combatReport : (global::CombatReport) null;
  }

  public global::CombatReport CombatReportGet(uint id)
  {
    global::CombatReport combatReport;
    return this.Mailing.ReportSerial.Mail.TryGetValue(id, out combatReport) ? combatReport : (global::CombatReport) null;
  }

  public bool CombatReportGet(global::CombatReport CPR)
  {
    return this.Mailing.ReportSerial.Mail.TryGetValue(CPR.SerialID, out CPR);
  }

  public void InitialMailData()
  {
    this.DoFavor = new MyFavorite(Id: 0U);
    this.CombatReport = new global::CombatReport[100];
    this.Mailing.MailPacksize = 1U;
    this.Mailing.MailSerial = new MailSerial();
    this.Mailing.FavorSerial = new FavorSerial();
    this.Mailing.ReportSerial = new ReportSerial();
    this.Mailing.SystemSerial = new SystemSerial();
  }

  public bool CombatReportSelect(int id = -1, bool Refresh = true)
  {
    if (id == 0)
    {
      this.Mailing.ReportSerial.Select = 0U;
      this.Mailing.ReportSerial.Bulking = false;
      for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
      {
        global::CombatReport combatReport;
        if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out combatReport))
          combatReport.BeChecked = false;
      }
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_BATTLE);
    }
    else if (id > 0)
    {
      if (this.Mailing.ReportSerial.Mail.TryGetValue((uint) id, out this.DoFavor.Combat))
      {
        this.Mailing.ReportSerial.Bulking = false;
        if (this.DoFavor.Combat.BeChecked = !this.DoFavor.Combat.BeChecked)
          ++this.Mailing.ReportSerial.Select;
        else
          --this.Mailing.ReportSerial.Select;
        return this.DoFavor.Combat.BeChecked;
      }
    }
    else
    {
      this.Mailing.ReportSerial.Select = 0U;
      for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
      {
        global::CombatReport combatReport;
        if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out combatReport))
        {
          combatReport.BeChecked = true;
          ++this.Mailing.ReportSerial.Select;
          this.Mailing.ReportSerial.Bulking = true;
        }
      }
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_BATTLE);
    }
    return false;
  }

  public bool SystemReportSelect(int id = -1, bool Refresh = true)
  {
    if (id == 0)
    {
      this.Mailing.SystemSerial.Select = 0U;
      this.Mailing.SystemSerial.Bulking = false;
      for (int index = 0; index < this.Mailing.SystemSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System))
          this.DoFavor.System.BeChecked = false;
      }
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
    }
    else if (id > 0)
    {
      if (this.Mailing.SystemSerial.Mail.TryGetValue((uint) id, out this.DoFavor.System))
      {
        this.Mailing.SystemSerial.Bulking = false;
        if (this.DoFavor.System.BeChecked = !this.DoFavor.System.BeChecked)
          ++this.Mailing.SystemSerial.Select;
        else
          --this.Mailing.SystemSerial.Select;
        return this.DoFavor.System.BeChecked;
      }
    }
    else
    {
      this.Mailing.SystemSerial.Select = 0U;
      for (int index = 0; index < this.Mailing.SystemSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System))
        {
          ++this.Mailing.SystemSerial.Select;
          this.DoFavor.System.BeChecked = true;
          this.Mailing.SystemSerial.Bulking = true;
        }
      }
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
    }
    return false;
  }

  public bool MailReportSelect(int id = -1, bool Refresh = true)
  {
    if (id == 0)
    {
      this.Mailing.MailSerial.Select = 0U;
      this.Mailing.MailSerial.Bulking = false;
      for (int index = 0; (long) index < (long) this.Mailing.MailSerial.Count; ++index)
      {
        global::MailContent mailContent;
        if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[index].Serial, out mailContent))
        {
          if (mailContent.More > (byte) 1)
            this.MailReportSelect(id, mailContent.ReplyID, mailContent.SenderName, false);
          else
            mailContent.BeChecked = false;
        }
      }
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_LETTER);
    }
    else if (id > 0)
    {
      global::MailContent mailContent;
      if (this.Mailing.MailSerial.Mail.TryGetValue((uint) id, out mailContent))
      {
        this.Mailing.MailSerial.Bulking = false;
        mailContent.BeChecked = !mailContent.BeChecked;
        if (mailContent.More > (byte) 1)
          this.MailReportSelect(!mailContent.BeChecked ? 0 : -1, mailContent.ReplyID, mailContent.SenderName, false, false);
        else if (mailContent.BeChecked)
          ++this.Mailing.MailSerial.Select;
        else
          --this.Mailing.MailSerial.Select;
        return mailContent.BeChecked;
      }
    }
    else
    {
      this.Mailing.MailSerial.Select = 0U;
      for (int index = 0; (long) index < (long) this.Mailing.MailSerial.Count; ++index)
      {
        global::MailContent mailContent;
        if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[index].Serial, out mailContent))
        {
          if (mailContent.More > (byte) 1)
          {
            this.MailReportSelect(id, mailContent.ReplyID, mailContent.SenderName, false, false);
          }
          else
          {
            ++this.Mailing.MailSerial.Select;
            mailContent.BeChecked = true;
          }
        }
      }
      this.Mailing.MailSerial.Bulking = this.Mailing.MailSerial.Select > 0U;
      if (Refresh)
        this.MailingboxRefresh(MailType.EMAIL_LETTER);
    }
    return false;
  }

  public bool MailReportSelect(
    int id,
    uint ReplyID,
    string ReplySender,
    bool Refresh = true,
    bool bClear = true)
  {
    this.Mailing.MailSerial.Bulking = false;
    SubContent subContent;
    List<uint> uintList;
    if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out uintList))
    {
      if (id == 0)
      {
        for (int index = 0; index < uintList.Count; ++index)
        {
          global::MailContent mailContent;
          if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[index], out mailContent))
          {
            --this.Mailing.MailSerial.Select;
            mailContent.BeChecked = false;
          }
        }
        if (bClear)
          this.Mailing.MailSerial.Select = 0U;
        if (Refresh)
          this.MailingboxRefresh(MailType.EMAIL_LETTER);
      }
      else if (id > 0)
      {
        global::MailContent mailContent;
        if (this.Mailing.MailSerial.Mail.TryGetValue((uint) id, out mailContent))
        {
          mailContent.BeChecked = !mailContent.BeChecked;
          if (mailContent.BeChecked)
            ++this.Mailing.MailSerial.Select;
          else
            --this.Mailing.MailSerial.Select;
          return mailContent.BeChecked;
        }
      }
      else
      {
        if (bClear)
          this.Mailing.MailSerial.Select = 0U;
        for (int index = 0; index < uintList.Count; ++index)
        {
          global::MailContent mailContent;
          if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[index], out mailContent))
          {
            ++this.Mailing.MailSerial.Select;
            mailContent.BeChecked = true;
          }
        }
        if (Refresh)
          this.MailingboxRefresh(MailType.EMAIL_LETTER);
      }
    }
    return false;
  }

  public bool FavorReportSelect(int id, bool All = false, bool Refresh = true)
  {
    if (id >= 0 && (this.DoMeAFavor = this.FavorReportGet(id)) != null)
    {
      this.Mailing.FavorSerial.Bulking = false;
      switch (this.DoMeAFavor.Type)
      {
        case MailType.EMAIL_SYSTEM:
          if (this.DoMeAFavor.System.BeChecked = !this.DoMeAFavor.System.BeChecked)
            ++this.Mailing.FavorSerial.Select;
          else
            --this.Mailing.FavorSerial.Select;
          return this.DoMeAFavor.System.BeChecked;
        case MailType.EMAIL_BATTLE:
          if (this.DoMeAFavor.Combat.BeChecked = !this.DoMeAFavor.Combat.BeChecked)
            ++this.Mailing.FavorSerial.Select;
          else
            --this.Mailing.FavorSerial.Select;
          return this.DoMeAFavor.Combat.BeChecked;
        case MailType.EMAIL_LETTER:
          if (this.DoMeAFavor.Mail.BeChecked = !this.DoMeAFavor.Mail.BeChecked)
            ++this.Mailing.FavorSerial.Select;
          else
            --this.Mailing.FavorSerial.Select;
          return this.DoMeAFavor.Mail.BeChecked;
      }
    }
    else if (id < 0)
    {
      if (All)
      {
        this.Mailing.FavorSerial.Select = 0U;
        for (int id1 = 0; id1 < this.Mailing.FavorSerial.Inbox.Length; ++id1)
        {
          MyFavorite myFavorite;
          if ((myFavorite = this.FavorReportGet(id1)) != null)
          {
            if (myFavorite.Combat != null)
              myFavorite.Combat.BeChecked = true;
            else if (myFavorite.Mail != null)
              myFavorite.Mail.BeChecked = true;
            else if (myFavorite.System != null)
              myFavorite.System.BeChecked = true;
            this.Mailing.FavorSerial.Bulking = true;
            ++this.Mailing.FavorSerial.Select;
          }
        }
      }
      else
      {
        this.Mailing.FavorSerial.Select = 0U;
        this.Mailing.FavorSerial.Bulking = false;
        for (int id2 = 0; id2 < this.Mailing.FavorSerial.Inbox.Length; ++id2)
        {
          MyFavorite myFavorite;
          if ((myFavorite = this.FavorReportGet(id2)) != null)
          {
            if (myFavorite.Combat != null)
              myFavorite.Combat.BeChecked = false;
            else if (myFavorite.Mail != null)
              myFavorite.Mail.BeChecked = false;
            else if (myFavorite.System != null)
              myFavorite.System.BeChecked = false;
          }
        }
      }
    }
    if (Refresh)
      this.MailingboxRefresh(MailType.EMAIL_FAVORY);
    return false;
  }

  public void SaveMail(MailType MT, bool Force)
  {
    if (!Force || MT != MailType.EMAIL_BATTLE)
      return;
    this.SaveData<global::MailData>(ref this.Mailing, "Mail");
  }

  public void MailDataRefresh(MailType Type)
  {
    if (this.DoFavor == null)
      this.DoFavor = new MyFavorite(Id: 0U);
    switch (Type)
    {
      case MailType.EMAIL_SYSTEM:
        this.Mailing.SystemSerial.Sort();
        this.Mailing.SystemSerial.Unseen = 0U;
        if ((long) this.Mailing.SystemSerial.Count > (long) this.Mailing.SystemSerial.Inbox.Length)
          break;
        for (byte index = 0; (uint) index < this.Mailing.SystemSerial.Count; ++index)
        {
          if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[(int) index].Serial, out this.DoFavor.System))
          {
            this.DoFavor.System.Index = index;
            if (!this.DoFavor.System.BeRead)
              ++this.Mailing.SystemSerial.Unseen;
          }
        }
        break;
      case MailType.EMAIL_BATTLE:
        this.Mailing.ReportSerial.GatheringID = this.Mailing.ReportSerial.Gather.Count <= 0 ? 0U : this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1];
        this.Mailing.ReportSerial.ResourceID = this.Mailing.ReportSerial.Resource.Count <= 0 ? 0U : this.Mailing.ReportSerial.Resource[this.Mailing.ReportSerial.Resource.Count - 1];
        this.Mailing.ReportSerial.AntiScoutID = this.Mailing.ReportSerial.AntiScout.Count <= 0 ? 0U : this.Mailing.ReportSerial.AntiScout[this.Mailing.ReportSerial.AntiScout.Count - 1];
        global::CombatReport combatReport1 = (global::CombatReport) null;
        global::CombatReport combatReport2 = (global::CombatReport) null;
        global::CombatReport combatReport3 = (global::CombatReport) null;
        for (ushort index = 0; (int) index < this.Mailing.ReportSerial.Inbox.Length; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[(int) index].Serial, out this.DoFavor.Combat))
          {
            if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_COLLECT)
            {
              if (this.Mailing.ReportSerial.Gather.Count > 0 && (int) this.DoFavor.Combat.SerialID != (int) this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1])
              {
                this.Mailing.ReportSerial.Inbox[(int) index].Serial = 0U;
                if (this.Mailing.ReportSerial.Count > 0U)
                {
                  --this.Mailing.ReportSerial.Count;
                }
                else
                {
                  this.ResetMail();
                  return;
                }
              }
              else
              {
                combatReport2 = this.DoFavor.Combat;
                combatReport2.UnSeen = (byte) 0;
              }
            }
            else if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_RESOURCE)
            {
              if ((int) this.DoFavor.Combat.SerialID != (int) this.Mailing.ReportSerial.ResourceID)
              {
                this.Mailing.ReportSerial.Inbox[(int) index].Serial = 0U;
                if (this.Mailing.ReportSerial.Count > 0U)
                  --this.Mailing.ReportSerial.Count;
              }
              else
              {
                combatReport1 = this.DoFavor.Combat;
                combatReport1.UnSeen = (byte) 0;
              }
            }
            else if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_RECON)
            {
              if ((int) this.DoFavor.Combat.SerialID != (int) this.Mailing.ReportSerial.AntiScoutID)
              {
                this.Mailing.ReportSerial.Inbox[(int) index].Serial = 0U;
                if (this.Mailing.ReportSerial.Count > 0U)
                  --this.Mailing.ReportSerial.Count;
              }
              else
              {
                combatReport3 = this.DoFavor.Combat;
                combatReport3.UnSeen = (byte) 0;
              }
            }
          }
        }
        for (int count = this.Mailing.ReportSerial.Gather.Count; count > 0; --count)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[count - 1], out this.DoFavor.Combat))
          {
            this.DoFavor.Combat.MoreIndex = (byte) (this.Mailing.ReportSerial.Gather.Count - count);
            this.DoFavor.Combat.More = (byte) this.Mailing.ReportSerial.Gather.Count;
            if (!this.DoFavor.Combat.BeRead && combatReport2 != null)
              ++combatReport2.UnSeen;
          }
        }
        for (int count = this.Mailing.ReportSerial.Resource.Count; count > 0; --count)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[count - 1], out this.DoFavor.Combat))
          {
            this.DoFavor.Combat.MoreIndex = (byte) (this.Mailing.ReportSerial.Resource.Count - count);
            this.DoFavor.Combat.More = (byte) this.Mailing.ReportSerial.Resource.Count;
            if (!this.DoFavor.Combat.BeRead && combatReport1 != null)
              ++combatReport1.UnSeen;
          }
        }
        for (int count = this.Mailing.ReportSerial.AntiScout.Count; count > 0; --count)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[count - 1], out this.DoFavor.Combat))
          {
            this.DoFavor.Combat.MoreIndex = (byte) (this.Mailing.ReportSerial.AntiScout.Count - count);
            this.DoFavor.Combat.More = (byte) this.Mailing.ReportSerial.AntiScout.Count;
            if (!this.DoFavor.Combat.BeRead && combatReport3 != null)
              ++combatReport3.UnSeen;
          }
        }
        this.Mailing.ReportSerial.Sort();
        this.Mailing.ReportSerial.Unseen = 0U;
        if ((long) this.Mailing.ReportSerial.Count > (long) this.Mailing.ReportSerial.Inbox.Length)
          break;
        for (ushort index = 0; (uint) index < this.Mailing.ReportSerial.Count; ++index)
        {
          if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[(int) index].Serial, out this.DoFavor.Combat))
          {
            this.DoFavor.Combat.Index = (byte) index;
            if (this.DoFavor.Combat.More > (byte) 1)
              this.Mailing.ReportSerial.Unseen += (uint) this.DoFavor.Combat.UnSeen;
            else if (!this.DoFavor.Combat.BeRead)
              ++this.Mailing.ReportSerial.Unseen;
          }
        }
        break;
      case MailType.EMAIL_LETTER:
        for (ushort index = 0; (int) index < this.Mailing.MailSerial.Inbox.Length; ++index)
        {
          SubContent subContent;
          List<uint> uintList;
          if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[(int) index].Serial, out this.DoFavor.Mail) && (this.DoFavor.Mail.MailType == (byte) 4 || this.DoFavor.Mail.MailType == (byte) 0) && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList) && uintList.Count > 0)
          {
            if ((int) this.DoFavor.Mail.SerialID != (int) uintList[uintList.Count - 1])
            {
              this.Mailing.MailSerial.Inbox[(int) index].Serial = 0U;
              if (this.Mailing.MailSerial.Count > 0U)
              {
                --this.Mailing.MailSerial.Count;
              }
              else
              {
                this.ResetMail();
                return;
              }
            }
            else
            {
              this.DoFavor.Mail.UnSeen = (byte) 0;
              for (int count = uintList.Count; count > 0; --count)
              {
                global::MailContent mailContent;
                if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[count - 1], out mailContent))
                {
                  mailContent.MoreIndex = (byte) (uintList.Count - count);
                  mailContent.More = (byte) uintList.Count;
                  if (!mailContent.BeRead)
                    ++this.DoFavor.Mail.UnSeen;
                }
              }
            }
          }
        }
        this.Mailing.MailSerial.Sort();
        this.Mailing.MailSerial.Unseen = 0U;
        for (int index = 0; (long) index < (long) this.Mailing.MailSerial.Count && index < 100; ++index)
        {
          if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[index].Serial, out this.DoFavor.Mail))
          {
            this.DoFavor.Mail.Index = (byte) index;
            if (this.DoFavor.Mail.More > (byte) 1)
              this.Mailing.MailSerial.Unseen += (uint) this.DoFavor.Mail.UnSeen;
            else if (!this.DoFavor.Mail.BeRead)
              ++this.Mailing.MailSerial.Unseen;
          }
        }
        break;
      case MailType.EMAIL_FAVORY:
        this.Mailing.FavorSerial.Sort();
        this.Mailing.FavorSerial.Unseen = 0U;
        for (byte index = 0; (int) index < (int) (byte) this.Mailing.FavorSerial.Count && (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
        {
          switch (this.Mailing.FavorSerial.Inbox[(int) index].Type)
          {
            case MailType.EMAIL_SYSTEM:
              if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int) index].Serial, out this.DoFavor.System))
              {
                this.DoFavor.System.Index = index;
                if (!this.DoFavor.System.BeRead)
                {
                  ++this.Mailing.FavorSerial.Unseen;
                  break;
                }
                break;
              }
              break;
            case MailType.EMAIL_BATTLE:
              if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int) index].Serial, out this.DoFavor.Combat))
              {
                this.DoFavor.Combat.Index = index;
                if (!this.DoFavor.Combat.BeRead)
                {
                  ++this.Mailing.FavorSerial.Unseen;
                  break;
                }
                break;
              }
              break;
            case MailType.EMAIL_LETTER:
              if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int) index].Serial, out this.DoFavor.Mail))
              {
                this.DoFavor.Mail.Index = index;
                if (!this.DoFavor.Mail.BeRead)
                {
                  ++this.Mailing.FavorSerial.Unseen;
                  break;
                }
                break;
              }
              break;
          }
        }
        break;
    }
  }

  public bool CheckMail(MailType MT) => false;

  public bool CheckMail(Protocol Protocol = Protocol._MSG_REQUEST_MAILINFO) => false;

  public bool LoadMail(MailType MT)
  {
    try
    {
      Directory.CreateDirectory(string.Format("{0}/Data/{1}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID));
      try
      {
        using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MailType.EMAIL_LETTER), FileMode.OpenOrCreate, FileAccess.Read))
        {
          if (input.Length > 0L)
          {
            using (BinaryReader binaryReader = new BinaryReader((Stream) input))
            {
              this.DoFavor.Type = MailType.EMAIL_LETTER;
              if (binaryReader.ReadByte() != (byte) 7)
                throw new Exception();
              this.Mailing.MailSerial.Disavow = false;
              this.Mailing.MailSerial.TotalSave = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.UnreadSave = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.MaxSave = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.Fetch = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.New = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.Old = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.Count = binaryReader.ReadUInt32();
              this.Mailing.MailSerial.LastSave = this.Mailing.MailSerial.Fetch = this.Mailing.MailSerial.New = binaryReader.ReadUInt32();
              if (this.Mailing.MailSerial.Count > 0U && (long) this.Mailing.MailSerial.Count <= (long) this.Mailing.MailSerial.Inbox.Length)
              {
                for (ushort index = 0; (uint) index < this.Mailing.MailSerial.Count && (int) index < this.Mailing.MailSerial.Inbox.Length; ++index)
                {
                  this.Mailing.MailSerial.Count += (uint) binaryReader.ReadByte();
                  this.Mailing.MailSerial.Inbox[(int) index].Serial = binaryReader.ReadUInt32();
                  this.Mailing.MailSerial.Inbox[(int) index].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.MailSerial.Inbox[(int) index].Timing = binaryReader.ReadInt64();
                  this.Mailing.MailSerial.Inbox[(int) index].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.MailSerial.Inbox[(int) index].Type;
                  if (binaryReader.ReadBoolean() && this.LoadMail(MailType.EMAIL_LETTER, this.Mailing.MailSerial.Inbox[(int) index].Serial) && (int) this.DoFavor.Mail.SerialID == (int) this.Mailing.MailSerial.Inbox[(int) index].Serial)
                  {
                    if (this.DoFavor.Mail.ReplyID > 0U && (this.DoFavor.Mail.MailType == (byte) 0 || this.DoFavor.Mail.MailType == (byte) 4))
                    {
                      SubContent subContent;
                      if (!this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent))
                        this.Mailing.MailSerial.SubMail.Add(this.DoFavor.Mail.ReplyID, subContent = new SubContent());
                      List<uint> uintList;
                      if (!subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList))
                        subContent.Mail.Add(this.DoFavor.Mail.SenderName, uintList = new List<uint>());
                      uintList.Add(this.DoFavor.Mail.SerialID);
                      uintList.Sort();
                      this.DoFavor.Mail.More = (byte) uintList.Count;
                    }
                    this.Mailing.MailSerial.Matrix[this.DoFavor.Mail.SerialID] = new SerialBox(this.DoFavor.Mail.SerialID, this.DoFavor.Mail.Flag, this.DoFavor.Mail.BeRead, this.DoFavor.Mail.BeSave);
                    this.Mailing.MailSerial.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
                  }
                  else
                  {
                    this.Mailing.MailSerial.Inbox[(int) index--].Serial = 0U;
                    --this.Mailing.MailSerial.Count;
                  }
                }
                if ((long) this.Mailing.MailSerial.Count > (long) this.Mailing.MailSerial.Inbox.Length)
                  this.Mailing.MailSerial.Count = (uint) this.Mailing.MailSerial.Inbox.Length;
              }
              else
                this.Mailing.MailSerial.Count = 0U;
              uint num = binaryReader.ReadUInt32();
              if (num > 0U)
              {
                if ((long) num > (long) this.Mailing.FavorSerial.Inbox.Length - (long) this.Mailing.FavorSerial.Count)
                  throw new Exception();
                for (ushort message = 0; (uint) message < num; ++message)
                {
                  Debug.Log((object) message);
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = binaryReader.ReadUInt32();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = binaryReader.ReadInt64();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type;
                  if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial) && (int) this.DoFavor.Mail.SerialID == (int) this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial)
                  {
                    this.Mailing.MailSerial.Matrix[this.DoFavor.Mail.SerialID] = new SerialBox(this.DoFavor.Mail.SerialID, this.DoFavor.Mail.Flag, this.DoFavor.Mail.BeRead, this.DoFavor.Mail.BeSave);
                    this.Mailing.FavorSerial.Mail.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
                    ++this.Mailing.FavorSerial.Count;
                  }
                  else
                    this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = 0U;
                }
              }
              if ((int) this.Mailing.MailSerial.TotalSave + (int) this.Mailing.MailSerial.UnreadSave + (int) this.Mailing.MailSerial.MaxSave != (int) binaryReader.ReadUInt32())
                this.Mailing.MailSerial.Disavow = true;
            }
          }
        }
      }
      catch (Exception ex)
      {
        this.Mailing.MailSerial.Disavow = true;
      }
      if (this.Mailing.MailSerial.Disavow)
        this.ClearMail(MailType.EMAIL_LETTER);
      try
      {
        using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MailType.EMAIL_BATTLE), FileMode.OpenOrCreate, FileAccess.Read))
        {
          if (input.Length > 0L)
          {
            using (BinaryReader binaryReader = new BinaryReader((Stream) input))
            {
              this.Mailing.ReportSerial.Disavow = false;
              this.Mailing.ReportSerial.TotalSave = binaryReader.ReadByte() == (byte) 7 ? binaryReader.ReadUInt32() : throw new Exception();
              this.Mailing.ReportSerial.UnreadSave = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.MaxSave = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.Fetch = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.New = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.Old = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.Count = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.LastSave = this.Mailing.ReportSerial.Fetch = this.Mailing.ReportSerial.New = binaryReader.ReadUInt32();
              this.Mailing.ReportSerial.Count = binaryReader.ReadUInt32();
              if (this.Mailing.ReportSerial.Count > 0U && (long) this.Mailing.ReportSerial.Count <= (long) this.Mailing.ReportSerial.Inbox.Length)
              {
                for (ushort message = 0; (uint) message < this.Mailing.ReportSerial.Count; ++message)
                {
                  Debug.Log((object) message);
                  this.Mailing.ReportSerial.Inbox[(int) message].Serial = binaryReader.ReadUInt32();
                  this.Mailing.ReportSerial.Inbox[(int) message].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.ReportSerial.Inbox[(int) message].Timing = binaryReader.ReadInt64();
                  this.Mailing.ReportSerial.Inbox[(int) message].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.ReportSerial.Inbox[(int) message].Type;
                  if (this.LoadMail(MailType.EMAIL_BATTLE, this.Mailing.ReportSerial.Inbox[(int) message].Serial) && (int) this.DoFavor.Combat.SerialID == (int) this.Mailing.ReportSerial.Inbox[(int) message].Serial)
                  {
                    this.Mailing.ReportSerial.Matrix[this.DoFavor.Combat.SerialID] = new SerialBox(this.DoFavor.Combat.SerialID, this.DoFavor.Combat.Flag, this.DoFavor.Combat.BeRead, this.DoFavor.Combat.BeSave);
                    this.Mailing.ReportSerial.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
                  }
                  else
                  {
                    this.Mailing.ReportSerial.Inbox[(int) message--].Serial = 0U;
                    --this.Mailing.ReportSerial.Count;
                  }
                }
              }
              else
                this.Mailing.ReportSerial.Count = 0U;
              uint num = binaryReader.ReadUInt32();
              if (num > 0U)
              {
                if ((long) num > (long) this.Mailing.FavorSerial.Inbox.Length - (long) this.Mailing.FavorSerial.Count)
                  throw new Exception();
                for (ushort index = 0; (uint) index < num; ++index)
                {
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = binaryReader.ReadUInt32();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = binaryReader.ReadInt64();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type;
                  if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial) && (int) this.DoFavor.Combat.SerialID == (int) this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial)
                  {
                    this.Mailing.ReportSerial.Matrix[this.DoFavor.Combat.SerialID] = new SerialBox(this.DoFavor.Combat.SerialID, this.DoFavor.Combat.Flag, this.DoFavor.Combat.BeRead, this.DoFavor.Combat.BeSave);
                    this.Mailing.FavorSerial.Combat.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
                    ++this.Mailing.FavorSerial.Count;
                  }
                  else
                    this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = 0U;
                }
              }
              if ((int) this.Mailing.ReportSerial.TotalSave + (int) this.Mailing.ReportSerial.UnreadSave + (int) this.Mailing.ReportSerial.MaxSave != (int) binaryReader.ReadUInt32())
                this.Mailing.ReportSerial.Disavow = true;
            }
          }
        }
      }
      catch (Exception ex)
      {
        this.Mailing.ReportSerial.Disavow = true;
      }
      if (this.Mailing.ReportSerial.Disavow)
        this.ClearMail(MailType.EMAIL_BATTLE);
      try
      {
        using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MailType.EMAIL_SYSTEM), FileMode.OpenOrCreate, FileAccess.Read))
        {
          if (input.Length > 0L)
          {
            using (BinaryReader binaryReader = new BinaryReader((Stream) input))
            {
              this.Mailing.SystemSerial.Disavow = false;
              this.Mailing.SystemSerial.TotalSave = binaryReader.ReadByte() == (byte) 7 ? binaryReader.ReadUInt32() : throw new Exception();
              this.Mailing.SystemSerial.UnreadSave = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.MaxSave = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.Fetch = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.New = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.Old = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.Count = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.LastSave = this.Mailing.SystemSerial.Fetch = this.Mailing.SystemSerial.New = binaryReader.ReadUInt32();
              this.Mailing.SystemSerial.Count = binaryReader.ReadUInt32();
              if (this.Mailing.SystemSerial.Count > 0U && (long) this.Mailing.SystemSerial.Count <= (long) this.Mailing.SystemSerial.Inbox.Length)
              {
                for (ushort message = 0; (uint) message < this.Mailing.SystemSerial.Count; ++message)
                {
                  Debug.Log((object) message);
                  this.Mailing.SystemSerial.Inbox[(int) message].Serial = binaryReader.ReadUInt32();
                  this.Mailing.SystemSerial.Inbox[(int) message].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.SystemSerial.Inbox[(int) message].Timing = binaryReader.ReadInt64();
                  this.Mailing.SystemSerial.Inbox[(int) message].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.SystemSerial.Inbox[(int) message].Type;
                  if (this.LoadMail(MailType.EMAIL_SYSTEM, this.Mailing.SystemSerial.Inbox[(int) message].Serial) && (int) this.DoFavor.System.SerialID == (int) this.Mailing.SystemSerial.Inbox[(int) message].Serial)
                  {
                    this.Mailing.SystemSerial.Matrix[this.DoFavor.System.SerialID] = new SerialBox(this.DoFavor.System.SerialID, this.DoFavor.System.Flag, this.DoFavor.System.BeRead, this.DoFavor.System.BeSave);
                    this.Mailing.SystemSerial.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
                  }
                  else
                  {
                    this.Mailing.SystemSerial.Inbox[(int) message--].Serial = 0U;
                    --this.Mailing.SystemSerial.Count;
                  }
                }
              }
              uint num = binaryReader.ReadUInt32();
              if (num > 0U)
              {
                if ((long) num > (long) this.Mailing.FavorSerial.Inbox.Length - (long) this.Mailing.FavorSerial.Count)
                  throw new Exception();
                for (ushort index = 0; (uint) index < num; ++index)
                {
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = binaryReader.ReadUInt32();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = (MailType) binaryReader.ReadByte();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = binaryReader.ReadInt64();
                  this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = binaryReader.ReadBoolean();
                  this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type;
                  if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial) && (int) this.DoFavor.System.SerialID == (int) this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial)
                  {
                    this.Mailing.SystemSerial.Matrix[this.DoFavor.System.SerialID] = new SerialBox(this.DoFavor.System.SerialID, this.DoFavor.System.Flag, this.DoFavor.System.BeRead, this.DoFavor.System.BeSave);
                    this.Mailing.FavorSerial.System.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
                    ++this.Mailing.FavorSerial.Count;
                  }
                  else
                    this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = 0U;
                }
              }
              if ((int) this.Mailing.SystemSerial.TotalSave + (int) this.Mailing.SystemSerial.UnreadSave + (int) this.Mailing.SystemSerial.MaxSave != (int) binaryReader.ReadUInt32())
                this.Mailing.SystemSerial.Disavow = true;
            }
          }
        }
      }
      catch (Exception ex)
      {
        this.Mailing.SystemSerial.Disavow = true;
      }
      if (this.Mailing.SystemSerial.Disavow)
        this.ClearMail(MailType.EMAIL_SYSTEM);
    }
    catch (Exception ex)
    {
    }
    this.MailDataRefresh(MailType.EMAIL_SYSTEM);
    this.MailDataRefresh(MailType.EMAIL_LETTER);
    this.MailDataRefresh(MailType.EMAIL_BATTLE);
    this.MailDataRefresh(MailType.EMAIL_FAVORY);
    return true;
  }

  public bool SaveMail(MailType MT)
  {
    try
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendFormat("{0}/Data/{1}/{2}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT);
      using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
      {
        using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
        {
          binaryWriter.Write((byte) 7);
          switch (MT)
          {
            case MailType.EMAIL_SYSTEM:
              binaryWriter.Write(this.Mailing.SystemSerial.Total);
              binaryWriter.Write(this.Mailing.SystemSerial.Unread);
              binaryWriter.Write(this.Mailing.SystemSerial.Max);
              binaryWriter.Write(this.Mailing.SystemSerial.Fetch);
              binaryWriter.Write(this.Mailing.SystemSerial.New);
              binaryWriter.Write(this.Mailing.SystemSerial.Old);
              binaryWriter.Write(this.Mailing.SystemSerial.Count);
              binaryWriter.Write(this.Mailing.SystemSerial.LastSave);
              uint num1 = 0;
              if (this.Mailing.SystemSerial.Count > 0U)
              {
                for (int index = (int) this.Mailing.SystemSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
                    ++num1;
                }
                binaryWriter.Write(num1);
                for (int index = (int) this.Mailing.SystemSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.SystemSerial.Inbox[index].Serial);
                    binaryWriter.Write((byte) this.Mailing.SystemSerial.Inbox[index].Type);
                    binaryWriter.Write(this.Mailing.SystemSerial.Inbox[index].Timing);
                    binaryWriter.Write(this.Mailing.SystemSerial.Inbox[index].Change);
                  }
                }
              }
              else
                binaryWriter.Write(num1);
              uint num2 = 0;
              if (this.Mailing.FavorSerial.Count > 0U)
              {
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT && this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
                    ++num2;
                }
                binaryWriter.Write(num2);
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT && this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Serial);
                    binaryWriter.Write((byte) this.Mailing.FavorSerial.Inbox[index].Type);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Timing);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Change);
                  }
                }
              }
              else
                binaryWriter.Write(num2);
              binaryWriter.Write(this.Mailing.SystemSerial.Total + this.Mailing.SystemSerial.Unread + this.Mailing.SystemSerial.Max);
              break;
            case MailType.EMAIL_BATTLE:
              binaryWriter.Write(this.Mailing.ReportSerial.Total);
              binaryWriter.Write(this.Mailing.ReportSerial.Unread);
              binaryWriter.Write(this.Mailing.ReportSerial.Max);
              binaryWriter.Write(this.Mailing.ReportSerial.Fetch);
              binaryWriter.Write(this.Mailing.ReportSerial.New);
              binaryWriter.Write(this.Mailing.ReportSerial.Old);
              binaryWriter.Write(this.Mailing.ReportSerial.Count);
              binaryWriter.Write(this.Mailing.ReportSerial.LastSave);
              uint num3 = 0;
              if (this.Mailing.ReportSerial.Count > 0U)
              {
                for (int index = (int) this.Mailing.ReportSerial.Count - 1; index >= 0 && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept; --index)
                {
                  if ((int) this.Mailing.ReportSerial.Inbox[index].Serial != (int) this.Mailing.ReportSerial.ResourceID && (int) this.Mailing.ReportSerial.Inbox[index].Serial != (int) this.Mailing.ReportSerial.GatheringID && (int) this.Mailing.ReportSerial.Inbox[index].Serial != (int) this.Mailing.ReportSerial.AntiScoutID)
                    ++num3;
                }
                for (int index = 0; index < this.Mailing.ReportSerial.Gather.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept; ++index)
                  ++num3;
                for (int index = 0; index < this.Mailing.ReportSerial.Resource.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept; ++index)
                  ++num3;
                for (int index = 0; index < this.Mailing.ReportSerial.AntiScout.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept; ++index)
                  ++num3;
                binaryWriter.Write(num3);
                for (int index = (int) this.Mailing.ReportSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept && this.DoFavor.Combat.Type != CombatCollectReport.CCR_RESOURCE && this.DoFavor.Combat.Type != CombatCollectReport.CCR_COLLECT && this.DoFavor.Combat.Type != CombatCollectReport.CCR_RECON)
                  {
                    binaryWriter.Write(this.Mailing.ReportSerial.Inbox[index].Serial);
                    binaryWriter.Write((byte) this.Mailing.ReportSerial.Inbox[index].Type);
                    binaryWriter.Write(this.Mailing.ReportSerial.Inbox[index].Timing);
                    binaryWriter.Write(this.Mailing.ReportSerial.Inbox[index].Change);
                  }
                }
                for (int index = 0; index < this.Mailing.ReportSerial.Gather.Count; ++index)
                {
                  if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.ReportSerial.Gather[index]);
                    binaryWriter.Write((byte) 1);
                    binaryWriter.Write(this.DoFavor.Combat.Times);
                    binaryWriter.Write(false);
                  }
                }
                for (int index = 0; index < this.Mailing.ReportSerial.Resource.Count; ++index)
                {
                  if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.ReportSerial.Resource[index]);
                    binaryWriter.Write((byte) 1);
                    binaryWriter.Write(this.DoFavor.Combat.Times);
                    binaryWriter.Write(false);
                  }
                }
                for (int index = 0; index < this.Mailing.ReportSerial.AntiScout.Count; ++index)
                {
                  if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[index], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.ReportSerial.AntiScout[index]);
                    binaryWriter.Write((byte) 1);
                    binaryWriter.Write(this.DoFavor.Combat.Times);
                    binaryWriter.Write(false);
                  }
                }
              }
              else
                binaryWriter.Write(num3);
              uint num4 = 0;
              if (this.Mailing.FavorSerial.Count > 0U)
              {
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT)
                  {
                    if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
                      ++num4;
                    else
                      break;
                  }
                }
                binaryWriter.Write(num4);
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT && this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Serial);
                    binaryWriter.Write((byte) this.Mailing.FavorSerial.Inbox[index].Type);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Timing);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Change);
                  }
                }
              }
              else
                binaryWriter.Write(num4);
              binaryWriter.Write(this.Mailing.ReportSerial.Total + this.Mailing.ReportSerial.Unread + this.Mailing.ReportSerial.Max);
              break;
            case MailType.EMAIL_LETTER:
              binaryWriter.Write(this.Mailing.MailSerial.Total);
              binaryWriter.Write(this.Mailing.MailSerial.Unread);
              binaryWriter.Write(this.Mailing.MailSerial.Max);
              binaryWriter.Write(this.Mailing.MailSerial.Fetch);
              binaryWriter.Write(this.Mailing.MailSerial.New);
              binaryWriter.Write(this.Mailing.MailSerial.Old);
              binaryWriter.Write(this.Mailing.MailSerial.Count);
              binaryWriter.Write(this.Mailing.MailSerial.LastSave);
              for (ushort index1 = 0; (uint) index1 < this.Mailing.MailSerial.Count; ++index1)
              {
                if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[(int) index1].Serial, out this.DoFavor.Mail))
                {
                  bool beKept = this.DoFavor.Mail.BeKept;
                  SubContent subContent;
                  List<uint> uintList;
                  if ((this.DoFavor.Mail.MailType == (byte) 4 || this.DoFavor.Mail.MailType == (byte) 0) && this.DoFavor.Mail.More > (byte) 1 && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList))
                  {
                    for (ushort index2 = 0; (int) index2 < uintList.Count - 1; ++index2)
                    {
                      if (this.Mailing.MailSerial.Mail.TryGetValue(uintList[(int) index2], out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
                      {
                        binaryWriter.Write((byte) 1);
                        binaryWriter.Write(this.DoFavor.Mail.SerialID);
                        binaryWriter.Write((byte) MT);
                        binaryWriter.Write(this.DoFavor.Mail.Times);
                        binaryWriter.Write(false);
                        binaryWriter.Write(true);
                      }
                    }
                  }
                  binaryWriter.Write((byte) 0);
                  binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int) index1].Serial);
                  binaryWriter.Write((byte) this.Mailing.MailSerial.Inbox[(int) index1].Type);
                  binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int) index1].Timing);
                  binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int) index1].Change);
                  binaryWriter.Write(beKept);
                }
              }
              uint num5 = 0;
              if (this.Mailing.FavorSerial.Count > 0U)
              {
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
                    ++num5;
                }
                binaryWriter.Write(num5);
                for (int index = (int) this.Mailing.FavorSerial.Count - 1; index >= 0; --index)
                {
                  if (this.Mailing.FavorSerial.Inbox[index].Type == MT && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[index].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
                  {
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Serial);
                    binaryWriter.Write((byte) this.Mailing.FavorSerial.Inbox[index].Type);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Timing);
                    binaryWriter.Write(this.Mailing.FavorSerial.Inbox[index].Change);
                  }
                }
              }
              else
                binaryWriter.Write(num5);
              binaryWriter.Write(this.Mailing.MailSerial.Total + this.Mailing.MailSerial.Unread + this.Mailing.MailSerial.Max);
              break;
            case MailType.EMAIL_FAVORY:
              binaryWriter.Write(this.Mailing.FavorSerial.Total);
              binaryWriter.Write(this.Mailing.FavorSerial.Unread);
              binaryWriter.Write(this.Mailing.FavorSerial.Max);
              binaryWriter.Write(this.Mailing.FavorSerial.Fetch);
              binaryWriter.Write(this.Mailing.FavorSerial.New);
              binaryWriter.Write(this.Mailing.FavorSerial.Old);
              binaryWriter.Write(this.Mailing.FavorSerial.Count);
              for (ushort index = 0; (uint) index < this.Mailing.FavorSerial.Count; ++index)
              {
                binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int) index].Serial);
                binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int) index].Timing);
                binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int) index].Change);
                binaryWriter.Write((byte) this.Mailing.FavorSerial.Inbox[(int) index].Type);
              }
              binaryWriter.Write(this.Mailing.FavorSerial.Total + this.Mailing.FavorSerial.Unread + this.Mailing.FavorSerial.Max + this.Mailing.FavorSerial.Fetch + this.Mailing.FavorSerial.New);
              break;
          }
        }
      }
    }
    catch (Exception ex)
    {
      return false;
    }
    return true;
  }

  public bool LoadMail(MyFavorite data, BinaryReader br)
  {
    data.MailVer = br.ReadByte();
    if (data.Type == MailType.EMAIL_LETTER)
    {
      data.Mail = new global::MailContent();
      data.Mail.SerialID = br.ReadUInt32();
      data.Mail.SetData(br.ReadByte(), br.ReadInt64());
      data.Mail.MailType = br.ReadByte();
      data.Mail.ReplyID = br.ReadUInt32();
      data.Mail.SenderHead = br.ReadUInt16();
      data.Mail.SenderKindom = br.ReadUInt16();
      data.Mail.SenderTag = br.ReadString();
      data.Mail.SenderName = br.ReadString();
      data.Mail.ExtraFlag = br.ReadByte();
      data.Mail.TitleLen = br.ReadByte();
      data.Mail.ContentLen = br.ReadUInt16();
      data.Mail.AttachNum = br.ReadByte();
      data.Mail.BeRead = ((int) data.Mail.Flag & 1) > 0;
      data.Mail.BeSave = ((int) data.Mail.Flag & 2) > 0;
      data.Mail.BeKept = true;
      data.Mail.TitleT = data.Mail.ContentT = string.Empty;
      for (int index = 0; index < 6 && index < (int) data.Mail.AttachNum; ++index)
      {
        data.Mail.Attach[index].KingdomID = br.ReadUInt16();
        data.Mail.Attach[index].ZoneID = br.ReadUInt16();
        data.Mail.Attach[index].PointID = br.ReadByte();
      }
      data.Mail.Title = br.ReadString();
      data.Mail.Content = br.ReadString();
      if (data.MailVer >= (byte) 6)
      {
        data.Mail.LanguageSource = br.ReadByte();
        data.Mail.LanguageTarget = br.ReadByte();
        data.Mail.Translation = br.ReadBoolean();
        data.Mail.TitleT = br.ReadString();
        data.Mail.ContentT = br.ReadString();
      }
    }
    else if (data.Type == MailType.EMAIL_BATTLE)
    {
      data.Combat = new global::CombatReport(br.ReadUInt32());
      data.Combat.SetData(br.ReadByte(), br.ReadInt64());
      data.Combat.Type = (CombatCollectReport) br.ReadByte();
      data.Combat.BeRead = ((int) data.Combat.Flag & 1) > 0;
      data.Combat.BeSave = ((int) data.Combat.Flag & 2) > 0;
      data.Combat.BeKept = true;
      if (data.Combat.Type == CombatCollectReport.CCR_BATTLE)
      {
        data.Combat.Combat = new CombatReportContent();
        data.Combat.Combat.KingdomID = br.ReadUInt16();
        data.Combat.Combat.CombatlZone = br.ReadUInt16();
        data.Combat.Combat.CombatPoint = br.ReadByte();
        data.Combat.Combat.CombatPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.Combat.Side = br.ReadByte();
        data.Combat.Combat.AssaultKingdomID = br.ReadUInt16();
        data.Combat.Combat.AssaultAllianceTag = br.ReadString();
        data.Combat.Combat.AssaultName = br.ReadString();
        data.Combat.Combat.DefenceKingdomID = br.ReadUInt16();
        data.Combat.Combat.DefenceAllianceTag = br.ReadString();
        data.Combat.Combat.DefenceName = br.ReadString();
        data.Combat.Combat.Result = (CombatReportResultType) br.ReadByte();
        data.Combat.Combat.Resource = new int[5];
        for (byte index = 0; (int) index < data.Combat.Combat.Resource.Length; ++index)
          data.Combat.Combat.Resource[(int) index] = br.ReadInt32();
        data.Combat.Combat.HeroData = new CombatHeroExpData[5];
        for (int index = 0; index < 5; ++index)
        {
          data.Combat.Combat.HeroData[index] = new CombatHeroExpData();
          data.Combat.Combat.HeroData[index].HeroID = br.ReadUInt16();
          data.Combat.Combat.HeroData[index].Star = br.ReadByte();
        }
        data.Combat.Combat.EarnLordExp = br.ReadUInt32();
        data.Combat.Combat.EarnHeroExp = br.ReadUInt32();
        data.Combat.Combat.DetailAutoID = br.ReadUInt64();
        data.Combat.Combat.DetailDbServerID = br.ReadInt32();
        data.Combat.Combat.AccessKey = br.ReadInt32();
        data.Combat.Combat.DetailSelfIndex = br.ReadByte();
        data.Combat.Combat.CaptureResult = (ECombatReportCaptureResultType) br.ReadByte();
        data.Combat.Combat.Summary.AssaultCapitalZone = br.ReadUInt16();
        data.Combat.Combat.Summary.AssaultCapitalPoint = br.ReadByte();
        data.Combat.Combat.Summary.AssaultLosePower = br.ReadUInt64();
        data.Combat.Combat.Summary.AssaultTroopForce = br.ReadUInt32();
        data.Combat.Combat.Summary.AssaultTroopInjure = br.ReadUInt32();
        data.Combat.Combat.Summary.AssaultTroopDeath = br.ReadUInt32();
        data.Combat.Combat.Summary.DefenceCapitalZone = br.ReadUInt16();
        data.Combat.Combat.Summary.DefenceCapitalPoint = br.ReadByte();
        data.Combat.Combat.Summary.DefenceLosePower = br.ReadUInt64();
        data.Combat.Combat.Summary.DefenceTroopForce = br.ReadUInt32();
        data.Combat.Combat.Summary.DefenceTroopInjure = br.ReadUInt32();
        data.Combat.Combat.Summary.DefenceTroopDeath = br.ReadUInt32();
        data.Combat.Combat.Summary.WallDefence = br.ReadUInt32();
        data.Combat.Combat.Summary.WallDamage = br.ReadUInt32();
        data.Combat.Combat.Summary.TrapNumber = br.ReadUInt32();
        data.Combat.Combat.Summary.LoseTrapNumber = br.ReadUInt32();
        data.Combat.Combat.Summary.SaveTrapNumber = br.ReadUInt32();
        data.Combat.Combat.Summary.AssaultLevel = br.ReadByte();
        data.Combat.Combat.Summary.AssaultHead = br.ReadUInt16();
        data.Combat.Combat.Summary.AssaultLordInCombat = br.ReadByte();
        data.Combat.Combat.Summary.AssaultVIPLevel = br.ReadByte();
        data.Combat.Combat.Summary.IsLeader = br.ReadByte();
        data.Combat.Combat.Summary.DefenceLevel = br.ReadByte();
        data.Combat.Combat.Summary.DefenceHead = br.ReadUInt16();
        data.Combat.Combat.Summary.DefenceLordInCombat = br.ReadByte();
        data.Combat.Combat.Summary.DefenceVIPLevel = br.ReadByte();
        data.Combat.Combat.Summary.AssaultAllianceRank = br.ReadByte();
        data.Combat.Combat.Summary.DefenceAllianceRank = br.ReadByte();
        data.Combat.Combat.Version = br.ReadUInt32();
        data.Combat.Combat.PatchNo = br.ReadUInt32();
        data.Combat.Combat.Atkcoord = br.ReadByte();
        data.Combat.Combat.Defcoord = br.ReadByte();
        data.Combat.Combat.PetSkillPatchNo = br.ReadUInt32();
        data.Combat.Combat.m_AssaultPetSkill_ID = new ushort[20];
        for (int index = 0; index < data.Combat.Combat.m_AssaultPetSkill_ID.Length; ++index)
          data.Combat.Combat.m_AssaultPetSkill_ID[index] = br.ReadUInt16();
        data.Combat.Combat.m_AssaultPetSkill_LV = new byte[20];
        for (int index = 0; index < data.Combat.Combat.m_AssaultPetSkill_LV.Length; ++index)
          data.Combat.Combat.m_AssaultPetSkill_LV[index] = br.ReadByte();
        data.Combat.Combat.m_DefencePetSkill_ID = new ushort[20];
        for (int index = 0; index < data.Combat.Combat.m_DefencePetSkill_ID.Length; ++index)
          data.Combat.Combat.m_DefencePetSkill_ID[index] = br.ReadUInt16();
        data.Combat.Combat.m_DefencePetSkill_LV = new byte[20];
        for (int index = 0; index < data.Combat.Combat.m_DefencePetSkill_LV.Length; ++index)
          data.Combat.Combat.m_DefencePetSkill_LV[index] = br.ReadByte();
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_RESOURCE)
      {
        data.Combat.Resource = new ResourceReportContent();
        data.Combat.Resource.Result = br.ReadByte();
        data.Combat.Resource.Name = br.ReadString();
        data.Combat.Resource.Resource = new uint[5];
        for (byte index = 0; index < (byte) 5; ++index)
          data.Combat.Resource.Resource[(int) index] = br.ReadUInt32();
        this.Mailing.ReportSerial.Resource.Add(data.Combat.SerialID);
        this.Mailing.ReportSerial.Resource.Sort();
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_COLLECT)
      {
        data.Combat.Gather = new GatherReportContent();
        data.Combat.Gather.KingdomID = br.ReadUInt16();
        data.Combat.Gather.GatherZone = br.ReadUInt16();
        data.Combat.Gather.GatherPoint = br.ReadByte();
        data.Combat.Gather.GatherPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.Gather.GatherPointLevel = br.ReadByte();
        data.Combat.Gather.Resource = br.ReadUInt32();
        data.Combat.Gather.HeroNum = br.ReadByte();
        data.Combat.Gather.ItemLen = br.ReadByte();
        data.Combat.Gather.Item = br.ReadBytes(85);
        if (data.Combat.Gather.HeroNum > (byte) 0)
        {
          data.Combat.Gather.mHero = new GatherHeroExpData[(int) data.Combat.Gather.HeroNum];
          for (int index = 0; index < (int) data.Combat.Gather.HeroNum; ++index)
          {
            data.Combat.Gather.mHero[index] = new GatherHeroExpData();
            data.Combat.Gather.mHero[index].HeroID = br.ReadUInt16();
            data.Combat.Gather.mHero[index].Star = br.ReadByte();
            data.Combat.Gather.mHero[index].Exp = br.ReadUInt32();
          }
        }
        if (data.Combat.Gather.ItemLen > (byte) 0)
        {
          data.Combat.Gather.mResourceItem = new ResourceItem[(int) data.Combat.Gather.ItemLen];
          for (int index = 0; index < (int) data.Combat.Gather.ItemLen; ++index)
          {
            data.Combat.Gather.mResourceItem[index] = new ResourceItem();
            data.Combat.Gather.mResourceItem[index].ItemID = br.ReadUInt16();
            data.Combat.Gather.mResourceItem[index].Quantity = br.ReadUInt16();
            data.Combat.Gather.mResourceItem[index].Rank = br.ReadByte();
          }
        }
        this.Mailing.ReportSerial.Gather.Add(data.Combat.SerialID);
        this.Mailing.ReportSerial.Gather.Sort();
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_SCOUT)
      {
        data.Combat.Scout = new ScoutReportContent();
        data.Combat.Scout.KingdomID = br.ReadUInt16();
        data.Combat.Scout.CombatlZone = br.ReadUInt16();
        data.Combat.Scout.CombatPoint = br.ReadByte();
        data.Combat.Scout.CombatPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.Scout.ObjKingdomID = br.ReadUInt16();
        data.Combat.Scout.ObjAllianceTag = br.ReadString();
        data.Combat.Scout.ObjName = br.ReadString();
        data.Combat.Scout.ScoutResult = br.ReadByte();
        data.Combat.Scout.ScoutLevel = br.ReadByte();
        data.Combat.Scout.ScoutContentLen = br.ReadUInt16();
        data.Combat.Scout.ScoutContent = br.ReadBytes((int) data.Combat.Scout.ScoutContentLen);
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_RECON && data.MailVer == (byte) 8)
      {
        data.Combat.Recon = new ReconReportContent();
        data.Combat.Recon.KingdomID = br.ReadUInt16();
        data.Combat.Recon.CombatlZone = br.ReadUInt16();
        data.Combat.Recon.CombatPoint = br.ReadByte();
        data.Combat.Recon.CombatPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.Recon.AntiScout = br.ReadByte();
        data.Combat.Recon.WatchLevel = br.ReadByte();
        data.Combat.Recon.SrcKingdomID = br.ReadUInt16();
        data.Combat.Recon.SrcName = br.ReadString();
        data.Combat.Recon.SrcAllianceTag = br.ReadString();
        data.Combat.Recon.SrcHead = br.ReadUInt16();
        data.Combat.Recon.bAmbush = br.ReadByte();
        this.Mailing.ReportSerial.AntiScout.Add(data.Combat.SerialID);
        this.Mailing.ReportSerial.AntiScout.Sort();
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_MONSTER)
      {
        data.Combat.Monster = new MonsterReportContent();
        data.Combat.Monster.KindgomID = br.ReadUInt16();
        data.Combat.Monster.Zone = br.ReadUInt16();
        data.Combat.Monster.Point = br.ReadByte();
        data.Combat.Monster.Result = br.ReadByte();
        if (data.Combat.Monster.Result < (byte) 2 || data.Combat.Monster.Result > (byte) 3)
        {
          data.Combat.Monster.Head = br.ReadUInt16();
          data.Combat.Monster.MonsterID = br.ReadUInt16();
          data.Combat.Monster.MonsterLv = br.ReadByte();
          data.Combat.Monster.BeginHPPercent = br.ReadUInt32();
          data.Combat.Monster.EndHPPercent = br.ReadUInt32();
          data.Combat.Monster.MonsterMaxHP = br.ReadUInt32();
          data.Combat.Monster.Exp = br.ReadUInt32();
          data.Combat.Monster.HeroID = new ushort[5];
          data.Combat.Monster.HeroExp = new uint[5];
          data.Combat.Monster.HeroData = new MonsterReportContent.HeroDataType[5];
          for (int index = 0; index < 5; ++index)
            data.Combat.Monster.HeroID[index] = br.ReadUInt16();
          for (int index = 0; index < 5; ++index)
            data.Combat.Monster.HeroExp[index] = br.ReadUInt32();
          for (int index = 0; index < 5; ++index)
          {
            data.Combat.Monster.HeroData[index] = new MonsterReportContent.HeroDataType();
            data.Combat.Monster.HeroData[index].SkillLV1 = br.ReadByte();
            data.Combat.Monster.HeroData[index].SkillLV2 = br.ReadByte();
            data.Combat.Monster.HeroData[index].SkillLV3 = br.ReadByte();
            data.Combat.Monster.HeroData[index].SkillLV4 = br.ReadByte();
            data.Combat.Monster.HeroData[index].LV = br.ReadByte();
            data.Combat.Monster.HeroData[index].Star = br.ReadByte();
            data.Combat.Monster.HeroData[index].Enhance = br.ReadByte();
            data.Combat.Monster.HeroData[index].Equip = br.ReadByte();
          }
          data.Combat.Monster.SequentialDamageTimes = br.ReadByte();
          data.Combat.Monster.EffectiveDamageTimes = br.ReadByte();
          data.Combat.Monster.AttrScale = new MonsterReportContent.MonsterDataType();
          data.Combat.Monster.AttrScale.ActionTimes = br.ReadByte();
          data.Combat.Monster.AttrScale.SequentialDamageScale = br.ReadUInt32();
          data.Combat.Monster.AttrScale.DamageScale = br.ReadUInt32();
          data.Combat.Monster.AttrScale.MaxHPScale = br.ReadUInt32();
          data.Combat.Monster.AttrScale.HealingScale = br.ReadUInt32();
          data.Combat.Monster.AttrScale.InitMP = br.ReadUInt16();
          data.Combat.Monster.RandomSeed = br.ReadUInt16();
          data.Combat.Monster.RandomGap = br.ReadByte();
          data.Combat.Monster.Version = br.ReadUInt32();
          data.Combat.Monster.PatchNo = br.ReadUInt32();
          if (data.Combat.Monster.Result < (byte) 2)
          {
            data.Combat.Monster.ItemLen = br.ReadByte();
            data.Combat.Monster.Item = new MonsterReportContent.ItemDataType[30];
            for (int index = 0; index < (int) data.Combat.Monster.ItemLen && index < 30; ++index)
            {
              data.Combat.Monster.Item[index] = new MonsterReportContent.ItemDataType();
              data.Combat.Monster.Item[index].ItemID = br.ReadUInt16();
              data.Combat.Monster.Item[index].Num = br.ReadUInt16();
              data.Combat.Monster.Item[index].ItemRank = br.ReadByte();
            }
          }
          else
            data.Combat.Monster.AllianceTag = br.ReadString();
        }
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_NPCSCOUT)
      {
        data.Combat.NPCScout = new NPCScoutReportContent();
        data.Combat.NPCScout.KingdomID = br.ReadUInt16();
        data.Combat.NPCScout.CombatlZone = br.ReadUInt16();
        data.Combat.NPCScout.CombatPoint = br.ReadByte();
        data.Combat.NPCScout.CombatPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.NPCScout.NPCLevel = br.ReadByte();
        data.Combat.NPCScout.NPCID = br.ReadUInt16();
        data.Combat.NPCScout.Reward = br.ReadUInt16();
        data.Combat.NPCScout.ScoutResult = br.ReadByte();
        data.Combat.NPCScout.ScoutLevel = br.ReadByte();
        data.Combat.NPCScout.ScoutContentLen = br.ReadUInt16();
        data.Combat.NPCScout.ScoutContent = br.ReadBytes((int) data.Combat.NPCScout.ScoutContentLen);
      }
      else if (data.Combat.Type == CombatCollectReport.CCR_NPCCOMBAT)
      {
        data.Combat.NPCCombat = new NPCCombatReportContent();
        data.Combat.NPCCombat.KingdomID = br.ReadUInt16();
        data.Combat.NPCCombat.CombatlZone = br.ReadUInt16();
        data.Combat.NPCCombat.CombatPoint = br.ReadByte();
        data.Combat.NPCCombat.CombatPointKind = (POINT_KIND) br.ReadByte();
        data.Combat.NPCCombat.Side = br.ReadByte();
        data.Combat.NPCCombat.AssaultKingdomID = br.ReadUInt16();
        data.Combat.NPCCombat.AssaultAllianceTag = br.ReadString();
        data.Combat.NPCCombat.AssaultName = br.ReadString();
        data.Combat.NPCCombat.NPCLevel = br.ReadByte();
        data.Combat.NPCCombat.NPCID = br.ReadUInt16();
        data.Combat.NPCCombat.Result = (CombatReportResultType) br.ReadByte();
        data.Combat.NPCCombat.Reward = br.ReadUInt16();
        data.Combat.NPCCombat.HeroData = new CombatHeroExpData[5];
        for (int index = 0; index < data.Combat.NPCCombat.HeroData.Length; ++index)
        {
          data.Combat.NPCCombat.HeroData[index] = new CombatHeroExpData();
          data.Combat.NPCCombat.HeroData[index].HeroID = br.ReadUInt16();
          data.Combat.NPCCombat.HeroData[index].Star = br.ReadByte();
        }
        data.Combat.NPCCombat.EarnLordExp = br.ReadUInt32();
        data.Combat.NPCCombat.EarnHeroExp = br.ReadUInt32();
        data.Combat.NPCCombat.DetailAutoID = br.ReadUInt64();
        data.Combat.NPCCombat.DetailDbServerID = br.ReadInt32();
        data.Combat.NPCCombat.AccessKey = br.ReadInt32();
        data.Combat.NPCCombat.DetailSelfIndex = br.ReadByte();
        data.Combat.NPCCombat.ResurrextTotal = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.AssaultCapitalZone = br.ReadUInt16();
        data.Combat.NPCCombat.SummaryHead.AssaultCapitalPoint = br.ReadByte();
        data.Combat.NPCCombat.SummaryHead.AssaultLosePower = br.ReadUInt64();
        data.Combat.NPCCombat.SummaryHead.AssaultTroopForce = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.AssaultTroopInjure = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.AssaultTroopDeath = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.DefenceCapitalZone = br.ReadUInt16();
        data.Combat.NPCCombat.SummaryHead.DefenceCapitalPoint = br.ReadByte();
        data.Combat.NPCCombat.SummaryHead.DefenceLosePower = br.ReadUInt64();
        data.Combat.NPCCombat.SummaryHead.DefenceTroopForce = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.DefenceTroopInjure = br.ReadUInt32();
        data.Combat.NPCCombat.SummaryHead.DefenceTroopDeath = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.WallDefence = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.WallDamage = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.TrapNumber = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.LoseTrapNumber = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.SaveTrapNumber = br.ReadUInt32();
        data.Combat.NPCCombat.Summary.AssaultLevel = br.ReadByte();
        data.Combat.NPCCombat.Summary.AssaultHead = br.ReadUInt16();
        data.Combat.NPCCombat.Summary.AssaultLordInCombat = br.ReadByte();
        data.Combat.NPCCombat.Summary.AssaultVIPLevel = br.ReadByte();
        data.Combat.NPCCombat.Summary.IsLeader = br.ReadByte();
        data.Combat.NPCCombat.Summary.AssaultAllianceRank = br.ReadByte();
        data.Combat.NPCCombat.Version = br.ReadUInt32();
        data.Combat.NPCCombat.PatchNo = br.ReadUInt32();
        data.Combat.NPCCombat.AssaultArmyCoord = br.ReadByte();
        data.Combat.NPCCombat.DefenceArmyCoord = br.ReadByte();
        data.Combat.NPCCombat.PetSkillPatchNo = br.ReadUInt32();
        data.Combat.NPCCombat.m_AssaultPetSkill_ID = new ushort[20];
        for (int index = 0; index < data.Combat.NPCCombat.m_AssaultPetSkill_ID.Length; ++index)
          data.Combat.NPCCombat.m_AssaultPetSkill_ID[index] = br.ReadUInt16();
        data.Combat.NPCCombat.m_AssaultPetSkill_LV = new byte[20];
        for (int index = 0; index < data.Combat.NPCCombat.m_AssaultPetSkill_LV.Length; ++index)
          data.Combat.NPCCombat.m_AssaultPetSkill_LV[index] = br.ReadByte();
      }
      else
      {
        if (data.Combat.Type != CombatCollectReport.CCR_PETREPORT)
          return false;
        data.Combat.Pet = new PetReportContent();
        data.Combat.Pet.KindgomID = br.ReadUInt16();
        data.Combat.Pet.Zone = br.ReadUInt16();
        data.Combat.Pet.Point = br.ReadByte();
        data.Combat.Pet.Kind = br.ReadByte();
        data.Combat.Pet.Side = br.ReadByte();
        data.Combat.Pet.AssaultKingdomID = br.ReadUInt16();
        data.Combat.Pet.AssaultAllianceTag = br.ReadString();
        data.Combat.Pet.AssaultName = br.ReadString();
        data.Combat.Pet.AssaultCapitalZone = br.ReadUInt16();
        data.Combat.Pet.AssaultCapitalPoint = br.ReadByte();
        data.Combat.Pet.AssaultLevel = br.ReadByte();
        data.Combat.Pet.AssaultHead = br.ReadUInt16();
        data.Combat.Pet.AssaultVIPLevel = br.ReadByte();
        data.Combat.Pet.AssaultAllianceRank = br.ReadByte();
        data.Combat.Pet.DefenceKingdomID = br.ReadUInt16();
        data.Combat.Pet.DefenceAllianceTag = br.ReadString();
        data.Combat.Pet.DefenceName = br.ReadString();
        data.Combat.Pet.DefenceCapitalZone = br.ReadUInt16();
        data.Combat.Pet.DefenceCapitalPoint = br.ReadByte();
        data.Combat.Pet.DefenceLevel = br.ReadByte();
        data.Combat.Pet.DefenceHead = br.ReadUInt16();
        data.Combat.Pet.DefenceVIPLevel = br.ReadByte();
        data.Combat.Pet.DefenceAllianceRank = br.ReadByte();
        data.Combat.Pet.PatchNo = br.ReadUInt32();
        data.Combat.Pet.PetID = br.ReadUInt16();
        data.Combat.Pet.PetStar = br.ReadByte();
        data.Combat.Pet.SkillID = br.ReadUInt16();
        data.Combat.Pet.SkillLevel = br.ReadByte();
        data.Combat.Pet.Result = (PetReportResultType) br.ReadByte();
        data.Combat.Pet.Resource = new uint[5];
        for (byte index = 0; (int) index < data.Combat.Pet.Resource.Length; ++index)
          data.Combat.Pet.Resource[(int) index] = br.ReadUInt32();
        data.Combat.Pet.LostPower = br.ReadUInt64();
        data.Combat.Pet.TotalInjure = br.ReadUInt32();
        data.Combat.Pet.TotalDead = br.ReadUInt32();
        data.Combat.Pet.InjureTroops = new uint[16];
        for (byte index = 0; (int) index < data.Combat.Pet.InjureTroops.Length; ++index)
          data.Combat.Pet.InjureTroops[(int) index] = br.ReadUInt32();
        data.Combat.Pet.DeadTroops = new uint[16];
        for (byte index = 0; (int) index < data.Combat.Pet.DeadTroops.Length; ++index)
          data.Combat.Pet.DeadTroops[(int) index] = br.ReadUInt32();
        data.Combat.Pet.WallDamage = br.ReadUInt32();
      }
    }
    else
    {
      if (data.Type != MailType.EMAIL_SYSTEM)
        return false;
      data.System = new NoticeContent();
      data.System.SerialID = br.ReadUInt32();
      data.System.SetData(br.ReadByte(), br.ReadInt64());
      data.System.BeRead = ((int) data.System.Flag & 1) > 0;
      data.System.BeSave = ((int) data.System.Flag & 2) > 0;
      data.System.BeKept = true;
      data.System.Type = (NoticeReport) br.ReadByte();
      if (data.System.Type == NoticeReport.ENotice_Enhance)
      {
        data.System.NoticeHeroEnhance = new NoticeContent.Enhance();
        data.System.NoticeHeroEnhance.HeroID = br.ReadUInt16();
        data.System.NoticeHeroEnhance.Rank = br.ReadByte();
        data.System.NoticeHeroEnhance.Star = br.ReadByte();
      }
      else if (data.System.Type == NoticeReport.ENotice_StarUp)
      {
        data.System.NoticeHeroStarUp = new NoticeContent.StarUp();
        data.System.NoticeHeroStarUp.HeroID = br.ReadUInt16();
        data.System.NoticeHeroStarUp.Star = br.ReadByte();
        data.System.NoticeHeroStarUp.Rank = br.ReadByte();
      }
      else if (data.System.Type == NoticeReport.ENotice_JoinAlliance)
      {
        data.System.Notice_JoinAlliance = new NoticeContent.JoinAlliance();
        data.System.Notice_JoinAlliance.Tag = br.ReadString();
        data.System.Notice_JoinAlliance.Name = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_ApplyAlliance)
      {
        data.System.Notice_ApplyAlliance = new NoticeContent.ApplyAlliance();
        data.System.Notice_ApplyAlliance.Tag = br.ReadString();
        data.System.Notice_ApplyAlliance.Name = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
      {
        data.System.Notice_ApplyAllianceBeDenied = new NoticeContent.ApplyAllianceBeDenied();
        data.System.Notice_ApplyAllianceBeDenied.Dealer = br.ReadString();
        data.System.Notice_ApplyAllianceBeDenied.Tag = br.ReadString();
        data.System.Notice_ApplyAllianceBeDenied.Name = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_AllianceDismiss)
      {
        data.System.Notice_AllianceDismiss = new NoticeContent.AllianceDismiss();
        data.System.Notice_AllianceDismiss.Leader = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
      {
        data.System.Notice_AllianceLeaderStepDown = new NoticeContent.AllianceLeaderStepDown();
        data.System.Notice_AllianceLeaderStepDown.OldLeader = br.ReadString();
        data.System.Notice_AllianceLeaderStepDown.NewLeader = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_ActivityDegreePrize)
      {
        data.System.Notice_ActivityDegreePrize = new NoticeContent.ActivityDegreePrize();
        data.System.Notice_ActivityDegreePrize.Type = (NoticeContent.ActivityCircleEventType) br.ReadByte();
        data.System.Notice_ActivityDegreePrize.Degree = br.ReadByte();
        data.System.Notice_ActivityDegreePrize.PrizeNum = br.ReadByte();
        data.System.Notice_ActivityDegreePrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Notice_ActivityDegreePrize.PrizeNum];
        for (byte index = 0; (int) index < (int) data.System.Notice_ActivityDegreePrize.PrizeNum; ++index)
        {
          data.System.Notice_ActivityDegreePrize.PrizeData[(int) index].Rank = br.ReadByte();
          data.System.Notice_ActivityDegreePrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
          data.System.Notice_ActivityDegreePrize.PrizeData[(int) index].Num = br.ReadByte();
        }
      }
      else if (data.System.Type == NoticeReport.Enotice_ActivityRankPrize)
      {
        data.System.Notice_ActivityRankPrize = new NoticeContent.ActivityRankPrize();
        data.System.Notice_ActivityRankPrize.Type = (NoticeContent.ActivityCircleEventType) br.ReadByte();
        data.System.Notice_ActivityRankPrize.Place = br.ReadByte();
        data.System.Notice_ActivityRankPrize.PrizeNum = br.ReadByte();
        data.System.Notice_ActivityRankPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Notice_ActivityRankPrize.PrizeNum];
        for (byte index = 0; (int) index < (int) data.System.Notice_ActivityRankPrize.PrizeNum; ++index)
        {
          data.System.Notice_ActivityRankPrize.PrizeData[(int) index].Rank = br.ReadByte();
          data.System.Notice_ActivityRankPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
          data.System.Notice_ActivityRankPrize.PrizeData[(int) index].Num = br.ReadByte();
        }
      }
      else if (data.System.Type == NoticeReport.Enotice_InviteAlliance)
      {
        data.System.Notice_InviteAlliance = new NoticeContent.InviteAlliance();
        data.System.Notice_InviteAlliance.AllianceID = br.ReadUInt32();
        data.System.Notice_InviteAlliance.InviterName = br.ReadString();
        data.System.Notice_InviteAlliance.Tag = br.ReadString();
        data.System.Notice_InviteAlliance.Name = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_SynLordEquip)
      {
        data.System.Notice_SynLordEquip = new NoticeContent.SynLordEquip();
        data.System.Notice_SynLordEquip.ItemID = br.ReadUInt16();
        data.System.Notice_SynLordEquip.Rank = br.ReadByte();
        data.System.Notice_SynLordEquip.AddExp = br.ReadUInt32();
      }
      else if (data.System.Type == NoticeReport.Enotice_RallyCancel)
      {
        data.System.Notice_RallyNotice = new NoticeContent.RallyNotice();
        data.System.Notice_RallyNotice.HostName = br.ReadString();
        data.System.Notice_RallyNotice.HostTag = br.ReadString();
        data.System.Notice_RallyNotice.TargetName = br.ReadString();
        data.System.Notice_RallyNotice.TargetTag = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_CryptFinish)
      {
        data.System.Notice_CryptNotice = new NoticeContent.CryptNotice();
        data.System.Notice_CryptNotice.Money = br.ReadUInt16();
        data.System.Notice_CryptNotice.Kind = br.ReadByte();
        data.System.Notice_CryptNotice.Level = br.ReadByte();
      }
      else if (data.System.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
      {
        data.System.Notice_AsTargetAlly = new NoticeContent.AsTargetAlly();
        data.System.Notice_AsTargetAlly.HostName = br.ReadString();
        data.System.Notice_AsTargetAlly.HostTag = br.ReadString();
        data.System.Notice_AsTargetAlly.TargetName = br.ReadString();
      }
      else if (data.System.Type == NoticeReport.Enotice_OtherSavedLord)
      {
        data.System.Notice_OtherSavedLord = new NoticeContent.OtherSavedLord();
        data.System.Notice_OtherSavedLord.HomeKingdom = br.ReadUInt16();
        data.System.Notice_OtherSavedLord.AllianceTag = br.ReadString();
        data.System.Notice_OtherSavedLord.Name = br.ReadString();
      }
      else if (data.System.Type != NoticeReport.Enotice_SelfSavedLord)
      {
        if (data.System.Type == NoticeReport.Enotice_LordBeingReleased)
        {
          data.System.Notice_LordBeingReleased = new NoticeContent.LordBeingReleased();
          data.System.Notice_LordBeingReleased.HomeKingdom = br.ReadUInt16();
          data.System.Notice_LordBeingReleased.AllianceTag = br.ReadString();
          data.System.Notice_LordBeingReleased.Name = br.ReadString();
        }
        else if (data.System.Type == NoticeReport.Enotice_LordBeingExecuted)
        {
          data.System.Notice_LordBeingExecuted = new NoticeContent.LordBeingExecuted();
          data.System.Notice_LordBeingExecuted.HomeKingdom = br.ReadUInt16();
          data.System.Notice_LordBeingExecuted.AllianceTag = br.ReadString();
          data.System.Notice_LordBeingExecuted.Name = br.ReadString();
        }
        else if (data.System.Type != NoticeReport.Enotice_LordEscaped)
        {
          if (data.System.Type == NoticeReport.Enotice_OtherBreakPrison)
          {
            data.System.Notice_OtherBreakPrison = new NoticeContent.OtherBreakPrison();
            data.System.Notice_OtherBreakPrison.HomeKingdom = br.ReadUInt16();
            data.System.Notice_OtherBreakPrison.AllianceTag = br.ReadString();
            data.System.Notice_OtherBreakPrison.Name = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_RescuedPrisoner)
          {
            data.System.Notice_RescuedPrisoner = new NoticeContent.RescuedPrisoner();
            data.System.Notice_RescuedPrisoner.HomeKingdom = br.ReadUInt16();
            data.System.Notice_RescuedPrisoner.AllianceTag = br.ReadString();
            data.System.Notice_RescuedPrisoner.Name = br.ReadString();
            data.System.Notice_RescuedPrisoner.PrisonerNum = br.ReadByte();
            data.System.Notice_RescuedPrisoner.ClaimReward = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_RequestRansom)
          {
            data.System.Notice_RequestRansom = new NoticeContent.RequestRansom();
            data.System.Notice_RequestRansom.Ransom = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_ReceivedRansom)
          {
            data.System.Notice_ReceivedRansom = new NoticeContent.ReceivedRansom();
            data.System.Notice_ReceivedRansom.Ransom = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_PrisonFull)
          {
            data.System.Notice_PrisonFull = new NoticeContent.PrisonFull();
            data.System.Notice_PrisonFull.HomeKingdom = br.ReadUInt16();
            data.System.Notice_PrisonFull.AllianceTag = br.ReadString();
            data.System.Notice_PrisonFull.Name = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_BeQuitAlliance)
          {
            data.System.Notice_BeQuitAlliance = new NoticeContent.BeQuitAlliance();
            data.System.Notice_BeQuitAlliance.Dealer = br.ReadString();
            data.System.Notice_BeQuitAlliance.AllianceTag = br.ReadString();
            data.System.Notice_BeQuitAlliance.Alliance = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_BuyTreasure)
          {
            data.System.Notice_BuyTreasure = new NoticeContent.BuyTreasure();
            data.System.Notice_BuyTreasure.Crystal = br.ReadUInt32();
            data.System.Notice_BuyTreasure.BonusCrystal = br.ReadUInt32();
            data.System.Notice_BuyTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
            for (int index = 0; index < 5; ++index)
            {
              data.System.Notice_BuyTreasure.Gift[index] = new NoticeContent.TreasureAllianceGift();
              data.System.Notice_BuyTreasure.Gift[index].ItemID = br.ReadUInt16();
              data.System.Notice_BuyTreasure.Gift[index].ItemNum = br.ReadUInt16();
            }
            data.System.Notice_BuyTreasure.ItemNum = br.ReadByte();
            data.System.Notice_BuyTreasure.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Notice_BuyTreasure.ItemNum];
            for (int index = 0; index < (int) data.System.Notice_BuyTreasure.ItemNum; ++index)
            {
              data.System.Notice_BuyTreasure.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Notice_BuyTreasure.Item[index].ItemID = br.ReadUInt16();
              data.System.Notice_BuyTreasure.Item[index].ItemNum = br.ReadUInt16();
              data.System.Notice_BuyTreasure.Item[index].ItemRank = br.ReadByte();
            }
            data.System.Notice_BuyTreasure.GiftTop = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_RallyCancel_Moving)
          {
            data.System.Notice_RallyNotice_Moving = new NoticeContent.RallyNotice_Moving();
            data.System.Notice_RallyNotice_Moving.HostName = br.ReadString();
            data.System.Notice_RallyNotice_Moving.HostTag = br.ReadString();
            data.System.Notice_RallyNotice_Moving.TargetName = br.ReadString();
            data.System.Notice_RallyNotice_Moving.TargetTag = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_AtkFailedSelfShield)
          {
            data.System.Enotice_AtkFailedSelfShield = new NoticeContent.AtkFailedSelfShield();
            data.System.Enotice_AtkFailedSelfShield.FailedType = br.ReadByte();
            data.System.Enotice_AtkFailedSelfShield.KingdomID = br.ReadUInt16();
            data.System.Enotice_AtkFailedSelfShield.zoneID = br.ReadUInt16();
            data.System.Enotice_AtkFailedSelfShield.pointID = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_RecivedGift)
          {
            data.System.Enotice_RecivedGift = new NoticeContent.Gifts();
            data.System.Enotice_RecivedGift.GiftsName = br.ReadString();
            data.System.Enotice_RecivedGift.GiftsTag = br.ReadString();
            data.System.Enotice_RecivedGift.Item = new NoticeContent.TreasureAllianceGift();
            data.System.Enotice_RecivedGift.Item.ItemID = br.ReadUInt16();
            data.System.Enotice_RecivedGift.Item.ItemNum = br.ReadUInt16();
          }
          else if (data.System.Type == NoticeReport.Enotice_PrisonAmnestied)
          {
            data.System.Enotice_PrisonAmnestied = new NoticeContent.PrisonAmnestied();
            data.System.Enotice_PrisonAmnestied.KingsHomeKingdom = br.ReadUInt16();
            data.System.Enotice_PrisonAmnestied.KingdomTag = br.ReadString();
            data.System.Enotice_PrisonAmnestied.KingdomName = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_LordBeingAmnestied)
          {
            data.System.Enotice_LordBeingAmnestied = new NoticeContent.LordBeingAmnestied();
            data.System.Enotice_LordBeingAmnestied.KingsHomeKingdom = br.ReadUInt16();
            data.System.Enotice_LordBeingAmnestied.KingdomTag = br.ReadString();
            data.System.Enotice_LordBeingAmnestied.KingdomName = br.ReadString();
            data.System.Enotice_LordBeingAmnestied.WardensHomeKingdom = br.ReadUInt16();
            data.System.Enotice_LordBeingAmnestied.Tag = br.ReadString();
            data.System.Enotice_LordBeingAmnestied.Name = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_RulerGift)
          {
            data.System.Enotice_RulerGift = new NoticeContent.RulerGift();
            data.System.Enotice_RulerGift.RulerKind = br.ReadByte();
            data.System.Enotice_RulerGift.RulerAllianceKingdomID = br.ReadUInt16();
            data.System.Enotice_RulerGift.Tag = br.ReadString();
            data.System.Enotice_RulerGift.Name = br.ReadString();
            data.System.Enotice_RulerGift.GiftKindNum = br.ReadByte();
            data.System.Enotice_RulerGift.Gifts = new NoticeContent.TreasureAllianceGift[16];
            for (int index = 0; index < (int) data.System.Enotice_RulerGift.GiftKindNum; ++index)
            {
              data.System.Enotice_RulerGift.Gifts[index] = new NoticeContent.TreasureAllianceGift();
              data.System.Enotice_RulerGift.Gifts[index].ItemID = br.ReadUInt16();
              data.System.Enotice_RulerGift.Gifts[index].ItemNum = br.ReadUInt16();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_DismissAllianceLeader)
          {
            data.System.Enotice_DismissAllianceLeader = new NoticeContent.AllianceDismissLeader();
            data.System.Enotice_DismissAllianceLeader.OldLeader = br.ReadString();
            data.System.Enotice_DismissAllianceLeader.NewLeader = br.ReadString();
            data.System.Enotice_DismissAllianceLeader.OffLineDay = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_AmbushDefSuccess)
          {
            data.System.Enotice_AmbushDefSuccess = new NoticeContent.Cantonment();
            data.System.Enotice_AmbushDefSuccess.AmbushName = br.ReadString();
            data.System.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom = br.ReadUInt16();
            data.System.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag = br.ReadString();
            data.System.Enotice_AmbushDefSuccess.AtkPlayerName = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_AmbushDefFailed)
          {
            data.System.Enotice_AmbushDefFailed = new NoticeContent.Cantonment();
            data.System.Enotice_AmbushDefFailed.AmbushName = br.ReadString();
            data.System.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom = br.ReadUInt16();
            data.System.Enotice_AmbushDefFailed.AtkPlayerAllianceTag = br.ReadString();
            data.System.Enotice_AmbushDefFailed.AtkPlayerName = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
          {
            data.System.Enotice_ActivityKVKDegreePrize = new NoticeContent.ActivityKVKDegreePrize();
            data.System.Enotice_ActivityKVKDegreePrize.ActType = (EActivityType) br.ReadByte();
            data.System.Enotice_ActivityKVKDegreePrize.EventType = (EActivityKingdomEventType) br.ReadByte();
            data.System.Enotice_ActivityKVKDegreePrize.Degree = br.ReadByte();
            data.System.Enotice_ActivityKVKDegreePrize.PrizeNum = br.ReadByte();
            data.System.Enotice_ActivityKVKDegreePrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_ActivityKVKDegreePrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_ActivityKVKDegreePrize.PrizeNum; ++index)
            {
              data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
          {
            data.System.Enotice_ActivityKVKRankPrize = new NoticeContent.ActivityKVKRankPrize();
            data.System.Enotice_ActivityKVKRankPrize.ActType = (EActivityType) br.ReadByte();
            data.System.Enotice_ActivityKVKRankPrize.EventType = (EActivityKingdomEventType) br.ReadByte();
            data.System.Enotice_ActivityKVKRankPrize.Place = br.ReadByte();
            data.System.Enotice_ActivityKVKRankPrize.PrizeNum = br.ReadByte();
            data.System.Enotice_ActivityKVKRankPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_ActivityKVKRankPrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_ActivityKVKRankPrize.PrizeNum; ++index)
            {
              data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
          {
            data.System.Enotice_BuyBlackMarketTreasure = new NoticeContent.BuyTreasure();
            data.System.Enotice_BuyBlackMarketTreasure.Crystal = br.ReadUInt32();
            data.System.Enotice_BuyBlackMarketTreasure.BonusCrystal = br.ReadUInt32();
            data.System.Enotice_BuyBlackMarketTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
            for (int index = 0; index < 5; ++index)
            {
              data.System.Enotice_BuyBlackMarketTreasure.Gift[index] = new NoticeContent.TreasureAllianceGift();
              data.System.Enotice_BuyBlackMarketTreasure.Gift[index].ItemID = br.ReadUInt16();
              data.System.Enotice_BuyBlackMarketTreasure.Gift[index].ItemNum = br.ReadUInt16();
            }
            data.System.Enotice_BuyBlackMarketTreasure.ItemNum = br.ReadByte();
            data.System.Enotice_BuyBlackMarketTreasure.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Enotice_BuyBlackMarketTreasure.ItemNum];
            for (int index = 0; index < (int) data.System.Enotice_BuyBlackMarketTreasure.ItemNum; ++index)
            {
              data.System.Enotice_BuyBlackMarketTreasure.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemID = br.ReadUInt16();
              data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemNum = br.ReadUInt16();
              data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemRank = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_KickOffTeam)
          {
            data.System.Enotice_KickOffTeam = new NoticeContent.KickOffTeam();
            data.System.Enotice_KickOffTeam.HostName = br.ReadString();
            data.System.Enotice_KickOffTeam.AllianceTag = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_AMRankPrize)
          {
            data.System.Enotice_AMRankPrize = new NoticeContent.ActivityKVKRankPrize();
            data.System.Enotice_AMRankPrize.ActType = (EActivityType) br.ReadByte();
            data.System.Enotice_AMRankPrize.EventType = (EActivityKingdomEventType) br.ReadByte();
            data.System.Enotice_AMRankPrize.Place = br.ReadByte();
            data.System.Enotice_AMRankPrize.PrizeNum = br.ReadByte();
            data.System.Enotice_AMRankPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_AMRankPrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_AMRankPrize.PrizeNum; ++index)
            {
              data.System.Enotice_AMRankPrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_AMRankPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_AMRankPrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_AllianceHomeKingdom)
          {
            data.System.Enotice_AllianceHomeKingdom = new NoticeContent.AllianceChangeHomeKingdom();
            data.System.Enotice_AllianceHomeKingdom.AllianceTag = br.ReadString();
            data.System.Enotice_AllianceHomeKingdom.Leader = br.ReadString();
            data.System.Enotice_AllianceHomeKingdom.HomeKingdom = br.ReadUInt16();
          }
          else if (data.System.Type == NoticeReport.Enotice_WorldKingPrize)
          {
            data.System.Enotice_WorldKingPrize = new NoticeContent.WorldKingPrize();
            data.System.Enotice_WorldKingPrize.PrizeNum = br.ReadByte();
            data.System.Enotice_WorldKingPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_WorldKingPrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_WorldKingPrize.PrizeNum; ++index)
            {
              data.System.Enotice_WorldKingPrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_WorldKingPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_WorldKingPrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_BackendAddCrystal)
          {
            data.System.Enotice_BackendAddCrystal = new NoticeContent.AddCrystal();
            data.System.Enotice_BackendAddCrystal.Crystal = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_LoginConpensate)
          {
            data.System.Enotice_LoginConpensate = new NoticeContent.AddCrystal();
            data.System.Enotice_LoginConpensate.Crystal = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_PurchaseConpensate)
          {
            data.System.Enotice_PurchaseConpensate = new NoticeContent.AddCrystal();
            data.System.Enotice_PurchaseConpensate.Crystal = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_RallyNPCCancel)
          {
            data.System.Enotice_RallyNPCCancel = new NoticeContent.RallyNpcCancel();
            data.System.Enotice_RallyNPCCancel.HostName = br.ReadString();
            data.System.Enotice_RallyNPCCancel.AllianceTag = br.ReadString();
            data.System.Enotice_RallyNPCCancel.NPCLevel = br.ReadByte();
            data.System.Enotice_RallyNPCCancel.NPCID = br.ReadUInt16();
          }
          else if (data.System.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
          {
            data.System.Enotice_RallyNPCCancelInvalid = new NoticeContent.RallyNpcCancel();
            data.System.Enotice_RallyNPCCancelInvalid.HostName = br.ReadString();
            data.System.Enotice_RallyNPCCancelInvalid.AllianceTag = br.ReadString();
            data.System.Enotice_RallyNPCCancelInvalid.NPCLevel = br.ReadByte();
            data.System.Enotice_RallyNPCCancelInvalid.NPCID = br.ReadUInt16();
          }
          else if (data.System.Type == NoticeReport.Enotice_LordEquipExpire)
          {
            data.System.Enotice_LordEquipExpire = new NoticeContent.LordEquipExpire();
            data.System.Enotice_LordEquipExpire.ItemID = br.ReadUInt16();
            data.System.Enotice_LordEquipExpire.Rank = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_WorldNotKingPrize)
          {
            data.System.Enotice_WorldNotKingPrize = new NoticeContent.WorldKingPrize_NotKing();
            data.System.Enotice_WorldNotKingPrize.Place = br.ReadByte();
            data.System.Enotice_WorldNotKingPrize.PrizeNum = br.ReadByte();
            data.System.Enotice_WorldNotKingPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_WorldNotKingPrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_WorldNotKingPrize.PrizeNum; ++index)
            {
              data.System.Enotice_WorldNotKingPrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_WorldNotKingPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_WorldNotKingPrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_BuyEmoteTreasure)
          {
            data.System.Enotice_BuyEmoteTreasure = new NoticeContent.BuyEmoteTreasure();
            data.System.Enotice_BuyEmoteTreasure.ItemID = br.ReadUInt16();
            data.System.Enotice_BuyEmoteTreasure.ItemNum = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_PrisnerUsePoison)
          {
            data.System.Enotice_PrisnerUsePoison = new NoticeContent.PrisonerUsePoison();
            data.System.Enotice_PrisnerUsePoison.HomeKingdom = br.ReadUInt16();
            data.System.Enotice_PrisnerUsePoison.AllianceTag = br.ReadString();
            data.System.Enotice_PrisnerUsePoison.Name = br.ReadString();
            data.System.Enotice_PrisnerUsePoison.EffectTime = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
          {
            data.System.Enotice_PrisnerPoisonEffect = new NoticeContent.PrisonerPoisonEffect();
            data.System.Enotice_PrisnerPoisonEffect.HomeKingdom = br.ReadUInt16();
            data.System.Enotice_PrisnerPoisonEffect.AllianceTag = br.ReadString();
            data.System.Enotice_PrisnerPoisonEffect.Name = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_BackendActivity)
          {
            data.System.Enotice_BackendActivity = new NoticeContent.BackendActivity();
            data.System.Enotice_BackendActivity.Crystal = br.ReadUInt32();
            data.System.Enotice_BackendActivity.ItemNum = br.ReadByte();
            data.System.Enotice_BackendActivity.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Enotice_BackendActivity.ItemNum];
            for (int index = 0; index < (int) data.System.Enotice_BackendActivity.ItemNum; ++index)
            {
              data.System.Enotice_BackendActivity.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Enotice_BackendActivity.Item[index].ItemID = br.ReadUInt16();
              data.System.Enotice_BackendActivity.Item[index].ItemNum = br.ReadUInt16();
              data.System.Enotice_BackendActivity.Item[index].ItemRank = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
          {
            data.System.Enotice_BuyCastleSkinTreasure = new NoticeContent.BuyCastleSkinreasure();
            data.System.Enotice_BuyCastleSkinTreasure.CastleSkinID = br.ReadUInt16();
            data.System.Enotice_BuyCastleSkinTreasure.ItemID = br.ReadUInt16();
            data.System.Enotice_BuyCastleSkinTreasure.ItemNum = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_FederalRankPrize)
          {
            data.System.Enotice_FederalRankPrize = new NoticeContent.WorldKingPrize_NotKing();
            data.System.Enotice_FederalRankPrize.Place = br.ReadByte();
            data.System.Enotice_FederalRankPrize.PrizeNum = br.ReadByte();
            data.System.Enotice_FederalRankPrize.PrizeData = new NoticeContent.ActPrize[(int) data.System.Enotice_FederalRankPrize.PrizeNum];
            for (byte index = 0; (int) index < (int) data.System.Enotice_FederalRankPrize.PrizeNum; ++index)
            {
              data.System.Enotice_FederalRankPrize.PrizeData[(int) index].Rank = br.ReadByte();
              data.System.Enotice_FederalRankPrize.PrizeData[(int) index].ItemID = br.ReadUInt16();
              data.System.Enotice_FederalRankPrize.PrizeData[(int) index].Num = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_TreasureBackPrize)
          {
            data.System.Enotice_TreasureBackPrize = new NoticeContent.BuyTreasure();
            data.System.Enotice_TreasureBackPrize.Crystal = br.ReadUInt32();
            data.System.Enotice_TreasureBackPrize.BonusCrystal = br.ReadUInt32();
            data.System.Enotice_TreasureBackPrize.Gift = new NoticeContent.TreasureAllianceGift[5];
            for (int index = 0; index < 5; ++index)
            {
              data.System.Enotice_TreasureBackPrize.Gift[index] = new NoticeContent.TreasureAllianceGift();
              data.System.Enotice_TreasureBackPrize.Gift[index].ItemID = br.ReadUInt16();
              data.System.Enotice_TreasureBackPrize.Gift[index].ItemNum = br.ReadUInt16();
            }
            data.System.Enotice_TreasureBackPrize.ItemNum = br.ReadByte();
            data.System.Enotice_TreasureBackPrize.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Enotice_TreasureBackPrize.ItemNum];
            for (int index = 0; index < (int) data.System.Enotice_TreasureBackPrize.ItemNum; ++index)
            {
              data.System.Enotice_TreasureBackPrize.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Enotice_TreasureBackPrize.Item[index].ItemID = br.ReadUInt16();
              data.System.Enotice_TreasureBackPrize.Item[index].ItemNum = br.ReadUInt16();
              data.System.Enotice_TreasureBackPrize.Item[index].ItemRank = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_LookingForStringTable)
          {
            data.System.Enotice_LookingForStringTable = new NoticeContent.LookingForStringTable();
            data.System.Enotice_LookingForStringTable.Title = br.ReadUInt32();
            data.System.Enotice_LookingForStringTable.Content = br.ReadUInt32();
          }
          else if (data.System.Type == NoticeReport.Enotice_MarchingPet_Cancel)
          {
            data.System.Enotice_MarchingPet_Cancel = new NoticeContent.MarchingPet_Cancel();
            data.System.Enotice_MarchingPet_Cancel.HasTarget = br.ReadByte();
            data.System.Enotice_MarchingPet_Cancel.HomeKingdom = br.ReadUInt16();
            data.System.Enotice_MarchingPet_Cancel.AllianceTag = br.ReadString();
            data.System.Enotice_MarchingPet_Cancel.Name = br.ReadString();
            data.System.Enotice_MarchingPet_Cancel.PetID = br.ReadUInt16();
            data.System.Enotice_MarchingPet_Cancel.Skill_ID = br.ReadUInt16();
            data.System.Enotice_MarchingPet_Cancel.Skill_LV = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.ENotice_PetStarUp)
          {
            data.System.ENotice_PetStarUp = new NoticeContent.PetStarUp();
            data.System.ENotice_PetStarUp.PetID = br.ReadUInt16();
            data.System.ENotice_PetStarUp.PetStar = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.ENotice_PrisonerPetSkillEscaped)
          {
            data.System.ENotice_PrisonerPetSkillEscaped = new NoticeContent.PetSkillEscaped();
            data.System.ENotice_PrisonerPetSkillEscaped.PetID = br.ReadUInt16();
            data.System.ENotice_PrisonerPetSkillEscaped.Skill_ID = br.ReadUInt16();
            data.System.ENotice_PrisonerPetSkillEscaped.Skill_LV = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
          {
            data.System.ENotice_LordPetSkillEscaped = new NoticeContent.PetSkillEscaped();
            data.System.ENotice_LordPetSkillEscaped.PetID = br.ReadUInt16();
            data.System.ENotice_LordPetSkillEscaped.Skill_ID = br.ReadUInt16();
            data.System.ENotice_LordPetSkillEscaped.Skill_LV = br.ReadByte();
          }
          else if (data.System.Type == NoticeReport.Enotice_ScoutTargetLeave)
          {
            data.System.Enotice_ScoutTargetLeave = new NoticeContent.MarchTargetLeave();
            data.System.Enotice_ScoutTargetLeave.OffsetLen = data.System.OffsetLen;
            if (data.System.Enotice_ScoutTargetLeave.OffsetLen > 0U)
            {
              data.System.Enotice_ScoutTargetLeave.HomeKingdom = br.ReadUInt16();
              data.System.Enotice_ScoutTargetLeave.AllianceTag = br.ReadString();
              data.System.Enotice_ScoutTargetLeave.Name = br.ReadString();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_AttackTargetLeave)
          {
            data.System.Enotice_AttackTargetLeave = new NoticeContent.MarchTargetLeave();
            data.System.Enotice_AttackTargetLeave.OffsetLen = data.System.OffsetLen;
            if (data.System.Enotice_AttackTargetLeave.OffsetLen > 0U)
            {
              data.System.Enotice_AttackTargetLeave.HomeKingdom = br.ReadUInt16();
              data.System.Enotice_AttackTargetLeave.AllianceTag = br.ReadString();
              data.System.Enotice_AttackTargetLeave.Name = br.ReadString();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_MaintainCompensation)
          {
            data.System.Enotice_MaintainCompensation = new NoticeContent.MaintainCompensation();
            data.System.Enotice_MaintainCompensation.MailTitleStrID = br.ReadUInt16();
            data.System.Enotice_MaintainCompensation.MailContentStrID = br.ReadUInt16();
            data.System.Enotice_MaintainCompensation.Crystal = br.ReadUInt32();
            data.System.Enotice_MaintainCompensation.ItemNum = br.ReadByte();
            data.System.Enotice_MaintainCompensation.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Enotice_MaintainCompensation.ItemNum];
            for (int index = 0; index < (int) data.System.Enotice_MaintainCompensation.ItemNum; ++index)
            {
              data.System.Enotice_MaintainCompensation.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Enotice_MaintainCompensation.Item[index].ItemID = br.ReadUInt16();
              data.System.Enotice_MaintainCompensation.Item[index].ItemNum = br.ReadUInt16();
              data.System.Enotice_MaintainCompensation.Item[index].ItemRank = br.ReadByte();
            }
          }
          else if (data.System.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
          {
            data.System.Enotice_BuyRedPocketTreasure = new NoticeContent.BuyRedPocketTreasure();
            data.System.Enotice_BuyRedPocketTreasure.StringID = br.ReadUInt16();
          }
          else if (data.System.Type == NoticeReport.Enotice_SocialFriendModify)
          {
            data.System.Enotice_SocialFriendModify = new NoticeContent.SocialFriendMail();
            data.System.Enotice_SocialFriendModify.RemoveType = br.ReadByte();
            data.System.Enotice_SocialFriendModify.TargetName = br.ReadString();
            data.System.Enotice_SocialFriendModify.PlayerName = br.ReadString();
            data.System.Enotice_SocialFriendModify.PlayerTag = br.ReadString();
          }
          else if (data.System.Type == NoticeReport.Enotice_ReturnCeremony)
          {
            data.System.Enotice_ReturnCeremony = new NoticeContent.ReturnCeremony();
            data.System.Enotice_ReturnCeremony.Crystal = br.ReadUInt32();
            data.System.Enotice_ReturnCeremony.ItemNum = br.ReadByte();
            data.System.Enotice_ReturnCeremony.Item = new NoticeContent.ComboBoxTBItem[(int) data.System.Enotice_ReturnCeremony.ItemNum];
            for (int index = 0; index < (int) data.System.Enotice_ReturnCeremony.ItemNum; ++index)
            {
              data.System.Enotice_ReturnCeremony.Item[index] = new NoticeContent.ComboBoxTBItem();
              data.System.Enotice_ReturnCeremony.Item[index].ItemID = br.ReadUInt16();
              data.System.Enotice_ReturnCeremony.Item[index].ItemNum = br.ReadUInt16();
              data.System.Enotice_ReturnCeremony.Item[index].ItemRank = br.ReadByte();
            }
          }
        }
      }
    }
    return true;
  }

  public bool LoadFavorMail(MailType MT, bool Force)
  {
    this.DoFavor.Type = MailType.EMAIL_LETTER;
    try
    {
      for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == this.DoFavor.Type)
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) (byte) this.Mailing.FavorSerial.Inbox[(int) index].Type, (object) this.Mailing.FavorSerial.Inbox[(int) index].Serial), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length <= 0L)
              throw new Exception();
            using (BinaryReader br = new BinaryReader((Stream) input))
            {
              if (!this.LoadMail(this.DoFavor, br) || (int) this.DoFavor.Mail.SerialID != (int) this.Mailing.FavorSerial.Inbox[(int) index].Serial)
                throw new Exception();
              this.Mailing.FavorSerial.Mail.Mail[this.Mailing.FavorSerial.Inbox[(int) index].Serial] = this.DoFavor.Mail;
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      this.ClearMail(this.DoFavor.Type);
    }
    this.DoFavor.Type = MailType.EMAIL_BATTLE;
    try
    {
      for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == this.DoFavor.Type)
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) (byte) this.Mailing.FavorSerial.Inbox[(int) index].Type, (object) this.Mailing.FavorSerial.Inbox[(int) index].Serial), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length <= 0L)
              throw new Exception();
            using (BinaryReader br = new BinaryReader((Stream) input))
            {
              if (!this.LoadMail(this.DoFavor, br) || (int) this.DoFavor.Combat.SerialID != (int) this.Mailing.FavorSerial.Inbox[(int) index].Serial)
                throw new Exception();
              this.Mailing.FavorSerial.Combat.Mail[this.Mailing.FavorSerial.Inbox[(int) index].Serial] = this.DoFavor.Combat;
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      this.ClearMail(this.DoFavor.Type);
    }
    this.DoFavor.Type = MailType.EMAIL_SYSTEM;
    try
    {
      for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
      {
        if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == this.DoFavor.Type)
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) (byte) this.Mailing.FavorSerial.Inbox[(int) index].Type, (object) this.Mailing.FavorSerial.Inbox[(int) index].Serial), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length <= 0L)
              throw new Exception();
            using (BinaryReader br = new BinaryReader((Stream) input))
            {
              if (!this.LoadMail(this.DoFavor, br) || (int) this.DoFavor.System.SerialID != (int) this.Mailing.FavorSerial.Inbox[(int) index].Serial)
                throw new Exception();
              this.Mailing.FavorSerial.System.Mail[this.Mailing.FavorSerial.Inbox[(int) index].Serial] = this.DoFavor.System;
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      this.ClearMail(this.DoFavor.Type);
    }
    this.MailDataRefresh(MailType.EMAIL_FAVORY);
    return true;
  }

  public bool LoadSystemMail(MailType MT, bool Force)
  {
    if (!this.Mailing.SystemSerial.Loading)
      return false;
    for (ushort index = 0; (int) index < this.Mailing.SystemSerial.Inbox.Length; ++index)
    {
      if (this.Mailing.SystemSerial.Inbox[(int) index].Serial > 0U)
      {
        try
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) Application.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) this.Mailing.SystemSerial.Inbox[(int) index].Serial, (object) 0), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length > 0L)
            {
              using (BinaryReader br = new BinaryReader((Stream) input))
              {
                this.DoFavor.Type = this.Mailing.SystemSerial.Inbox[(int) index].Type;
                if (this.LoadMail(this.DoFavor, br))
                  this.Mailing.SystemSerial.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
              }
            }
            else
              this.ResetMail();
          }
        }
        catch (Exception ex)
        {
          return false;
        }
      }
    }
    this.Mailing.SystemSerial.Loading = false;
    this.MailDataRefresh(MailType.EMAIL_SYSTEM);
    return true;
  }

  public bool LoadReportMail(MailType MT, bool Force)
  {
    if (!this.Mailing.ReportSerial.Loading)
      return false;
    for (ushort index = 0; (int) index < this.Mailing.ReportSerial.Inbox.Length; ++index)
    {
      if (this.Mailing.ReportSerial.Inbox[(int) index].Serial > 0U)
      {
        try
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) Application.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) this.Mailing.ReportSerial.Inbox[(int) index].Serial, (object) 0), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length > 0L)
            {
              using (BinaryReader br = new BinaryReader((Stream) input))
              {
                this.DoFavor.Type = this.Mailing.ReportSerial.Inbox[(int) index].Type;
                if (this.LoadMail(this.DoFavor, br))
                  this.Mailing.ReportSerial.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
              }
            }
            else
              this.ResetMail();
          }
        }
        catch (Exception ex)
        {
          return false;
        }
      }
    }
    this.Mailing.ReportSerial.Loading = false;
    this.MailDataRefresh(MailType.EMAIL_BATTLE);
    return true;
  }

  public bool LoadMail(MailType MT, bool Force)
  {
    if (!this.Mailing.MailSerial.Loading)
      return false;
    for (ushort index = 0; (int) index < this.Mailing.MailSerial.Inbox.Length; ++index)
    {
      if (this.Mailing.MailSerial.Inbox[(int) index].Serial > 0U)
      {
        try
        {
          using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) Application.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) this.Mailing.MailSerial.Inbox[(int) index].Serial, (object) 0), FileMode.OpenOrCreate, FileAccess.Read))
          {
            if (input.Length > 0L)
            {
              using (BinaryReader br = new BinaryReader((Stream) input))
              {
                this.DoFavor.Type = this.Mailing.MailSerial.Inbox[(int) index].Type;
                if (this.LoadMail(this.DoFavor, br))
                {
                  if (!this.Mailing.MailSerial.Mail.ContainsKey(this.DoFavor.Mail.SerialID) && this.DoFavor.Mail.ReplyID > 0U && this.DoFavor.Mail.MailType == (byte) 0)
                  {
                    SubContent subContent;
                    if (!this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent))
                      this.Mailing.MailSerial.SubMail.Add(this.DoFavor.Mail.ReplyID, subContent = new SubContent());
                    List<uint> uintList;
                    if (!subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList))
                      subContent.Mail.Add(this.DoFavor.Mail.SenderName, uintList = new List<uint>());
                    uintList.Add(this.DoFavor.Mail.SerialID);
                    this.DoFavor.Mail.More = (byte) uintList.Count;
                  }
                  this.Mailing.MailSerial.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
                }
              }
            }
            else
              this.ResetMail();
          }
        }
        catch (Exception ex)
        {
          return false;
        }
      }
    }
    this.Mailing.MailSerial.Loading = this.MIB.Check = false;
    this.MailDataRefresh(MailType.EMAIL_LETTER);
    return true;
  }

  public bool DeleteMail(MailType MT, uint ID)
  {
    MyFavorite MyFavor1 = new MyFavorite(MT, ID);
    if (this.FavorReportGet(ref MyFavor1))
    {
      if (MyFavor1.Type == MailType.EMAIL_SYSTEM)
      {
        if (MyFavor1.System.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
          --this.Mailing.FavorSerial.Select;
        this.DeleteFavorMail(MyFavor1, MyFavor1.Serial, 0U);
        this.Mailing.FavorSerial.Inbox[(int) MyFavor1.System.Index].Serial = 0U;
        this.Mailing.FavorSerial.System.Mail.Remove(MyFavor1.Serial);
      }
      else if (MyFavor1.Type == MailType.EMAIL_BATTLE)
      {
        if (MyFavor1.Combat.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
          --this.Mailing.FavorSerial.Select;
        this.DeleteFavorMail(MyFavor1, MyFavor1.Serial, 0U);
        this.Mailing.FavorSerial.Inbox[(int) MyFavor1.Combat.Index].Serial = 0U;
        this.Mailing.FavorSerial.Combat.Mail.Remove(MyFavor1.Serial);
      }
      else if (MyFavor1.Type == MailType.EMAIL_LETTER)
      {
        if (MyFavor1.Mail.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
          --this.Mailing.FavorSerial.Select;
        this.DeleteFavorMail(MyFavor1, MyFavor1.Serial, 0U);
        this.Mailing.FavorSerial.Inbox[(int) MyFavor1.Mail.Index].Serial = 0U;
        this.Mailing.FavorSerial.Mail.Mail.Remove(MyFavor1.Serial);
      }
      if (this.Mailing.FavorSerial.Count > 0U)
        --this.Mailing.FavorSerial.Count;
    }
    else
    {
      MyFavorite MyFavor2 = new MyFavorite(MT, ID);
      switch (MT)
      {
        case MailType.EMAIL_SYSTEM:
          MyFavor2.Type = MailType.EMAIL_SYSTEM;
          MyFavor2.Kind = MailType.EMAIL_SYSTEM;
          if ((MyFavor2.System = this.SystemReportGet(MyFavor2.Serial)) != null)
          {
            MyFavor2.System.BeKill = true;
            if (MyFavor2.System.BeChecked && this.Outlooking && this.Mailing.SystemSerial.Select > 0U)
              --this.Mailing.SystemSerial.Select;
            this.Mailing.SystemSerial.Inbox[(int) MyFavor2.System.Index].Serial = 0U;
            if (this.Mailing.SystemSerial.Count > 0U)
              --this.Mailing.SystemSerial.Count;
            this.DeleteMail(MyFavor2, MyFavor2.Serial, 0U);
            this.Mailing.SystemSerial.Mail.Remove(MyFavor2.Serial);
            break;
          }
          break;
        case MailType.EMAIL_BATTLE:
          global::CombatReport combatReport;
          if ((combatReport = this.CombatReportGet(MyFavor1.Serial)) != null)
          {
            combatReport.BeKill = true;
            if (combatReport.BeChecked && this.Outlooking && this.Mailing.ReportSerial.Select > 0U)
              --this.Mailing.ReportSerial.Select;
            if (combatReport.Type == CombatCollectReport.CCR_COLLECT)
            {
              MyFavor2.Kind = MailType.EMAIL_BATTLE;
              MyFavor2.Serial = MyFavor1.Serial = this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1];
              for (int count = this.Mailing.ReportSerial.Gather.Count; count > 0; --count)
              {
                if ((int) combatReport.SerialID == (int) this.Mailing.ReportSerial.Gather[count - 1])
                {
                  this.Mailing.ReportSerial.Gather.RemoveAt(count - 1);
                  MyFavor2.Serial = this.Mailing.ReportSerial.Gather.Count <= 0 ? 0U : this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1];
                  break;
                }
              }
              if ((int) MyFavor1.Serial == (int) combatReport.SerialID)
              {
                if (this.MailReportGet(ref MyFavor2))
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = MyFavor2.Combat.SerialID;
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Timing = MyFavor2.Combat.Times;
                }
                else
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = 0U;
                  if (this.Mailing.ReportSerial.Count > 0U)
                    --this.Mailing.ReportSerial.Count;
                }
              }
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Collection, 1);
            }
            else if (combatReport.Type == CombatCollectReport.CCR_RESOURCE)
            {
              MyFavor2.Kind = MailType.EMAIL_BATTLE;
              MyFavor2.Serial = MyFavor1.Serial = this.Mailing.ReportSerial.ResourceID;
              for (int count = this.Mailing.ReportSerial.Resource.Count; count > 0; --count)
              {
                if ((int) combatReport.SerialID == (int) this.Mailing.ReportSerial.Resource[count - 1])
                {
                  this.Mailing.ReportSerial.Resource.RemoveAt(count - 1);
                  MyFavor2.Serial = this.Mailing.ReportSerial.Resource.Count <= 0 ? 0U : this.Mailing.ReportSerial.Resource[this.Mailing.ReportSerial.Resource.Count - 1];
                  break;
                }
              }
              if ((int) MyFavor1.Serial == (int) combatReport.SerialID)
              {
                if (this.MailReportGet(ref MyFavor2))
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = MyFavor2.Combat.SerialID;
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Timing = MyFavor2.Combat.Times;
                }
                else
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = 0U;
                  if (this.Mailing.ReportSerial.Count > 0U)
                    --this.Mailing.ReportSerial.Count;
                }
              }
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Resources, 1);
            }
            else if (combatReport.Type == CombatCollectReport.CCR_RECON)
            {
              MyFavor2.Kind = MailType.EMAIL_BATTLE;
              MyFavor2.Serial = MyFavor1.Serial = this.Mailing.ReportSerial.AntiScoutID;
              for (int count = this.Mailing.ReportSerial.AntiScout.Count; count > 0; --count)
              {
                if ((int) combatReport.SerialID == (int) this.Mailing.ReportSerial.AntiScout[count - 1])
                {
                  this.Mailing.ReportSerial.AntiScout.RemoveAt(count - 1);
                  MyFavor2.Serial = this.Mailing.ReportSerial.AntiScout.Count <= 0 ? 0U : this.Mailing.ReportSerial.AntiScout[this.Mailing.ReportSerial.AntiScout.Count - 1];
                  break;
                }
              }
              if ((int) MyFavor1.Serial == (int) combatReport.SerialID)
              {
                if (this.MailReportGet(ref MyFavor2))
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = MyFavor2.Combat.SerialID;
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Timing = MyFavor2.Combat.Times;
                }
                else
                {
                  this.Mailing.ReportSerial.Inbox[(int) combatReport.Index].Serial = 0U;
                  if (this.Mailing.ReportSerial.Count > 0U)
                    --this.Mailing.ReportSerial.Count;
                }
              }
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower_Recon, 1);
            }
            else
            {
              for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
              {
                if ((int) this.Mailing.ReportSerial.Inbox[index].Serial == (int) combatReport.SerialID)
                {
                  this.Mailing.ReportSerial.Inbox[index].Serial = 0U;
                  if (this.Mailing.ReportSerial.Count > 0U)
                  {
                    --this.Mailing.ReportSerial.Count;
                    break;
                  }
                  break;
                }
              }
            }
            MyFavor2.Kind = MailType.EMAIL_BATTLE;
            this.DeleteMail(MyFavor2, combatReport.SerialID, 0U);
            this.Mailing.ReportSerial.Mail.Remove(combatReport.SerialID);
            break;
          }
          break;
        case MailType.EMAIL_LETTER:
          global::MailContent mailContent;
          if ((mailContent = this.MailReportGet(MyFavor1.Serial)) != null)
          {
            MyFavor2.Kind = MailType.EMAIL_LETTER;
            mailContent.BeKill = true;
            if (mailContent.BeChecked && this.Outlooking && this.Mailing.MailSerial.Select > 0U)
              --this.Mailing.MailSerial.Select;
            SubContent subContent;
            List<uint> uintList;
            if (mailContent.More > (byte) 1)
            {
              if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent.SenderName, out uintList))
              {
                MyFavor1.Serial = uintList[uintList.Count - 1];
                for (int count = uintList.Count; count > 0; --count)
                {
                  if ((int) mailContent.SerialID == (int) uintList[count - 1])
                  {
                    uintList.RemoveAt(count - 1);
                    MyFavor2.Serial = uintList[uintList.Count - 1];
                    if (uintList.Count == 1 && this.Mailing.MailSerial.Mail.TryGetValue(uintList[0], out MyFavor2.Mail))
                    {
                      MyFavor2.Mail.More = (byte) 1;
                      break;
                    }
                    break;
                  }
                }
                if ((int) MyFavor1.Serial == (int) mailContent.SerialID && this.MailReportGet(ref MyFavor2))
                {
                  this.Mailing.MailSerial.Inbox[(int) mailContent.Index].Serial = MyFavor2.Mail.SerialID;
                  this.Mailing.MailSerial.Inbox[(int) mailContent.Index].Timing = MyFavor2.Mail.Times;
                  this.Mailing.MailSerial.Inbox[(int) mailContent.Index].Type = MyFavor2.Kind;
                }
              }
            }
            else
            {
              this.Mailing.MailSerial.Inbox[(int) mailContent.Index].Serial = 0U;
              if (this.Mailing.MailSerial.Count > 0U)
                --this.Mailing.MailSerial.Count;
            }
            if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent.SenderName, out uintList) && uintList.Count == 1 && (int) uintList[0] == (int) mailContent.SerialID)
              subContent.Mail.Remove(mailContent.SenderName);
            this.DeleteMail(MyFavor2, mailContent.SerialID, 0U);
            this.Mailing.MailSerial.Mail.Remove(mailContent.SerialID);
            break;
          }
          break;
      }
    }
    return true;
  }

  public bool LoadMail(MailType MT, uint ID)
  {
    try
    {
      using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) ID, (object) 0), FileMode.OpenOrCreate, FileAccess.Read))
      {
        if (input.Length > 0L)
        {
          using (BinaryReader br = new BinaryReader((Stream) input))
            return this.LoadMail(this.DoFavor, br);
        }
      }
    }
    catch (Exception ex)
    {
      return false;
    }
    return false;
  }

  public bool LoadFavorMail(MailType MT, uint ID)
  {
    try
    {
      using (FileStream input = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) MT, (object) (byte) this.DoFavor.Type, (object) ID), FileMode.OpenOrCreate, FileAccess.Read))
      {
        if (input.Length > 0L)
        {
          using (BinaryReader br = new BinaryReader((Stream) input))
            return this.LoadMail(this.DoFavor, br);
        }
      }
    }
    catch (Exception ex)
    {
      return false;
    }
    return false;
  }

  public bool DeleteMail(MyFavorite Data, uint Serial, uint SubSerial = 0)
  {
    try
    {
      File.Delete(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) Data.Kind, (object) Serial, (object) SubSerial));
    }
    catch (Exception ex)
    {
      return false;
    }
    return true;
  }

  public bool DeleteFavorMail(MyFavorite Data, uint Serial, uint SubSerial = 0)
  {
    try
    {
      File.Delete(string.Format("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) Data.Kind, (object) (byte) Data.Type, (object) Serial));
    }
    catch (Exception ex)
    {
      return false;
    }
    return true;
  }

  public bool SaveMail(MyFavorite Data, uint Serial, uint SubSerial = 0, uint SubType = 0)
  {
    try
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendFormat("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) Data.Type, (object) Serial, (object) SubSerial);
      using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
      {
        using (BinaryWriter bw = new BinaryWriter((Stream) output))
          this.SaveMail(Data, bw);
      }
    }
    catch (Exception ex)
    {
      return false;
    }
    return true;
  }

  public void SaveMail(MyFavorite Data, BinaryWriter bw)
  {
    if (Data.Type == MailType.EMAIL_LETTER)
    {
      bw.Write((byte) 6);
      bw.Write(Data.Mail.SerialID);
      bw.Write(Data.Mail.Flag);
      bw.Write(Data.Mail.Times);
      bw.Write(Data.Mail.MailType);
      bw.Write(Data.Mail.ReplyID);
      bw.Write(Data.Mail.SenderHead);
      bw.Write(Data.Mail.SenderKindom);
      bw.Write(Data.Mail.SenderTag);
      bw.Write(Data.Mail.SenderName);
      bw.Write(Data.Mail.ExtraFlag);
      bw.Write(Data.Mail.TitleLen);
      bw.Write(Data.Mail.ContentLen);
      bw.Write(Data.Mail.AttachNum);
      for (int index = 0; index < 6 && index < (int) Data.Mail.AttachNum; ++index)
      {
        bw.Write(Data.Mail.Attach[index].KingdomID);
        bw.Write(Data.Mail.Attach[index].ZoneID);
        bw.Write(Data.Mail.Attach[index].PointID);
      }
      bw.Write(Data.Mail.Title);
      bw.Write(Data.Mail.Content);
      bw.Write(Data.Mail.LanguageSource);
      bw.Write(Data.Mail.LanguageTarget);
      bw.Write(Data.Mail.Translation);
      bw.Write(Data.Mail.TitleT);
      bw.Write(Data.Mail.ContentT);
    }
    else if (Data.Type == MailType.EMAIL_BATTLE)
    {
      bw.Write((byte) 8);
      bw.Write(Data.Combat.SerialID);
      bw.Write(Data.Combat.Flag);
      bw.Write(Data.Combat.Times);
      bw.Write((byte) Data.Combat.Type);
      if (Data.Combat.Type == CombatCollectReport.CCR_BATTLE)
      {
        bw.Write(Data.Combat.Combat.KingdomID);
        bw.Write(Data.Combat.Combat.CombatlZone);
        bw.Write(Data.Combat.Combat.CombatPoint);
        bw.Write((byte) Data.Combat.Combat.CombatPointKind);
        bw.Write(Data.Combat.Combat.Side);
        bw.Write(Data.Combat.Combat.AssaultKingdomID);
        bw.Write(Data.Combat.Combat.AssaultAllianceTag);
        bw.Write(Data.Combat.Combat.AssaultName);
        bw.Write(Data.Combat.Combat.DefenceKingdomID);
        bw.Write(Data.Combat.Combat.DefenceAllianceTag);
        bw.Write(Data.Combat.Combat.DefenceName);
        bw.Write((byte) Data.Combat.Combat.Result);
        for (int index = 0; index < 5; ++index)
          bw.Write(Data.Combat.Combat.Resource[index]);
        for (int index = 0; index < 5; ++index)
        {
          bw.Write(Data.Combat.Combat.HeroData[index].HeroID);
          bw.Write(Data.Combat.Combat.HeroData[index].Star);
        }
        bw.Write(Data.Combat.Combat.EarnLordExp);
        bw.Write(Data.Combat.Combat.EarnHeroExp);
        bw.Write(Data.Combat.Combat.DetailAutoID);
        bw.Write(Data.Combat.Combat.DetailDbServerID);
        bw.Write(Data.Combat.Combat.AccessKey);
        bw.Write(Data.Combat.Combat.DetailSelfIndex);
        bw.Write((byte) Data.Combat.Combat.CaptureResult);
        bw.Write(Data.Combat.Combat.Summary.AssaultCapitalZone);
        bw.Write(Data.Combat.Combat.Summary.AssaultCapitalPoint);
        bw.Write(Data.Combat.Combat.Summary.AssaultLosePower);
        bw.Write(Data.Combat.Combat.Summary.AssaultTroopForce);
        bw.Write(Data.Combat.Combat.Summary.AssaultTroopInjure);
        bw.Write(Data.Combat.Combat.Summary.AssaultTroopDeath);
        bw.Write(Data.Combat.Combat.Summary.DefenceCapitalZone);
        bw.Write(Data.Combat.Combat.Summary.DefenceCapitalPoint);
        bw.Write(Data.Combat.Combat.Summary.DefenceLosePower);
        bw.Write(Data.Combat.Combat.Summary.DefenceTroopForce);
        bw.Write(Data.Combat.Combat.Summary.DefenceTroopInjure);
        bw.Write(Data.Combat.Combat.Summary.DefenceTroopDeath);
        bw.Write(Data.Combat.Combat.Summary.WallDefence);
        bw.Write(Data.Combat.Combat.Summary.WallDamage);
        bw.Write(Data.Combat.Combat.Summary.TrapNumber);
        bw.Write(Data.Combat.Combat.Summary.LoseTrapNumber);
        bw.Write(Data.Combat.Combat.Summary.SaveTrapNumber);
        bw.Write(Data.Combat.Combat.Summary.AssaultLevel);
        bw.Write(Data.Combat.Combat.Summary.AssaultHead);
        bw.Write(Data.Combat.Combat.Summary.AssaultLordInCombat);
        bw.Write(Data.Combat.Combat.Summary.AssaultVIPLevel);
        bw.Write(Data.Combat.Combat.Summary.IsLeader);
        bw.Write(Data.Combat.Combat.Summary.DefenceLevel);
        bw.Write(Data.Combat.Combat.Summary.DefenceHead);
        bw.Write(Data.Combat.Combat.Summary.DefenceLordInCombat);
        bw.Write(Data.Combat.Combat.Summary.DefenceVIPLevel);
        bw.Write(Data.Combat.Combat.Summary.AssaultAllianceRank);
        bw.Write(Data.Combat.Combat.Summary.DefenceAllianceRank);
        bw.Write(Data.Combat.Combat.Version);
        bw.Write(Data.Combat.Combat.PatchNo);
        bw.Write(Data.Combat.Combat.Atkcoord);
        bw.Write(Data.Combat.Combat.Defcoord);
        bw.Write(Data.Combat.Combat.PetSkillPatchNo);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.Combat.m_AssaultPetSkill_ID[index]);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.Combat.m_AssaultPetSkill_LV[index]);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.Combat.m_DefencePetSkill_ID[index]);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.Combat.m_DefencePetSkill_LV[index]);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_RECON)
      {
        bw.Write(Data.Combat.Recon.KingdomID);
        bw.Write(Data.Combat.Recon.CombatlZone);
        bw.Write(Data.Combat.Recon.CombatPoint);
        bw.Write((byte) Data.Combat.Recon.CombatPointKind);
        bw.Write(Data.Combat.Recon.AntiScout);
        bw.Write(Data.Combat.Recon.WatchLevel);
        bw.Write(Data.Combat.Recon.SrcKingdomID);
        bw.Write(Data.Combat.Recon.SrcName);
        bw.Write(Data.Combat.Recon.SrcAllianceTag);
        bw.Write(Data.Combat.Recon.SrcHead);
        bw.Write(Data.Combat.Recon.bAmbush);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_RESOURCE)
      {
        bw.Write(Data.Combat.Resource.Result);
        bw.Write(Data.Combat.Resource.Name);
        for (int index = 0; index < 5; ++index)
          bw.Write(Data.Combat.Resource.Resource[index]);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_COLLECT)
      {
        bw.Write(Data.Combat.Gather.KingdomID);
        bw.Write(Data.Combat.Gather.GatherZone);
        bw.Write(Data.Combat.Gather.GatherPoint);
        bw.Write((byte) Data.Combat.Gather.GatherPointKind);
        bw.Write(Data.Combat.Gather.GatherPointLevel);
        bw.Write(Data.Combat.Gather.Resource);
        bw.Write(Data.Combat.Gather.HeroNum);
        bw.Write(Data.Combat.Gather.ItemLen);
        bw.Write(Data.Combat.Gather.Item);
        if (Data.Combat.Gather.HeroNum > (byte) 0)
        {
          for (int index = 0; index < (int) Data.Combat.Gather.HeroNum; ++index)
          {
            bw.Write(Data.Combat.Gather.mHero[index].HeroID);
            bw.Write(Data.Combat.Gather.mHero[index].Star);
            bw.Write(Data.Combat.Gather.mHero[index].Exp);
          }
        }
        if (Data.Combat.Gather.ItemLen <= (byte) 0)
          return;
        for (int index = 0; index < Data.Combat.Gather.mResourceItem.Length; ++index)
        {
          bw.Write(Data.Combat.Gather.mResourceItem[index].ItemID);
          bw.Write(Data.Combat.Gather.mResourceItem[index].Quantity);
          bw.Write(Data.Combat.Gather.mResourceItem[index].Rank);
        }
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_SCOUT)
      {
        bw.Write(Data.Combat.Scout.KingdomID);
        bw.Write(Data.Combat.Scout.CombatlZone);
        bw.Write(Data.Combat.Scout.CombatPoint);
        bw.Write((byte) Data.Combat.Scout.CombatPointKind);
        bw.Write(Data.Combat.Scout.ObjKingdomID);
        bw.Write(Data.Combat.Scout.ObjAllianceTag);
        bw.Write(Data.Combat.Scout.ObjName);
        bw.Write(Data.Combat.Scout.ScoutResult);
        bw.Write(Data.Combat.Scout.ScoutLevel);
        bw.Write(Data.Combat.Scout.ScoutContentLen);
        bw.Write(Data.Combat.Scout.ScoutContent);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_MONSTER)
      {
        bw.Write(Data.Combat.Monster.KindgomID);
        bw.Write(Data.Combat.Monster.Zone);
        bw.Write(Data.Combat.Monster.Point);
        bw.Write(Data.Combat.Monster.Result);
        if (Data.Combat.Monster.Result >= (byte) 2 && Data.Combat.Monster.Result <= (byte) 3)
          return;
        bw.Write(Data.Combat.Monster.Head);
        bw.Write(Data.Combat.Monster.MonsterID);
        bw.Write(Data.Combat.Monster.MonsterLv);
        bw.Write(Data.Combat.Monster.BeginHPPercent);
        bw.Write(Data.Combat.Monster.EndHPPercent);
        bw.Write(Data.Combat.Monster.MonsterMaxHP);
        bw.Write(Data.Combat.Monster.Exp);
        for (int index = 0; index < 5; ++index)
          bw.Write(Data.Combat.Monster.HeroID[index]);
        for (int index = 0; index < 5; ++index)
          bw.Write(Data.Combat.Monster.HeroExp[index]);
        for (int index = 0; index < 5; ++index)
        {
          bw.Write(Data.Combat.Monster.HeroData[index].SkillLV1);
          bw.Write(Data.Combat.Monster.HeroData[index].SkillLV2);
          bw.Write(Data.Combat.Monster.HeroData[index].SkillLV3);
          bw.Write(Data.Combat.Monster.HeroData[index].SkillLV4);
          bw.Write(Data.Combat.Monster.HeroData[index].LV);
          bw.Write(Data.Combat.Monster.HeroData[index].Star);
          bw.Write(Data.Combat.Monster.HeroData[index].Enhance);
          bw.Write(Data.Combat.Monster.HeroData[index].Equip);
        }
        bw.Write(Data.Combat.Monster.SequentialDamageTimes);
        bw.Write(Data.Combat.Monster.EffectiveDamageTimes);
        bw.Write(Data.Combat.Monster.AttrScale.ActionTimes);
        bw.Write(Data.Combat.Monster.AttrScale.SequentialDamageScale);
        bw.Write(Data.Combat.Monster.AttrScale.DamageScale);
        bw.Write(Data.Combat.Monster.AttrScale.MaxHPScale);
        bw.Write(Data.Combat.Monster.AttrScale.HealingScale);
        bw.Write(Data.Combat.Monster.AttrScale.InitMP);
        bw.Write(Data.Combat.Monster.RandomSeed);
        bw.Write(Data.Combat.Monster.RandomGap);
        bw.Write(Data.Combat.Monster.Version);
        bw.Write(Data.Combat.Monster.PatchNo);
        if (Data.Combat.Monster.Result < (byte) 2)
        {
          bw.Write(Data.Combat.Monster.ItemLen);
          for (int index = 0; index < (int) Data.Combat.Monster.ItemLen; ++index)
          {
            bw.Write(Data.Combat.Monster.Item[index].ItemID);
            bw.Write(Data.Combat.Monster.Item[index].Num);
            bw.Write(Data.Combat.Monster.Item[index].ItemRank);
          }
        }
        else
          bw.Write(Data.Combat.Monster.AllianceTag);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_NPCCOMBAT)
      {
        bw.Write(Data.Combat.NPCCombat.KingdomID);
        bw.Write(Data.Combat.NPCCombat.CombatlZone);
        bw.Write(Data.Combat.NPCCombat.CombatPoint);
        bw.Write((byte) Data.Combat.NPCCombat.CombatPointKind);
        bw.Write(Data.Combat.NPCCombat.Side);
        bw.Write(Data.Combat.NPCCombat.AssaultKingdomID);
        bw.Write(Data.Combat.NPCCombat.AssaultAllianceTag);
        bw.Write(Data.Combat.NPCCombat.AssaultName);
        bw.Write(Data.Combat.NPCCombat.NPCLevel);
        bw.Write(Data.Combat.NPCCombat.NPCID);
        bw.Write((byte) Data.Combat.NPCCombat.Result);
        bw.Write(Data.Combat.NPCCombat.Reward);
        for (int index = 0; index < Data.Combat.NPCCombat.HeroData.Length; ++index)
        {
          bw.Write(Data.Combat.NPCCombat.HeroData[index].HeroID);
          bw.Write(Data.Combat.NPCCombat.HeroData[index].Star);
        }
        bw.Write(Data.Combat.NPCCombat.EarnLordExp);
        bw.Write(Data.Combat.NPCCombat.EarnHeroExp);
        bw.Write(Data.Combat.NPCCombat.DetailAutoID);
        bw.Write(Data.Combat.NPCCombat.DetailDbServerID);
        bw.Write(Data.Combat.NPCCombat.AccessKey);
        bw.Write(Data.Combat.NPCCombat.DetailSelfIndex);
        bw.Write(Data.Combat.NPCCombat.ResurrextTotal);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultCapitalZone);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultCapitalPoint);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultLosePower);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopForce);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopInjure);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopDeath);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceCapitalZone);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceCapitalPoint);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceLosePower);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopForce);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopInjure);
        bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopDeath);
        bw.Write(Data.Combat.NPCCombat.Summary.WallDefence);
        bw.Write(Data.Combat.NPCCombat.Summary.WallDamage);
        bw.Write(Data.Combat.NPCCombat.Summary.TrapNumber);
        bw.Write(Data.Combat.NPCCombat.Summary.LoseTrapNumber);
        bw.Write(Data.Combat.NPCCombat.Summary.SaveTrapNumber);
        bw.Write(Data.Combat.NPCCombat.Summary.AssaultLevel);
        bw.Write(Data.Combat.NPCCombat.Summary.AssaultHead);
        bw.Write(Data.Combat.NPCCombat.Summary.AssaultLordInCombat);
        bw.Write(Data.Combat.NPCCombat.Summary.AssaultVIPLevel);
        bw.Write(Data.Combat.NPCCombat.Summary.IsLeader);
        bw.Write(Data.Combat.NPCCombat.Summary.AssaultAllianceRank);
        bw.Write(Data.Combat.NPCCombat.Version);
        bw.Write(Data.Combat.NPCCombat.PatchNo);
        bw.Write(Data.Combat.NPCCombat.AssaultArmyCoord);
        bw.Write(Data.Combat.NPCCombat.DefenceArmyCoord);
        bw.Write(Data.Combat.NPCCombat.PetSkillPatchNo);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.NPCCombat.m_AssaultPetSkill_ID[index]);
        for (int index = 0; index < 20; ++index)
          bw.Write(Data.Combat.NPCCombat.m_AssaultPetSkill_LV[index]);
      }
      else if (Data.Combat.Type == CombatCollectReport.CCR_NPCSCOUT)
      {
        bw.Write(Data.Combat.NPCScout.KingdomID);
        bw.Write(Data.Combat.NPCScout.CombatlZone);
        bw.Write(Data.Combat.NPCScout.CombatPoint);
        bw.Write((byte) Data.Combat.NPCScout.CombatPointKind);
        bw.Write(Data.Combat.NPCScout.NPCLevel);
        bw.Write(Data.Combat.NPCScout.NPCID);
        bw.Write(Data.Combat.NPCScout.Reward);
        bw.Write(Data.Combat.NPCScout.ScoutResult);
        bw.Write(Data.Combat.NPCScout.ScoutLevel);
        bw.Write(Data.Combat.NPCScout.ScoutContentLen);
        bw.Write(Data.Combat.NPCScout.ScoutContent);
      }
      else
      {
        if (Data.Combat.Type != CombatCollectReport.CCR_PETREPORT)
          return;
        bw.Write(Data.Combat.Pet.KindgomID);
        bw.Write(Data.Combat.Pet.Zone);
        bw.Write(Data.Combat.Pet.Point);
        bw.Write(Data.Combat.Pet.Kind);
        bw.Write(Data.Combat.Pet.Side);
        bw.Write(Data.Combat.Pet.AssaultKingdomID);
        bw.Write(Data.Combat.Pet.AssaultAllianceTag);
        bw.Write(Data.Combat.Pet.AssaultName);
        bw.Write(Data.Combat.Pet.AssaultCapitalZone);
        bw.Write(Data.Combat.Pet.AssaultCapitalPoint);
        bw.Write(Data.Combat.Pet.AssaultLevel);
        bw.Write(Data.Combat.Pet.AssaultHead);
        bw.Write(Data.Combat.Pet.AssaultVIPLevel);
        bw.Write(Data.Combat.Pet.AssaultAllianceRank);
        bw.Write(Data.Combat.Pet.DefenceKingdomID);
        bw.Write(Data.Combat.Pet.DefenceAllianceTag);
        bw.Write(Data.Combat.Pet.DefenceName);
        bw.Write(Data.Combat.Pet.DefenceCapitalZone);
        bw.Write(Data.Combat.Pet.DefenceCapitalPoint);
        bw.Write(Data.Combat.Pet.DefenceLevel);
        bw.Write(Data.Combat.Pet.DefenceHead);
        bw.Write(Data.Combat.Pet.DefenceVIPLevel);
        bw.Write(Data.Combat.Pet.DefenceAllianceRank);
        bw.Write(Data.Combat.Pet.PatchNo);
        bw.Write(Data.Combat.Pet.PetID);
        bw.Write(Data.Combat.Pet.PetStar);
        bw.Write(Data.Combat.Pet.SkillID);
        bw.Write(Data.Combat.Pet.SkillLevel);
        bw.Write((byte) Data.Combat.Pet.Result);
        for (int index = 0; index < 5; ++index)
          bw.Write(Data.Combat.Pet.Resource[index]);
        bw.Write(Data.Combat.Pet.LostPower);
        bw.Write(Data.Combat.Pet.TotalInjure);
        bw.Write(Data.Combat.Pet.TotalDead);
        for (int index = 0; index < Data.Combat.Pet.InjureTroops.Length; ++index)
          bw.Write(Data.Combat.Pet.InjureTroops[index]);
        for (int index = 0; index < Data.Combat.Pet.DeadTroops.Length; ++index)
          bw.Write(Data.Combat.Pet.DeadTroops[index]);
        bw.Write(Data.Combat.Pet.WallDamage);
      }
    }
    else
    {
      if (Data.Type != MailType.EMAIL_SYSTEM)
        return;
      bw.Write((byte) 7);
      bw.Write(Data.System.SerialID);
      bw.Write(Data.System.Flag);
      bw.Write(Data.System.Times);
      bw.Write((byte) Data.System.Type);
      if (Data.System.Type == NoticeReport.ENotice_Enhance)
      {
        bw.Write(Data.System.NoticeHeroEnhance.HeroID);
        bw.Write(Data.System.NoticeHeroEnhance.Rank);
        bw.Write(Data.System.NoticeHeroEnhance.Star);
      }
      else if (Data.System.Type == NoticeReport.ENotice_StarUp)
      {
        bw.Write(Data.System.NoticeHeroStarUp.HeroID);
        bw.Write(Data.System.NoticeHeroStarUp.Star);
        bw.Write(Data.System.NoticeHeroStarUp.Rank);
      }
      else if (Data.System.Type == NoticeReport.ENotice_JoinAlliance)
      {
        bw.Write(Data.System.Notice_JoinAlliance.Tag);
        bw.Write(Data.System.Notice_JoinAlliance.Name);
      }
      else if (Data.System.Type == NoticeReport.Enotice_ApplyAlliance)
      {
        bw.Write(Data.System.Notice_ApplyAlliance.Tag);
        bw.Write(Data.System.Notice_ApplyAlliance.Name);
      }
      else if (Data.System.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
      {
        bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Dealer);
        bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Tag);
        bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Name);
      }
      else if (Data.System.Type == NoticeReport.Enotice_AllianceDismiss)
        bw.Write(Data.System.Notice_AllianceDismiss.Leader);
      else if (Data.System.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
      {
        bw.Write(Data.System.Notice_AllianceLeaderStepDown.OldLeader);
        bw.Write(Data.System.Notice_AllianceLeaderStepDown.NewLeader);
      }
      else if (Data.System.Type == NoticeReport.Enotice_ActivityDegreePrize)
      {
        bw.Write((byte) Data.System.Notice_ActivityDegreePrize.Type);
        bw.Write(Data.System.Notice_ActivityDegreePrize.Degree);
        bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeNum);
        for (int index = 0; index < (int) Data.System.Notice_ActivityDegreePrize.PrizeNum; ++index)
        {
          bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[index].Rank);
          bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[index].ItemID);
          bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[index].Num);
        }
      }
      else if (Data.System.Type == NoticeReport.Enotice_ActivityRankPrize)
      {
        bw.Write((byte) Data.System.Notice_ActivityRankPrize.Type);
        bw.Write(Data.System.Notice_ActivityRankPrize.Place);
        bw.Write(Data.System.Notice_ActivityRankPrize.PrizeNum);
        for (int index = 0; index < (int) Data.System.Notice_ActivityRankPrize.PrizeNum; ++index)
        {
          bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[index].Rank);
          bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[index].ItemID);
          bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[index].Num);
        }
      }
      else if (Data.System.Type == NoticeReport.Enotice_InviteAlliance)
      {
        bw.Write(Data.System.Notice_InviteAlliance.AllianceID);
        bw.Write(Data.System.Notice_InviteAlliance.InviterName);
        bw.Write(Data.System.Notice_InviteAlliance.Tag);
        bw.Write(Data.System.Notice_InviteAlliance.Name);
      }
      else if (Data.System.Type == NoticeReport.Enotice_SynLordEquip)
      {
        bw.Write(Data.System.Notice_SynLordEquip.ItemID);
        bw.Write(Data.System.Notice_SynLordEquip.Rank);
        bw.Write(Data.System.Notice_SynLordEquip.AddExp);
      }
      else if (Data.System.Type == NoticeReport.Enotice_RallyCancel)
      {
        bw.Write(Data.System.Notice_RallyNotice.HostName);
        bw.Write(Data.System.Notice_RallyNotice.HostTag);
        bw.Write(Data.System.Notice_RallyNotice.TargetName);
        bw.Write(Data.System.Notice_RallyNotice.TargetTag);
      }
      else if (Data.System.Type == NoticeReport.Enotice_CryptFinish)
      {
        bw.Write(Data.System.Notice_CryptNotice.Money);
        bw.Write(Data.System.Notice_CryptNotice.Kind);
        bw.Write(Data.System.Notice_CryptNotice.Level);
      }
      else if (Data.System.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
      {
        bw.Write(Data.System.Notice_AsTargetAlly.HostName);
        bw.Write(Data.System.Notice_AsTargetAlly.HostTag);
        bw.Write(Data.System.Notice_AsTargetAlly.TargetName);
      }
      else if (Data.System.Type == NoticeReport.Enotice_OtherSavedLord)
      {
        bw.Write(Data.System.Notice_OtherSavedLord.HomeKingdom);
        bw.Write(Data.System.Notice_OtherSavedLord.AllianceTag);
        bw.Write(Data.System.Notice_OtherSavedLord.Name);
      }
      else
      {
        if (Data.System.Type == NoticeReport.Enotice_SelfSavedLord)
          return;
        if (Data.System.Type == NoticeReport.Enotice_LordBeingReleased)
        {
          bw.Write(Data.System.Notice_LordBeingReleased.HomeKingdom);
          bw.Write(Data.System.Notice_LordBeingReleased.AllianceTag);
          bw.Write(Data.System.Notice_LordBeingReleased.Name);
        }
        else if (Data.System.Type == NoticeReport.Enotice_LordBeingExecuted)
        {
          bw.Write(Data.System.Notice_LordBeingExecuted.HomeKingdom);
          bw.Write(Data.System.Notice_LordBeingExecuted.AllianceTag);
          bw.Write(Data.System.Notice_LordBeingExecuted.Name);
        }
        else
        {
          if (Data.System.Type == NoticeReport.Enotice_LordEscaped)
            return;
          if (Data.System.Type == NoticeReport.Enotice_OtherBreakPrison)
          {
            bw.Write(Data.System.Notice_OtherBreakPrison.HomeKingdom);
            bw.Write(Data.System.Notice_OtherBreakPrison.AllianceTag);
            bw.Write(Data.System.Notice_OtherBreakPrison.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RescuedPrisoner)
          {
            bw.Write(Data.System.Notice_RescuedPrisoner.HomeKingdom);
            bw.Write(Data.System.Notice_RescuedPrisoner.AllianceTag);
            bw.Write(Data.System.Notice_RescuedPrisoner.Name);
            bw.Write(Data.System.Notice_RescuedPrisoner.PrisonerNum);
            bw.Write(Data.System.Notice_RescuedPrisoner.ClaimReward);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RequestRansom)
            bw.Write(Data.System.Notice_RequestRansom.Ransom);
          else if (Data.System.Type == NoticeReport.Enotice_ReceivedRansom)
            bw.Write(Data.System.Notice_ReceivedRansom.Ransom);
          else if (Data.System.Type == NoticeReport.Enotice_PrisonFull)
          {
            bw.Write(Data.System.Notice_PrisonFull.HomeKingdom);
            bw.Write(Data.System.Notice_PrisonFull.AllianceTag);
            bw.Write(Data.System.Notice_PrisonFull.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_BeQuitAlliance)
          {
            bw.Write(Data.System.Notice_BeQuitAlliance.Dealer);
            bw.Write(Data.System.Notice_BeQuitAlliance.AllianceTag);
            bw.Write(Data.System.Notice_BeQuitAlliance.Alliance);
          }
          else if (Data.System.Type == NoticeReport.Enotice_BuyTreasure)
          {
            bw.Write(Data.System.Notice_BuyTreasure.Crystal);
            bw.Write(Data.System.Notice_BuyTreasure.BonusCrystal);
            for (int index = 0; index < 5; ++index)
            {
              bw.Write(Data.System.Notice_BuyTreasure.Gift[index].ItemID);
              bw.Write(Data.System.Notice_BuyTreasure.Gift[index].ItemNum);
            }
            bw.Write(Data.System.Notice_BuyTreasure.ItemNum);
            for (int index = 0; index < (int) Data.System.Notice_BuyTreasure.ItemNum; ++index)
            {
              bw.Write(Data.System.Notice_BuyTreasure.Item[index].ItemID);
              bw.Write(Data.System.Notice_BuyTreasure.Item[index].ItemNum);
              bw.Write(Data.System.Notice_BuyTreasure.Item[index].ItemRank);
            }
            bw.Write(Data.System.Notice_BuyTreasure.GiftTop);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RallyCancel_Moving)
          {
            bw.Write(Data.System.Notice_RallyNotice_Moving.HostName);
            bw.Write(Data.System.Notice_RallyNotice_Moving.HostTag);
            bw.Write(Data.System.Notice_RallyNotice_Moving.TargetName);
            bw.Write(Data.System.Notice_RallyNotice_Moving.TargetTag);
          }
          else if (Data.System.Type == NoticeReport.Enotice_AtkFailedSelfShield)
          {
            bw.Write(Data.System.Enotice_AtkFailedSelfShield.FailedType);
            bw.Write(Data.System.Enotice_AtkFailedSelfShield.KingdomID);
            bw.Write(Data.System.Enotice_AtkFailedSelfShield.zoneID);
            bw.Write(Data.System.Enotice_AtkFailedSelfShield.pointID);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RecivedGift)
          {
            bw.Write(Data.System.Enotice_RecivedGift.GiftsName);
            bw.Write(Data.System.Enotice_RecivedGift.GiftsTag);
            bw.Write(Data.System.Enotice_RecivedGift.Item.ItemID);
            bw.Write(Data.System.Enotice_RecivedGift.Item.ItemNum);
          }
          else if (Data.System.Type == NoticeReport.Enotice_PrisonAmnestied)
          {
            bw.Write(Data.System.Enotice_PrisonAmnestied.KingsHomeKingdom);
            bw.Write(Data.System.Enotice_PrisonAmnestied.KingdomTag);
            bw.Write(Data.System.Enotice_PrisonAmnestied.KingdomName);
          }
          else if (Data.System.Type == NoticeReport.Enotice_LordBeingAmnestied)
          {
            bw.Write(Data.System.Enotice_LordBeingAmnestied.KingsHomeKingdom);
            bw.Write(Data.System.Enotice_LordBeingAmnestied.KingdomTag);
            bw.Write(Data.System.Enotice_LordBeingAmnestied.KingdomName);
            bw.Write(Data.System.Enotice_LordBeingAmnestied.WardensHomeKingdom);
            bw.Write(Data.System.Enotice_LordBeingAmnestied.Tag);
            bw.Write(Data.System.Enotice_LordBeingAmnestied.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RulerGift)
          {
            bw.Write(Data.System.Enotice_RulerGift.RulerKind);
            bw.Write(Data.System.Enotice_RulerGift.RulerAllianceKingdomID);
            bw.Write(Data.System.Enotice_RulerGift.Tag);
            bw.Write(Data.System.Enotice_RulerGift.Name);
            bw.Write(Data.System.Enotice_RulerGift.GiftKindNum);
            for (int index = 0; index < (int) Data.System.Enotice_RulerGift.GiftKindNum; ++index)
            {
              bw.Write(Data.System.Enotice_RulerGift.Gifts[index].ItemID);
              bw.Write(Data.System.Enotice_RulerGift.Gifts[index].ItemNum);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_DismissAllianceLeader)
          {
            bw.Write(Data.System.Enotice_DismissAllianceLeader.OldLeader);
            bw.Write(Data.System.Enotice_DismissAllianceLeader.NewLeader);
            bw.Write(Data.System.Enotice_DismissAllianceLeader.OffLineDay);
          }
          else if (Data.System.Type == NoticeReport.Enotice_AmbushDefSuccess)
          {
            bw.Write(Data.System.Enotice_AmbushDefSuccess.AmbushName);
            bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom);
            bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag);
            bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerName);
          }
          else if (Data.System.Type == NoticeReport.Enotice_AmbushDefFailed)
          {
            bw.Write(Data.System.Enotice_AmbushDefFailed.AmbushName);
            bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom);
            bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerAllianceTag);
            bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerName);
          }
          else if (Data.System.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
          {
            bw.Write((byte) Data.System.Enotice_ActivityKVKDegreePrize.ActType);
            bw.Write((byte) Data.System.Enotice_ActivityKVKDegreePrize.EventType);
            bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.Degree);
            bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_ActivityKVKDegreePrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
          {
            bw.Write((byte) Data.System.Enotice_ActivityKVKRankPrize.ActType);
            bw.Write((byte) Data.System.Enotice_ActivityKVKRankPrize.EventType);
            bw.Write(Data.System.Enotice_ActivityKVKRankPrize.Place);
            bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_ActivityKVKRankPrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
          {
            bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Crystal);
            bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.BonusCrystal);
            for (int index = 0; index < 5; ++index)
            {
              bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Gift[index].ItemID);
              bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Gift[index].ItemNum);
            }
            bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.ItemNum);
            for (int index = 0; index < (int) Data.System.Enotice_BuyBlackMarketTreasure.ItemNum; ++index)
            {
              bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemID);
              bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemNum);
              bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[index].ItemRank);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_KickOffTeam)
          {
            bw.Write(Data.System.Enotice_KickOffTeam.HostName);
            bw.Write(Data.System.Enotice_KickOffTeam.AllianceTag);
          }
          else if (Data.System.Type == NoticeReport.Enotice_AMRankPrize)
          {
            bw.Write((byte) Data.System.Enotice_AMRankPrize.ActType);
            bw.Write((byte) Data.System.Enotice_AMRankPrize.EventType);
            bw.Write(Data.System.Enotice_AMRankPrize.Place);
            bw.Write(Data.System.Enotice_AMRankPrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_AMRankPrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_AllianceHomeKingdom)
          {
            bw.Write(Data.System.Enotice_AllianceHomeKingdom.AllianceTag);
            bw.Write(Data.System.Enotice_AllianceHomeKingdom.Leader);
            bw.Write(Data.System.Enotice_AllianceHomeKingdom.HomeKingdom);
          }
          else if (Data.System.Type == NoticeReport.Enotice_WorldKingPrize)
          {
            bw.Write(Data.System.Enotice_WorldKingPrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_WorldKingPrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_BackendAddCrystal)
            bw.Write(Data.System.Enotice_BackendAddCrystal.Crystal);
          else if (Data.System.Type == NoticeReport.Enotice_LoginConpensate)
            bw.Write(Data.System.Enotice_LoginConpensate.Crystal);
          else if (Data.System.Type == NoticeReport.Enotice_PurchaseConpensate)
            bw.Write(Data.System.Enotice_PurchaseConpensate.Crystal);
          else if (Data.System.Type == NoticeReport.Enotice_RallyNPCCancel)
          {
            bw.Write(Data.System.Enotice_RallyNPCCancel.HostName);
            bw.Write(Data.System.Enotice_RallyNPCCancel.AllianceTag);
            bw.Write(Data.System.Enotice_RallyNPCCancel.NPCLevel);
            bw.Write(Data.System.Enotice_RallyNPCCancel.NPCID);
          }
          else if (Data.System.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
          {
            bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.HostName);
            bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.AllianceTag);
            bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.NPCLevel);
            bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.NPCID);
          }
          else if (Data.System.Type == NoticeReport.Enotice_LordEquipExpire)
          {
            bw.Write(Data.System.Enotice_LordEquipExpire.ItemID);
            bw.Write(Data.System.Enotice_LordEquipExpire.Rank);
          }
          else if (Data.System.Type == NoticeReport.Enotice_WorldNotKingPrize)
          {
            bw.Write(Data.System.Enotice_WorldNotKingPrize.Place);
            bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_WorldNotKingPrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_BuyEmoteTreasure)
          {
            bw.Write(Data.System.Enotice_BuyEmoteTreasure.ItemID);
            bw.Write(Data.System.Enotice_BuyEmoteTreasure.ItemNum);
          }
          else if (Data.System.Type == NoticeReport.Enotice_PrisnerUsePoison)
          {
            bw.Write(Data.System.Enotice_PrisnerUsePoison.HomeKingdom);
            bw.Write(Data.System.Enotice_PrisnerUsePoison.AllianceTag);
            bw.Write(Data.System.Enotice_PrisnerUsePoison.Name);
            bw.Write(Data.System.Enotice_PrisnerUsePoison.EffectTime);
          }
          else if (Data.System.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
          {
            bw.Write(Data.System.Enotice_PrisnerPoisonEffect.HomeKingdom);
            bw.Write(Data.System.Enotice_PrisnerPoisonEffect.AllianceTag);
            bw.Write(Data.System.Enotice_PrisnerPoisonEffect.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_BackendActivity)
          {
            bw.Write(Data.System.Enotice_BackendActivity.Crystal);
            bw.Write(Data.System.Enotice_BackendActivity.ItemNum);
            for (int index = 0; index < (int) Data.System.Enotice_BackendActivity.ItemNum; ++index)
            {
              bw.Write(Data.System.Enotice_BackendActivity.Item[index].ItemID);
              bw.Write(Data.System.Enotice_BackendActivity.Item[index].ItemNum);
              bw.Write(Data.System.Enotice_BackendActivity.Item[index].ItemRank);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
          {
            bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.CastleSkinID);
            bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.ItemID);
            bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.ItemNum);
          }
          else if (Data.System.Type == NoticeReport.Enotice_FederalRankPrize)
          {
            bw.Write(Data.System.Enotice_FederalRankPrize.Place);
            bw.Write(Data.System.Enotice_FederalRankPrize.PrizeNum);
            for (int index = 0; index < (int) Data.System.Enotice_FederalRankPrize.PrizeNum; ++index)
            {
              bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[index].Rank);
              bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[index].ItemID);
              bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[index].Num);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_TreasureBackPrize)
          {
            bw.Write(Data.System.Enotice_TreasureBackPrize.Crystal);
            bw.Write(Data.System.Enotice_TreasureBackPrize.BonusCrystal);
            for (int index = 0; index < 5; ++index)
            {
              bw.Write(Data.System.Enotice_TreasureBackPrize.Gift[index].ItemID);
              bw.Write(Data.System.Enotice_TreasureBackPrize.Gift[index].ItemNum);
            }
            bw.Write(Data.System.Enotice_TreasureBackPrize.ItemNum);
            for (int index = 0; index < (int) Data.System.Enotice_TreasureBackPrize.ItemNum; ++index)
            {
              bw.Write(Data.System.Enotice_TreasureBackPrize.Item[index].ItemID);
              bw.Write(Data.System.Enotice_TreasureBackPrize.Item[index].ItemNum);
              bw.Write(Data.System.Enotice_TreasureBackPrize.Item[index].ItemRank);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_LookingForStringTable)
          {
            bw.Write(Data.System.Enotice_LookingForStringTable.Title);
            bw.Write(Data.System.Enotice_LookingForStringTable.Content);
          }
          else if (Data.System.Type == NoticeReport.Enotice_MarchingPet_Cancel)
          {
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.HasTarget);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.HomeKingdom);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.AllianceTag);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.Name);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.PetID);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.Skill_ID);
            bw.Write(Data.System.Enotice_MarchingPet_Cancel.Skill_LV);
          }
          else if (Data.System.Type == NoticeReport.ENotice_PetStarUp)
          {
            bw.Write(Data.System.ENotice_PetStarUp.PetID);
            bw.Write(Data.System.ENotice_PetStarUp.PetStar);
          }
          else if (Data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
          {
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.PetID);
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_ID);
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_LV);
          }
          else if (Data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
          {
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.PetID);
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_ID);
            bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_LV);
          }
          else if (Data.System.Type == NoticeReport.Enotice_ScoutTargetLeave)
          {
            bw.Write(Data.System.Enotice_ScoutTargetLeave.OffsetLen);
            if (Data.System.Enotice_ScoutTargetLeave.OffsetLen <= 0U)
              return;
            bw.Write(Data.System.Enotice_ScoutTargetLeave.HomeKingdom);
            bw.Write(Data.System.Enotice_ScoutTargetLeave.AllianceTag);
            bw.Write(Data.System.Enotice_ScoutTargetLeave.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_AttackTargetLeave)
          {
            bw.Write(Data.System.Enotice_AttackTargetLeave.OffsetLen);
            if (Data.System.Enotice_AttackTargetLeave.OffsetLen <= 0U)
              return;
            bw.Write(Data.System.Enotice_AttackTargetLeave.HomeKingdom);
            bw.Write(Data.System.Enotice_AttackTargetLeave.AllianceTag);
            bw.Write(Data.System.Enotice_AttackTargetLeave.Name);
          }
          else if (Data.System.Type == NoticeReport.Enotice_MaintainCompensation)
          {
            bw.Write(Data.System.Enotice_MaintainCompensation.MailTitleStrID);
            bw.Write(Data.System.Enotice_MaintainCompensation.MailContentStrID);
            bw.Write(Data.System.Enotice_MaintainCompensation.Crystal);
            bw.Write(Data.System.Enotice_MaintainCompensation.ItemNum);
            for (int index = 0; index < (int) Data.System.Enotice_MaintainCompensation.ItemNum; ++index)
            {
              bw.Write(Data.System.Enotice_MaintainCompensation.Item[index].ItemID);
              bw.Write(Data.System.Enotice_MaintainCompensation.Item[index].ItemNum);
              bw.Write(Data.System.Enotice_MaintainCompensation.Item[index].ItemRank);
            }
          }
          else if (Data.System.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
            bw.Write(Data.System.Enotice_BuyRedPocketTreasure.StringID);
          else if (Data.System.Type == NoticeReport.Enotice_SocialFriendModify)
          {
            bw.Write(Data.System.Enotice_SocialFriendModify.RemoveType);
            bw.Write(Data.System.Enotice_SocialFriendModify.TargetName);
            bw.Write(Data.System.Enotice_SocialFriendModify.PlayerName);
            bw.Write(Data.System.Enotice_SocialFriendModify.PlayerTag);
          }
          else
          {
            if (Data.System.Type != NoticeReport.Enotice_ReturnCeremony)
              return;
            bw.Write(Data.System.Enotice_ReturnCeremony.Crystal);
            bw.Write(Data.System.Enotice_ReturnCeremony.ItemNum);
            for (int index = 0; index < (int) Data.System.Enotice_ReturnCeremony.ItemNum; ++index)
            {
              bw.Write(Data.System.Enotice_ReturnCeremony.Item[index].ItemID);
              bw.Write(Data.System.Enotice_ReturnCeremony.Item[index].ItemNum);
              bw.Write(Data.System.Enotice_ReturnCeremony.Item[index].ItemRank);
            }
          }
        }
      }
    }
  }

  public bool SaveFavoriteMail(MyFavorite Data, uint Serial)
  {
    try
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendFormat("{0}/Data/{1}/{2}{3}-{4}", (object) AssetManager.persistentDataPath, (object) NetworkManager.UserID, (object) Data.Kind, (object) (byte) Data.Type, (object) Serial);
      using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
      {
        using (BinaryWriter bw = new BinaryWriter((Stream) output))
          this.SaveMail(Data, bw);
      }
    }
    catch (Exception ex)
    {
      return false;
    }
    return true;
  }

  public bool UpdateMailData(bool Force = true)
  {
    if ((double) NetworkManager.SynchTime >= 1.0 || Force)
    {
      for (int index = 0; index < (!Force ? 1 : 30); ++index)
      {
        if (this.Mailing.MailSerial.Saviour.Count > 0)
        {
          this.DoFavor.Type = this.DoFavor.Kind = MailType.EMAIL_LETTER;
          if (this.Mailing.MailSerial.Saviour[0].IsFavorite > (byte) 0)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Saviour[0].Id, out this.DoFavor.Mail))
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
          }
          else if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Saviour[0].Id, out this.DoFavor.Mail))
            this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0U, 0U);
          this.Mailing.MailSerial.Saviour.RemoveAt(0);
        }
        if (this.Mailing.SystemSerial.Order.Count > 0)
        {
          this.DoFavor.Type = this.DoFavor.Kind = MailType.EMAIL_SYSTEM;
          if (this.Mailing.SystemSerial.Order[0].IsFavorite > (byte) 0)
          {
            if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System) && !this.DoFavor.System.BeKept)
            {
              this.DoFavor.Kind = MailType.EMAIL_FAVORY;
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.System.SerialID);
              this.DoFavor.System.BeKept = true;
              ++this.Mailing.SystemSerial.HoldSave;
            }
          }
          else if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System) && !this.DoFavor.System.BeKept)
          {
            this.SaveMail(this.DoFavor, this.DoFavor.System.SerialID, 0U, 0U);
            this.DoFavor.System.BeKept = true;
            ++this.Mailing.SystemSerial.HoldSave;
          }
          else if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System))
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.System.SerialID);
            this.DoFavor.System.BeKept = true;
            ++this.Mailing.SystemSerial.HoldSave;
          }
          if (this.Mailing.SystemSerial.LastSave == 0U)
            this.Mailing.SystemSerial.HoldSave = 50U;
          this.Mailing.SystemSerial.LastSave = this.Mailing.SystemSerial.Order[0].Id;
          if (this.Mailing.SystemSerial.HoldSave > 10U)
          {
            this.SaveMail(this.DoFavor.Type);
            this.Mailing.SystemSerial.HoldSave = 0U;
          }
          this.Mailing.SystemSerial.Order.RemoveAt(0);
        }
        else if (this.Mailing.SystemSerial.HoldSave > 0U)
        {
          this.SaveMail(MailType.EMAIL_SYSTEM);
          this.Mailing.SystemSerial.HoldSave = 0U;
        }
        if (this.Mailing.MailSerial.Order.Count > 0)
        {
          this.DoFavor.Type = this.DoFavor.Kind = MailType.EMAIL_LETTER;
          if (this.Mailing.MailSerial.Order[0].IsFavorite > (byte) 0)
          {
            if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
            {
              this.DoFavor.Kind = MailType.EMAIL_FAVORY;
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
              this.DoFavor.Mail.BeKept = true;
              ++this.Mailing.MailSerial.HoldSave;
            }
          }
          else if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
          {
            this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0U, 0U);
            this.DoFavor.Mail.BeKept = true;
            ++this.Mailing.MailSerial.HoldSave;
          }
          else if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
            this.DoFavor.Mail.BeKept = true;
            ++this.Mailing.MailSerial.HoldSave;
          }
          if (this.Mailing.MailSerial.LastSave == 0U)
            this.Mailing.MailSerial.HoldSave = 100U;
          this.Mailing.MailSerial.LastSave = this.Mailing.MailSerial.Order[0].Id;
          if (this.Mailing.MailSerial.HoldSave > 10U)
          {
            this.SaveMail(this.DoFavor.Type);
            this.Mailing.MailSerial.HoldSave = 0U;
          }
          this.Mailing.MailSerial.Order.RemoveAt(0);
        }
        else if (this.Mailing.MailSerial.HoldSave > 0U)
        {
          this.SaveMail(MailType.EMAIL_LETTER);
          this.Mailing.MailSerial.HoldSave = 0U;
        }
        if (this.Mailing.ReportSerial.Order.Count > 0)
        {
          this.DoFavor.Type = this.DoFavor.Kind = MailType.EMAIL_BATTLE;
          if (this.Mailing.ReportSerial.Order[0].IsFavorite > (byte) 0)
          {
            if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
            {
              this.DoFavor.Kind = MailType.EMAIL_FAVORY;
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Combat.SerialID);
              this.DoFavor.Combat.BeKept = true;
              ++this.Mailing.ReportSerial.HoldSave;
            }
          }
          else if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
          {
            this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0U, 0U);
            this.DoFavor.Combat.BeKept = true;
            ++this.Mailing.ReportSerial.HoldSave;
          }
          else if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Combat.SerialID);
            this.DoFavor.Combat.BeKept = true;
            ++this.Mailing.ReportSerial.HoldSave;
          }
          if (this.Mailing.ReportSerial.LastSave == 0U)
            this.Mailing.ReportSerial.HoldSave = 400U;
          this.Mailing.ReportSerial.LastSave = this.Mailing.ReportSerial.Order[0].Id;
          if (this.Mailing.ReportSerial.HoldSave > 10U)
          {
            this.SaveMail(this.DoFavor.Type);
            this.Mailing.ReportSerial.HoldSave = 0U;
          }
          this.Mailing.ReportSerial.Order.RemoveAt(0);
        }
        else
        {
          if (this.Mailing.ReportSerial.HoldSave <= 0U)
            return true;
          this.SaveMail(MailType.EMAIL_BATTLE);
          this.Mailing.ReportSerial.HoldSave = 0U;
        }
      }
    }
    if (this.MailTranslation.Serial > 0U && this.MIB.Serial == 0U)
    {
      if (this.MySysSetting.bAutoTranslate && IGGGameSDK.Instance.GetTranslateStatus())
      {
        if (this.MailTranslation.Kind == MailType.EMAIL_FAVORY)
        {
          if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.MailTranslation.Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.MailType != (byte) 2 && (GameLanguage) this.DoFavor.Mail.LanguageTarget != this.UserLanguage)
          {
            CString cstring1 = StringManager.Instance.StaticString1024();
            CString cstring2 = StringManager.Instance.StaticString1024();
            if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
            {
              cstring1.Append(this.DoFavor.Mail.Title);
              DataManager.MailData.Add(cstring1);
            }
            if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
            {
              cstring2.Append(this.DoFavor.Mail.Content);
              DataManager.MailData.Add(cstring2);
            }
            if (DataManager.MailData.Count > 0)
            {
              IGGGameSDK.Instance.TranslateBatchByList_Mail(DataManager.MailData);
              this.DoFavor.Mail.LanguageSent = (byte) this.UserLanguage;
              this.MIB.Serial = this.DoFavor.Mail.SerialID;
              this.MIB.Kind = MailType.EMAIL_FAVORY;
              DataManager.MailData.Clear();
              return true;
            }
            this.DoFavor.Mail.LanguageTarget = (byte) this.UserLanguage;
          }
        }
        else if (this.Mailing.MailSerial.Mail.TryGetValue(this.MailTranslation.Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.MailType != (byte) 2 && (GameLanguage) this.DoFavor.Mail.LanguageTarget != this.UserLanguage)
        {
          CString cstring3 = StringManager.Instance.StaticString1024();
          CString cstring4 = StringManager.Instance.StaticString1024();
          if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
          {
            cstring3.Append(this.DoFavor.Mail.Title);
            DataManager.MailData.Add(cstring3);
          }
          if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
          {
            cstring4.Append(this.DoFavor.Mail.Content);
            DataManager.MailData.Add(cstring4);
          }
          if (DataManager.MailData.Count > 0)
          {
            IGGGameSDK.Instance.TranslateBatchByList_Mail(DataManager.MailData);
            this.DoFavor.Mail.LanguageSent = (byte) this.UserLanguage;
            this.MIB.Serial = this.DoFavor.Mail.SerialID;
            this.MIB.Kind = MailType.EMAIL_LETTER;
            DataManager.MailData.Clear();
            return true;
          }
          this.DoFavor.Mail.LanguageTarget = (byte) this.UserLanguage;
        }
      }
    }
    else if (this.MIB.Change)
    {
      if (this.MIB.Kind == MailType.EMAIL_FAVORY && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.MIB.Serial, out this.DoFavor.Mail) || this.Mailing.MailSerial.Mail.TryGetValue(this.MIB.Serial, out this.DoFavor.Mail))
      {
        if (this.MIB.Read)
        {
          this.DoFavor.Mail.Translation = this.DoFavor.Mail.TranslationError = false;
          if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
          {
            CString cstring5 = StringManager.Instance.StaticString1024();
            int index;
            for (index = 0; index < IGGGameSDK.Instance.TranslateString_Mail[0].Length && IGGGameSDK.Instance.TranslateString_Mail[0][index] != '\u007F'; ++index)
              cstring5.Append(IGGGameSDK.Instance.TranslateString_Mail[0][index]);
            cstring5.SetLength(cstring5.Length);
            this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring5.ToString());
            cstring5.SetLength(cstring5.MaxLength);
            cstring5.Length = 0;
            cstring5.Substring(IGGGameSDK.Instance.TranslateString_Mail[0], index + 1);
            cstring5.CheckBannedWord();
            this.DoFavor.Mail.Translation = true;
            CString cstring6 = new CString(cstring5.Length);
            cstring6.Append(cstring5);
            this.DoFavor.Mail.TitleT = cstring6.ToString();
          }
          if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
          {
            if (!this.DoFavor.Mail.Translation)
            {
              CString cstring7 = StringManager.Instance.StaticString1024();
              int index;
              for (index = 0; index < IGGGameSDK.Instance.TranslateString_Mail[0].Length && IGGGameSDK.Instance.TranslateString_Mail[0][index] != '\u007F'; ++index)
                cstring7.Append(IGGGameSDK.Instance.TranslateString_Mail[0][index]);
              cstring7.SetLength(cstring7.Length);
              this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring7.ToString());
              cstring7.SetLength(cstring7.MaxLength);
              cstring7.Length = 0;
              cstring7.Substring(IGGGameSDK.Instance.TranslateString_Mail[0], index + 1);
              cstring7.CheckBannedWord();
              this.DoFavor.Mail.Translation = true;
              CString cstring8 = new CString(cstring7.Length);
              cstring8.Append(cstring7);
              this.DoFavor.Mail.ContentT = cstring8.ToString();
            }
            else
            {
              CString cstring9 = StringManager.Instance.StaticString1024();
              int index;
              for (index = 0; index < IGGGameSDK.Instance.TranslateString_Mail[1].Length && IGGGameSDK.Instance.TranslateString_Mail[1][index] != '\u007F'; ++index)
                cstring9.Append(IGGGameSDK.Instance.TranslateString_Mail[1][index]);
              cstring9.SetLength(cstring9.Length);
              this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring9.ToString());
              cstring9.SetLength(cstring9.MaxLength);
              cstring9.Length = 0;
              cstring9.Substring(IGGGameSDK.Instance.TranslateString_Mail[1], index + 1);
              cstring9.CheckBannedWord();
              this.DoFavor.Mail.Translation = true;
              CString cstring10 = new CString(cstring9.Length);
              cstring10.Append(cstring9);
              this.DoFavor.Mail.ContentT = cstring10.ToString();
            }
          }
          this.DoFavor.Mail.LanguageTarget = this.DoFavor.Mail.LanguageSent;
          this.DoFavor.Mail.Translation = true;
          this.DoFavor.Mail.BeKept = true;
          this.DoFavor.Kind = this.MIB.Kind;
          if (this.DoFavor.Mail.BeSave)
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
          else
            this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0U, 0U);
        }
        else
          this.DoFavor.Mail.TranslationError = true;
      }
      this.MIB.Change = false;
      DataManager.msgBuffer[0] = this.MailTranslation.Serial <= 0U ? (byte) 0 : (byte) 1;
      DataManager.msgBuffer[1] = !this.MIB.Read ? (byte) 1 : (byte) 0;
      DataManager.msgBuffer[2] = (byte) this.MIB.Kind;
      GameConstants.GetBytes(this.MIB.Serial, DataManager.msgBuffer, 3);
      this.MailTranslation.Serial = this.MIB.Serial = 0U;
      GameManager.OnRefresh(NetworkNews.Refresh_Letter, DataManager.msgBuffer);
    }
    return false;
  }

  public void SaveMailData(Protocol Protocol = Protocol._MSG_RESP_MAILINFO)
  {
    switch (Protocol)
    {
      case Protocol._MSG_RESP_MAILMETA:
        this.Mailing.MailSerial.Metalog = true;
        break;
      case Protocol._MSG_RESP_REPORTMETA:
        this.Mailing.ReportSerial.Metalog = true;
        break;
      case Protocol._MSG_RESP_SAVEMAILMETA:
        this.Mailing.FavorSerial.Metalog = true;
        break;
      case Protocol._MSG_RESP_NOTICEMETA:
        this.Mailing.SystemSerial.Metalog = true;
        break;
      case Protocol._MSG_RESP_MAILINFOEND:
        this.MIB.Check = false;
        this.Mailing.MailSerial.Infolog = true;
        if (this.Mailing.MailSerial.Total != 0U || this.Mailing.MailSerial.Order.Count != 0)
          break;
        this.Mailing.MailSerial.LastSave = this.Mailing.MailSerial.Fetch;
        this.Mailing.MailSerial.New = this.Mailing.MailSerial.Max;
        this.SaveMail(MailType.EMAIL_LETTER);
        break;
      case Protocol._MSG_RESP_REPORINFOEND:
        this.Mailing.ReportSerial.Infolog = true;
        if (this.Mailing.ReportSerial.Total != 0U || this.Mailing.ReportSerial.Order.Count != 0)
          break;
        this.Mailing.ReportSerial.LastSave = this.Mailing.ReportSerial.Fetch;
        this.Mailing.ReportSerial.New = this.Mailing.ReportSerial.Max;
        this.SaveMail(MailType.EMAIL_BATTLE);
        break;
      case Protocol._MSG_RESP_NOTICEINFOEND:
        this.Mailing.SystemSerial.Infolog = true;
        if (this.Mailing.SystemSerial.Total != 0U || this.Mailing.SystemSerial.Order.Count != 0)
          break;
        this.Mailing.SystemSerial.LastSave = this.Mailing.SystemSerial.Fetch;
        this.Mailing.SystemSerial.New = this.Mailing.SystemSerial.Max;
        this.SaveMail(MailType.EMAIL_SYSTEM);
        break;
    }
  }

  public bool SaveData<T>(ref T Data, string Name)
  {
    try
    {
      Directory.CreateDirectory(string.Format("{0}/Data/{1}", (object) Application.persistentDataPath, (object) Name.Substring(0, Math.Max(Name.LastIndexOf("/"), 0))));
      using (FileStream serializationStream = new FileStream(string.Format("{0}/Data/{1}", (object) Application.persistentDataPath, (object) Name), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
      {
        if ((object) Data != null)
        {
          Environment.SetEnvironmentVariable("MONO_REFLECTION_SERIALIZER", "yes");
          this.BF.Binder = (SerializationBinder) new DataManager.SerialKiller();
          this.BF.Serialize((Stream) serializationStream, (object) Data);
          return true;
        }
        serializationStream.SetLength(0L);
        return false;
      }
    }
    catch (Exception ex)
    {
      return false;
    }
  }

  public bool LoadData<T>(ref T Data, string Name)
  {
    Directory.CreateDirectory(string.Format("{0}/Data/{1}", (object) Application.persistentDataPath, (object) Name.Substring(0, Math.Max(Name.LastIndexOf("/"), 0))));
    using (FileStream serializationStream = new FileStream(string.Format("{0}/Data/{1}", (object) Application.persistentDataPath, (object) Name), FileMode.OpenOrCreate, FileAccess.Read))
    {
      if (serializationStream.Length > 0L)
      {
        Environment.SetEnvironmentVariable("MONO_REFLECTION_SERIALIZER", "yes");
        try
        {
          this.BF.Binder = (SerializationBinder) new DataManager.SerialKiller();
          Data = (T) this.BF.UnsafeDeserialize((Stream) serializationStream, (HeaderHandler) null);
        }
        catch (Exception ex)
        {
          return false;
        }
        return true;
      }
    }
    return false;
  }

  public unsafe void RecvMailing(MessagePacket MP)
  {
    Protocol protocol = MP.Protocol;
    switch (protocol)
    {
      case Protocol._MSG_RESP_MAILMETA:
        this.Mailing.MailSerial.SerialNumber = (uint) MP.ReadByte();
        this.Mailing.MailSerial.Caliber.Clear();
        this.Mailing.MailSerial.SID.Clear();
        this.Mailing.MailSerial.Last = 0U;
        for (int index = 0; (long) index < (long) this.Mailing.MailSerial.SerialNumber; ++index)
        {
          uint key = MP.ReadUInt();
          byte num = MP.ReadByte();
          SerialBox val = new SerialBox();
          val.Serial = key;
          val.Flag = num;
          val.Read = ((int) num & 1) > 0;
          val.Save = ((int) num & 2) > 0;
          this.Mailing.MailSerial.SID.Add(key, val);
          SerialBox serialBox;
          if (!this.Mailing.MailSerial.Matrix.TryGetValue(key, out serialBox) || this.Mailing.Refresh && !serialBox.Pull)
          {
            this.Mailing.MailSerial.Matrix[key] = val;
            this.Mailing.MailSerial.Caliber.Add(key);
          }
        }
        this.Mailing.FavorSerial.Mail.Unread = this.Mailing.MailSerial.Unread = 0U;
        this.Mailing.MailSerial.Total = this.Mailing.FavorSerial.Mail.Total = 0U;
        List<uint> uintList1 = new List<uint>();
        foreach (SerialBox serialBox1 in this.Mailing.MailSerial.Matrix.Values)
        {
          SerialBox serialBox2 = this.Mailing.MailSerial.SID.Find(serialBox1.Serial);
          if (serialBox2 != null)
          {
            if (serialBox1.Pull)
            {
              if (serialBox2.Save != serialBox1.Save)
              {
                this.DeleteMail(MailType.EMAIL_LETTER, serialBox1.Serial);
                this.Mailing.MailSerial.Caliber.Add(serialBox1.Serial);
                serialBox1.Save = serialBox2.Save;
                serialBox1.Read = serialBox2.Read;
                serialBox1.Flag = serialBox2.Flag;
                serialBox1.Pull = false;
                serialBox1.Keep = false;
              }
              else if (serialBox2.Read != serialBox1.Read && this.Mailing.MailSerial.Mail.TryGetValue(serialBox2.Serial, out this.DoFavor.Mail))
              {
                serialBox1.Flag = serialBox2.Flag;
                this.DoFavor.Mail.Flag = serialBox2.Flag;
                this.DoFavor.Mail.BeRead = serialBox2.Read;
                this.DoFavor.Type = MailType.EMAIL_LETTER;
                this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0U, 0U);
              }
            }
          }
          else
          {
            this.DeleteMail(MailType.EMAIL_LETTER, serialBox1.Serial);
            uintList1.Add(serialBox1.Serial);
          }
        }
        foreach (uint key in uintList1)
          this.Mailing.MailSerial.Matrix.Remove(key);
        if (uintList1.Count > 0)
          uintList1.Clear();
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        break;
      case Protocol._MSG_RESP_REPORTMETA:
        this.Mailing.ReportSerial.SerialNumber = (uint) MP.ReadByte();
        this.Mailing.ReportSerial.Caliber.Clear();
        this.Mailing.ReportSerial.SID.Clear();
        this.Mailing.ReportSerial.Last = 0U;
        for (int index = 0; (long) index < (long) this.Mailing.ReportSerial.SerialNumber; ++index)
        {
          uint key = MP.ReadUInt();
          byte num = MP.ReadByte();
          SerialBox val = new SerialBox();
          val.Serial = key;
          val.Flag = num;
          val.Read = ((int) num & 1) > 0;
          val.Save = ((int) num & 2) > 0;
          val.Type = MP.ReadByte();
          this.Mailing.ReportSerial.SID.Add(key, val);
          SerialBox serialBox;
          if (!this.Mailing.ReportSerial.Matrix.TryGetValue(key, out serialBox) || this.Mailing.Refresh && !serialBox.Pull)
          {
            this.Mailing.ReportSerial.Matrix[key] = val;
            this.Mailing.ReportSerial.Caliber.Add(key);
          }
        }
        this.Mailing.FavorSerial.System.Unread = this.Mailing.ReportSerial.Unread = 0U;
        this.Mailing.ReportSerial.Total = this.Mailing.FavorSerial.System.Total = 0U;
        List<uint> uintList2 = new List<uint>();
        foreach (SerialBox serialBox3 in this.Mailing.ReportSerial.Matrix.Values)
        {
          SerialBox serialBox4 = this.Mailing.ReportSerial.SID.Find(serialBox3.Serial);
          if (serialBox4 != null)
          {
            if (serialBox3.Pull)
            {
              if (serialBox4.Save != serialBox3.Save)
              {
                this.DeleteMail(MailType.EMAIL_BATTLE, serialBox3.Serial);
                this.Mailing.ReportSerial.Caliber.Add(serialBox3.Serial);
                serialBox3.Save = serialBox4.Save;
                serialBox3.Read = serialBox4.Read;
                serialBox3.Flag = serialBox4.Flag;
                serialBox3.Pull = false;
                serialBox3.Keep = false;
              }
              else if (serialBox4.Read != serialBox3.Read && this.Mailing.ReportSerial.Mail.TryGetValue(serialBox4.Serial, out this.DoFavor.Combat))
              {
                serialBox3.Flag = serialBox4.Flag;
                this.DoFavor.Combat.Flag = serialBox4.Flag;
                this.DoFavor.Combat.BeRead = serialBox4.Read;
                this.DoFavor.Type = MailType.EMAIL_BATTLE;
                this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0U, 0U);
              }
            }
          }
          else
          {
            this.DeleteMail(MailType.EMAIL_BATTLE, serialBox3.Serial);
            uintList2.Add(serialBox3.Serial);
          }
        }
        foreach (uint key in uintList2)
          this.Mailing.ReportSerial.Matrix.Remove(key);
        if (uintList2.Count > 0)
          uintList2.Clear();
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        break;
      case Protocol._MSG_RESP_SAVEMAILMETA:
        this.Mailing.FavorSerial.Total = (uint) MP.ReadByte();
        this.Mailing.FavorSerial.Unread = (uint) MP.ReadByte();
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        this.SaveMailData(MP.Protocol);
        break;
      case Protocol._MSG_RESP_NOTICEMETA:
        this.Mailing.SystemSerial.SerialNumber = (uint) MP.ReadByte();
        this.Mailing.SystemSerial.Caliber.Clear();
        this.Mailing.SystemSerial.SID.Clear();
        this.Mailing.SystemSerial.Last = 0U;
        for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.SerialNumber; ++index)
        {
          uint key = MP.ReadUInt();
          byte num = MP.ReadByte();
          SerialBox val = new SerialBox();
          val.Serial = key;
          val.Flag = num;
          val.Read = ((int) num & 1) > 0;
          val.Save = ((int) num & 2) > 0;
          this.Mailing.SystemSerial.SID.Add(key, val);
          SerialBox serialBox;
          if (!this.Mailing.SystemSerial.Matrix.TryGetValue(key, out serialBox) || this.Mailing.Refresh && !serialBox.Pull)
          {
            this.Mailing.SystemSerial.Matrix[key] = val;
            this.Mailing.SystemSerial.Caliber.Add(key);
          }
        }
        this.Mailing.FavorSerial.System.Unread = this.Mailing.SystemSerial.Unread = 0U;
        this.Mailing.SystemSerial.Total = this.Mailing.FavorSerial.System.Total = 0U;
        List<uint> uintList3 = new List<uint>();
        foreach (SerialBox serialBox5 in this.Mailing.SystemSerial.Matrix.Values)
        {
          SerialBox serialBox6 = this.Mailing.SystemSerial.SID.Find(serialBox5.Serial);
          if (serialBox6 != null)
          {
            if (serialBox5.Pull)
            {
              if (serialBox6.Save != serialBox5.Save)
              {
                this.DeleteMail(MailType.EMAIL_SYSTEM, serialBox5.Serial);
                this.Mailing.SystemSerial.Caliber.Add(serialBox5.Serial);
                serialBox5.Save = serialBox6.Save;
                serialBox5.Read = serialBox6.Read;
                serialBox5.Flag = serialBox6.Flag;
                serialBox5.Pull = false;
                serialBox5.Keep = false;
              }
              else if (serialBox6.Read != serialBox5.Read && this.Mailing.SystemSerial.Mail.TryGetValue(serialBox6.Serial, out this.DoFavor.System))
              {
                serialBox5.Flag = serialBox6.Flag;
                this.DoFavor.System.Flag = serialBox6.Flag;
                this.DoFavor.System.BeRead = serialBox6.Read;
                this.DoFavor.Type = MailType.EMAIL_SYSTEM;
                this.SaveMail(this.DoFavor, this.DoFavor.System.SerialID, 0U, 0U);
              }
            }
          }
          else
          {
            this.DeleteMail(MailType.EMAIL_SYSTEM, serialBox5.Serial);
            uintList3.Add(serialBox5.Serial);
          }
        }
        foreach (uint key in uintList3)
          this.Mailing.SystemSerial.Matrix.Remove(key);
        if (uintList3.Count > 0)
          uintList3.Clear();
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        break;
      case Protocol._MSG_RESP_MAILINFO:
        global::MailContent mailContent1 = new global::MailContent();
        mailContent1.SerialID = this.Mailing.MailSerial.New = MP.ReadUInt();
        mailContent1.SetData(MP.ReadByte(), MP.ReadLong());
        mailContent1.TitleT = mailContent1.ContentT = string.Empty;
        mailContent1.MailType = MP.ReadByte();
        mailContent1.ReplyID = MP.ReadUInt();
        mailContent1.SenderHead = MP.ReadUShort();
        mailContent1.SenderKindom = MP.ReadUShort();
        mailContent1.SenderTag = MP.ReadString(3);
        mailContent1.SenderName = MP.ReadString(13);
        if (this.TalkData_BlackList.ContainsKey(mailContent1.SenderName.GetHashCode()))
        {
          CString cstring = StringManager.Instance.StaticString1024();
          cstring.IntToFormat(1L);
          cstring.AppendFormat(this.mStringTable.GetStringByID(8242U));
          GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
          MessagePacket messagePacket = new MessagePacket((ushort) 1024);
          messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
          messagePacket.AddSeqId();
          messagePacket.Add((byte) 1);
          messagePacket.Add(mailContent1.SerialID);
          messagePacket.Send();
          break;
        }
        mailContent1.ExtraFlag = MP.ReadByte();
        mailContent1.TitleLen = MP.ReadByte();
        mailContent1.ContentLen = MP.ReadUShort();
        mailContent1.AttachNum = MP.ReadByte();
        mailContent1.BeRead = ((int) mailContent1.Flag & 1) > 0;
        mailContent1.BeSave = ((int) mailContent1.Flag & 2) > 0;
        for (int index = 0; index < mailContent1.Attach.Length && index < (int) mailContent1.AttachNum; ++index)
        {
          mailContent1.Attach[index].KingdomID = MP.ReadUShort();
          mailContent1.Attach[index].ZoneID = MP.ReadUShort();
          mailContent1.Attach[index].PointID = MP.ReadByte();
        }
        mailContent1.Title = MP.ReadString((int) mailContent1.TitleLen);
        mailContent1.Content = MP.ReadString((int) mailContent1.ContentLen);
        string str = mailContent1.Content;
        char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
        for (int index = 0; index < mailContent1.Content.Length; ++index)
        {
          if (!this.isNotEmojiCharacter(mailContent1.Content[index]))
            chPtr[index] = ' ';
        }
        str = (string) null;
        if (mailContent1.MailType == (byte) 2)
          mailContent1.Content = ActivityManager.Instance.TransToLocalTime(mailContent1.Content);
        if (this.Mailing.MailSerial.Matrix.TryGetValue(mailContent1.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.MailSerial.Matrix[mailContent1.SerialID] = new SerialBox(mailContent1.SerialID, mailContent1.Flag, mailContent1.BeRead, mailContent1.BeSave);
          if (!mailContent1.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (mailContent1.BeSave)
        {
          if (!this.Mailing.FavorSerial.Mail.Mail.ContainsKey(this.Mailing.MailSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.MailSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_LETTER;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = mailContent1.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.MailSerial.Order.Add(new MailSaveOrder(this.Mailing.MailSerial.New, (byte) 1));
          this.Mailing.FavorSerial.Mail.Mail[this.Mailing.MailSerial.New] = mailContent1;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.MailSerial.Order.Add(new MailSaveOrder(this.Mailing.MailSerial.New, (byte) 0));
          if (!this.Mailing.MailSerial.Mail.ContainsKey(this.Mailing.MailSerial.New) && this.Mailing.MailSerial.Mail.Count < this.Mailing.MailSerial.Inbox.Length)
          {
            if (mailContent1.ReplyID > 0U && (mailContent1.MailType == (byte) 4 || mailContent1.MailType == (byte) 0))
            {
              SubContent subContent;
              if (!this.Mailing.MailSerial.SubMail.TryGetValue(mailContent1.ReplyID, out subContent))
                this.Mailing.MailSerial.SubMail.Add(mailContent1.ReplyID, subContent = new SubContent());
              List<uint> uintList4;
              if (!subContent.Mail.TryGetValue(mailContent1.SenderName, out uintList4))
                subContent.Mail.Add(mailContent1.SenderName, uintList4 = new List<uint>());
              uintList4.Add(mailContent1.SerialID);
              uintList4.Sort();
              mailContent1.More = (byte) uintList4.Count;
            }
            this.Mailing.MailSerial.Inbox[(IntPtr) this.Mailing.MailSerial.Count].Serial = this.Mailing.MailSerial.New;
            this.Mailing.MailSerial.Inbox[(IntPtr) this.Mailing.MailSerial.Count].Type = MailType.EMAIL_LETTER;
            this.Mailing.MailSerial.Inbox[(IntPtr) this.Mailing.MailSerial.Count].Timing = mailContent1.Times;
            this.Mailing.MailSerial.Inbox[(IntPtr) this.Mailing.MailSerial.Count].Change = true;
            ++this.Mailing.MailSerial.Count;
          }
          this.Mailing.MailSerial.Mail[this.Mailing.MailSerial.New] = mailContent1;
          this.MailDataRefresh(MailType.EMAIL_LETTER);
        }
        if (!mailContent1.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_LETTER);
        break;
      case Protocol._MSG_RESP_MAILMARKREAD:
        this.DoFavor.Type = MailType.EMAIL_LETTER;
        byte num1 = MP.ReadByte();
        for (int index = 0; index < (int) num1; ++index)
        {
          this.DoFavor.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref this.DoFavor))
          {
            this.DoFavor.Mail.BeRead = true;
            --this.Mailing.FavorSerial.Unseen;
          }
          else if (this.Mailing.MailSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.Mail))
          {
            SubContent subContent;
            List<uint> uintList5;
            global::MailContent mailContent2;
            if (this.DoFavor.Mail.More > (byte) 1 && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList5) && uintList5.Count > 0 && this.Mailing.MailSerial.Mail.TryGetValue(uintList5[uintList5.Count - 1], out mailContent2))
              --mailContent2.UnSeen;
            --this.Mailing.MailSerial.Unseen;
            this.DoFavor.Mail.BeRead = true;
            this.DoFavor.Mail.Flag |= (byte) 1;
            if (this.DoFavor.Mail.BeKept)
              this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0U, 0U);
          }
        }
        if (num1 > (byte) 0)
          this.SaveMail(this.DoFavor.Type);
        GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_LETTER);
        break;
      case Protocol._MSG_RESP_SAVEMAIL:
        uint key1 = this.DoFavor.Serial = MP.ReadUInt();
        this.DoFavor.Kind = MailType.EMAIL_LETTER;
        this.DoFavor.Type = MailType.EMAIL_LETTER;
        if (this.MailReportGet(ref this.DoFavor))
        {
          this.DoFavor.Mail.Flag |= (byte) 2;
          this.DoFavor.Mail.BeSave = true;
          if (this.Mailing.FavorSerial.Mail.Mail.ContainsKey(this.DoFavor.Mail.SerialID) || (long) this.Mailing.FavorSerial.Count >= (long) this.Mailing.FavorSerial.Inbox.Length)
            break;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = this.DoFavor.Kind;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.DoFavor.Mail.SerialID;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = this.DoFavor.Mail.Times;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
          this.Mailing.FavorSerial.Infolog = true;
          ++this.Mailing.FavorSerial.Count;
          this.Mailing.FavorSerial.Mail.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
          this.DeleteMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0U);
          if (this.DoFavor.Mail.BeKept)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          if (this.DoFavor.Mail.More > (byte) 1)
          {
            SubContent subContent;
            List<uint> uintList6;
            if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList6))
            {
              uintList6.RemoveAt(uintList6.Count - (int) this.DoFavor.Mail.MoreIndex - 1);
              if (this.DoFavor.Mail.MoreIndex == (byte) 0)
              {
                DataManager.msgBuffer[1] = this.DoFavor.Mail.Index;
                this.DoFavor.Kind = MailType.EMAIL_LETTER;
                this.DoFavor.Serial = uintList6[uintList6.Count - 1];
                if (!this.MailReportGet(ref this.DoFavor))
                  break;
                this.Mailing.MailSerial.Inbox[(int) DataManager.msgBuffer[1]].Serial = this.DoFavor.Mail.SerialID;
                this.Mailing.MailSerial.Inbox[(int) DataManager.msgBuffer[1]].Timing = this.DoFavor.Mail.Times;
              }
            }
          }
          else
          {
            SubContent subContent;
            if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.Remove(this.DoFavor.Mail.SenderName) && subContent.Mail.Count == 0)
              this.Mailing.MailSerial.SubMail.Remove(this.DoFavor.Mail.ReplyID);
            this.Mailing.MailSerial.Inbox[(int) this.DoFavor.Mail.Index].Serial = 0U;
            if (this.Mailing.MailSerial.Count > 0U)
              --this.Mailing.MailSerial.Count;
          }
          ++this.Mailing.MailSerial.Change;
          this.Mailing.MailSerial.Mail.Remove(key1);
          this.MailDataRefresh(MailType.EMAIL_LETTER);
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
          this.SaveMail(MailType.EMAIL_LETTER);
          this.MailingboxRefresh(MailType.EMAIL_LETTER);
          this.MailingboxRefresh(MailType.EMAIL_FAVORY);
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
          if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(681U), (ushort) byte.MaxValue);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2);
        break;
      case Protocol._MSG_RESP_DELETEMAIL:
        byte num2 = MP.ReadByte();
        MyFavorite MyFavor1 = new MyFavorite(MailType.EMAIL_LETTER, 0U);
        this.DoFavor.Kind = MailType.EMAIL_LETTER;
        for (int index1 = 0; index1 < (int) num2; ++index1)
        {
          MyFavor1.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref MyFavor1))
          {
            for (int index2 = 0; index2 < this.Mailing.FavorSerial.Inbox.Length; ++index2)
            {
              if (this.Mailing.FavorSerial.Inbox[index2].Type == MyFavor1.Type && (int) this.Mailing.FavorSerial.Inbox[index2].Serial == (int) MyFavor1.Mail.SerialID)
              {
                this.Mailing.FavorSerial.Inbox[index2].Serial = 0U;
                --this.Mailing.FavorSerial.Total;
                break;
              }
            }
            this.Mailing.FavorSerial.Mail.Mail.Remove(MyFavor1.Serial);
          }
          else
          {
            global::MailContent mailContent3;
            if ((mailContent3 = this.MailReportGet(MyFavor1.Serial)) != null)
            {
              this.DoFavor.Kind = MailType.EMAIL_LETTER;
              mailContent3.BeKill = true;
              if (mailContent3.BeChecked && this.Outlooking && this.Mailing.MailSerial.Select > 0U)
                --this.Mailing.MailSerial.Select;
              SubContent subContent;
              List<uint> uintList7;
              if (mailContent3.More > (byte) 1)
              {
                if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent3.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent3.SenderName, out uintList7))
                {
                  MyFavor1.Serial = uintList7[uintList7.Count - 1];
                  for (int count = uintList7.Count; count > 0; --count)
                  {
                    if ((int) mailContent3.SerialID == (int) uintList7[count - 1])
                    {
                      uintList7.RemoveAt(count - 1);
                      this.DoFavor.Serial = uintList7[uintList7.Count - 1];
                      if (uintList7.Count == 1 && this.Mailing.MailSerial.Mail.TryGetValue(uintList7[0], out this.DoFavor.Mail))
                      {
                        this.DoFavor.Mail.More = (byte) 1;
                        break;
                      }
                      break;
                    }
                  }
                  if ((int) MyFavor1.Serial == (int) mailContent3.SerialID && this.MailReportGet(ref this.DoFavor))
                  {
                    this.Mailing.MailSerial.Inbox[(int) mailContent3.Index].Serial = this.DoFavor.Mail.SerialID;
                    this.Mailing.MailSerial.Inbox[(int) mailContent3.Index].Timing = this.DoFavor.Mail.Times;
                    this.Mailing.MailSerial.Inbox[(int) mailContent3.Index].Type = this.DoFavor.Kind;
                  }
                }
              }
              else
              {
                this.Mailing.MailSerial.Inbox[(int) mailContent3.Index].Serial = 0U;
                if (this.Mailing.MailSerial.Count > 0U)
                  --this.Mailing.MailSerial.Count;
              }
              if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent3.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent3.SenderName, out uintList7) && uintList7.Count == 1 && (int) uintList7[0] == (int) mailContent3.SerialID)
                subContent.Mail.Remove(mailContent3.SenderName);
              this.DeleteMail(this.DoFavor, mailContent3.SerialID, 0U);
              this.Mailing.MailSerial.Mail.Remove(mailContent3.SerialID);
            }
          }
        }
        this.MailDataRefresh(MailType.EMAIL_LETTER);
        if (num2 > (byte) 0)
          this.SaveMail(MailType.EMAIL_LETTER);
        this.SaveMailData(MP.Protocol);
        if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && num2 > (byte) 0)
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683U), (ushort) byte.MaxValue);
        else if (GUIManager.Instance.HideUILock(EUILock.Mailing_Action) && num2 > (byte) 0)
        {
          GameManager.OnRefresh(NetworkNews.Refresh_Mailing);
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
          break;
        }
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        this.MailingboxRefresh(MailType.EMAIL_LETTER);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2);
        break;
      case Protocol._MSG_RESP_SCOUTREPORTINFO:
        global::CombatReport combatReport1 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_SCOUT);
        combatReport1.Scout = new ScoutReportContent();
        combatReport1.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport1.BeRead = ((int) combatReport1.Flag & 1) > 0;
        combatReport1.BeSave = ((int) combatReport1.Flag & 2) > 0;
        combatReport1.Scout.KingdomID = MP.ReadUShort();
        combatReport1.Scout.CombatlZone = MP.ReadUShort();
        combatReport1.Scout.CombatPoint = MP.ReadByte();
        combatReport1.Scout.CombatPointKind = (POINT_KIND) MP.ReadByte();
        combatReport1.Scout.ObjKingdomID = MP.ReadUShort();
        combatReport1.Scout.ObjAllianceTag = MP.ReadString(3);
        combatReport1.Scout.ObjName = MP.ReadString(13);
        combatReport1.Scout.ScoutResult = MP.ReadByte();
        combatReport1.Scout.ScoutLevel = MP.ReadByte();
        combatReport1.Scout.ScoutContentLen = MP.ReadUShort();
        combatReport1.Scout.ScoutContent = new byte[(int) combatReport1.Scout.ScoutContentLen];
        combatReport1.DateTime = GameConstants.GetDateTime(combatReport1.Times).ToString("MM/dd/yy HH:mm:ss");
        MP.ReadBlock(combatReport1.Scout.ScoutContent, 0, (int) combatReport1.Scout.ScoutContentLen);
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport1.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport1.SerialID] = new SerialBox(combatReport1.SerialID, combatReport1.Flag, combatReport1.BeRead, combatReport1.BeSave);
          if (!combatReport1.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport1.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport1.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport1;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
          {
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport1.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport1;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport1.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
        break;
      case Protocol._MSG_RESP_COMBATREPORTINFO:
        global::CombatReport combatReport2 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt());
        combatReport2.Combat = new CombatReportContent();
        combatReport2.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport2.BeRead = ((int) combatReport2.Flag & 1) > 0;
        combatReport2.BeSave = ((int) combatReport2.Flag & 2) > 0;
        combatReport2.Combat.KingdomID = MP.ReadUShort();
        combatReport2.Combat.CombatlZone = MP.ReadUShort();
        combatReport2.Combat.CombatPoint = MP.ReadByte();
        combatReport2.Combat.CombatPointKind = (POINT_KIND) MP.ReadByte();
        combatReport2.Combat.Side = MP.ReadByte();
        combatReport2.Combat.AssaultKingdomID = MP.ReadUShort();
        combatReport2.Combat.AssaultAllianceTag = MP.ReadString(3);
        combatReport2.Combat.AssaultName = MP.ReadString(13);
        combatReport2.Combat.DefenceKingdomID = MP.ReadUShort();
        combatReport2.Combat.DefenceAllianceTag = MP.ReadString(3);
        combatReport2.Combat.DefenceName = MP.ReadString(13);
        combatReport2.Combat.Result = (CombatReportResultType) MP.ReadByte();
        combatReport2.Combat.Resource = new int[5];
        combatReport2.DateTime = GameConstants.GetDateTime(combatReport2.Times).ToString("MM/dd/yy HH:mm:ss");
        for (byte index = 0; (int) index < combatReport2.Combat.Resource.Length; ++index)
          combatReport2.Combat.Resource[(int) index] = MP.ReadInt();
        combatReport2.Combat.HeroData = new CombatHeroExpData[5];
        for (int index = 0; index < 5; ++index)
        {
          combatReport2.Combat.HeroData[index] = new CombatHeroExpData();
          combatReport2.Combat.HeroData[index].HeroID = MP.ReadUShort();
          combatReport2.Combat.HeroData[index].Star = MP.ReadByte();
        }
        combatReport2.Combat.EarnLordExp = MP.ReadUInt();
        combatReport2.Combat.EarnHeroExp = MP.ReadUInt();
        combatReport2.Combat.DetailAutoID = MP.ReadULong();
        combatReport2.Combat.DetailDbServerID = MP.ReadInt();
        combatReport2.Combat.AccessKey = MP.ReadInt();
        combatReport2.Combat.DetailSelfIndex = MP.ReadByte();
        combatReport2.Combat.CaptureResult = (ECombatReportCaptureResultType) MP.ReadByte();
        combatReport2.Combat.Summary.AssaultCapitalZone = MP.ReadUShort();
        combatReport2.Combat.Summary.AssaultCapitalPoint = MP.ReadByte();
        combatReport2.Combat.Summary.AssaultLosePower = MP.ReadULong();
        combatReport2.Combat.Summary.AssaultTroopForce = MP.ReadUInt();
        combatReport2.Combat.Summary.AssaultTroopInjure = MP.ReadUInt();
        combatReport2.Combat.Summary.AssaultTroopDeath = MP.ReadUInt();
        combatReport2.Combat.Summary.DefenceCapitalZone = MP.ReadUShort();
        combatReport2.Combat.Summary.DefenceCapitalPoint = MP.ReadByte();
        combatReport2.Combat.Summary.DefenceLosePower = MP.ReadULong();
        combatReport2.Combat.Summary.DefenceTroopForce = MP.ReadUInt();
        combatReport2.Combat.Summary.DefenceTroopInjure = MP.ReadUInt();
        combatReport2.Combat.Summary.DefenceTroopDeath = MP.ReadUInt();
        combatReport2.Combat.Summary.WallDefence = MP.ReadUInt();
        combatReport2.Combat.Summary.WallDamage = MP.ReadUInt();
        combatReport2.Combat.Summary.TrapNumber = MP.ReadUInt();
        combatReport2.Combat.Summary.LoseTrapNumber = MP.ReadUInt();
        combatReport2.Combat.Summary.SaveTrapNumber = MP.ReadUInt();
        combatReport2.Combat.Summary.AssaultLevel = MP.ReadByte();
        combatReport2.Combat.Summary.AssaultHead = MP.ReadUShort();
        combatReport2.Combat.Summary.AssaultLordInCombat = MP.ReadByte();
        combatReport2.Combat.Summary.AssaultVIPLevel = MP.ReadByte();
        combatReport2.Combat.Summary.IsLeader = MP.ReadByte();
        combatReport2.Combat.Summary.DefenceLevel = MP.ReadByte();
        combatReport2.Combat.Summary.DefenceHead = MP.ReadUShort();
        combatReport2.Combat.Summary.DefenceLordInCombat = MP.ReadByte();
        combatReport2.Combat.Summary.DefenceVIPLevel = MP.ReadByte();
        combatReport2.Combat.Summary.AssaultAllianceRank = MP.ReadByte();
        combatReport2.Combat.Summary.DefenceAllianceRank = MP.ReadByte();
        combatReport2.Combat.Version = MP.ReadUInt();
        combatReport2.Combat.PatchNo = MP.ReadUInt();
        combatReport2.Combat.Atkcoord = MP.ReadByte();
        combatReport2.Combat.Defcoord = MP.ReadByte();
        combatReport2.Combat.PetSkillPatchNo = MP.ReadUInt();
        combatReport2.Combat.m_AssaultPetSkill_ID = new ushort[20];
        for (int index = 0; index < combatReport2.Combat.m_AssaultPetSkill_ID.Length; ++index)
          combatReport2.Combat.m_AssaultPetSkill_ID[index] = MP.ReadUShort();
        combatReport2.Combat.m_AssaultPetSkill_LV = new byte[20];
        for (int index = 0; index < combatReport2.Combat.m_AssaultPetSkill_LV.Length; ++index)
          combatReport2.Combat.m_AssaultPetSkill_LV[index] = MP.ReadByte();
        combatReport2.Combat.m_DefencePetSkill_ID = new ushort[20];
        for (int index = 0; index < combatReport2.Combat.m_DefencePetSkill_ID.Length; ++index)
          combatReport2.Combat.m_DefencePetSkill_ID[index] = MP.ReadUShort();
        combatReport2.Combat.m_DefencePetSkill_LV = new byte[20];
        for (int index = 0; index < combatReport2.Combat.m_DefencePetSkill_LV.Length; ++index)
          combatReport2.Combat.m_DefencePetSkill_LV[index] = MP.ReadByte();
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport2.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport2.SerialID] = new SerialBox(combatReport2.SerialID, combatReport2.Flag, combatReport2.BeRead, combatReport2.BeSave);
          if (!combatReport2.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport2.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport2.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport2;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
          {
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport2.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport2;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport2.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
        break;
      case Protocol._MSG_RESP_GATHERREPORTINFO:
        global::CombatReport combatReport3 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_COLLECT);
        combatReport3.Gather = new GatherReportContent();
        combatReport3.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport3.Gather.KingdomID = MP.ReadUShort();
        combatReport3.Gather.GatherZone = MP.ReadUShort();
        combatReport3.Gather.GatherPoint = MP.ReadByte();
        combatReport3.Gather.GatherPointKind = (POINT_KIND) MP.ReadByte();
        combatReport3.Gather.GatherPointLevel = MP.ReadByte();
        combatReport3.Gather.Resource = MP.ReadUInt();
        combatReport3.Gather.HeroNum = MP.ReadByte();
        combatReport3.Gather.ItemLen = MP.ReadByte();
        combatReport3.Gather.Item = new byte[85];
        MP.ReadBlock(combatReport3.Gather.Item, 0, 85);
        int startIdx1 = 0;
        if (combatReport3.Gather.HeroNum > (byte) 0)
        {
          combatReport3.Gather.mHero = new GatherHeroExpData[(int) combatReport3.Gather.HeroNum];
          for (int index3 = 0; index3 < (int) combatReport3.Gather.HeroNum; ++index3)
          {
            combatReport3.Gather.mHero[index3] = new GatherHeroExpData();
            combatReport3.Gather.mHero[index3].HeroID = GameConstants.ConvertBytesToUShort(combatReport3.Gather.Item, startIdx1);
            int index4 = startIdx1 + 2;
            combatReport3.Gather.mHero[index3].Star = combatReport3.Gather.Item[index4];
            int startIdx2 = index4 + 1;
            combatReport3.Gather.mHero[index3].Exp = GameConstants.ConvertBytesToUInt(combatReport3.Gather.Item, startIdx2);
            startIdx1 = startIdx2 + 4;
          }
        }
        if (combatReport3.Gather.ItemLen > (byte) 0)
        {
          combatReport3.Gather.mResourceItem = new ResourceItem[(int) combatReport3.Gather.ItemLen];
          for (int index5 = 0; index5 < (int) combatReport3.Gather.ItemLen; ++index5)
          {
            combatReport3.Gather.mResourceItem[index5] = new ResourceItem();
            combatReport3.Gather.mResourceItem[index5].ItemID = GameConstants.ConvertBytesToUShort(combatReport3.Gather.Item, startIdx1);
            int startIdx3 = startIdx1 + 2;
            combatReport3.Gather.mResourceItem[index5].Quantity = GameConstants.ConvertBytesToUShort(combatReport3.Gather.Item, startIdx3);
            int index6 = startIdx3 + 2;
            combatReport3.Gather.mResourceItem[index5].Rank = combatReport3.Gather.Item[index6];
            startIdx1 = index6 + 1;
          }
        }
        combatReport3.DateTime = GameConstants.GetDateTime(combatReport3.Times).ToString("MM/dd/yy HH:mm:ss");
        combatReport3.BeRead = ((int) combatReport3.Flag & 1) > 0;
        combatReport3.BeSave = ((int) combatReport3.Flag & 2) > 0;
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport3.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport3.SerialID] = new SerialBox(combatReport3.SerialID, combatReport3.Flag, combatReport3.BeRead, combatReport3.BeSave);
          if (!combatReport3.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport3.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Total < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Timing = combatReport3.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Total].Type = MailType.EMAIL_BATTLE;
            ++this.Mailing.FavorSerial.Total;
          }
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport3;
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
          {
            if (this.Mailing.ReportSerial.Gather.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
              break;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport3.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
            this.Mailing.ReportSerial.Gather.Add(combatReport3.SerialID);
            this.Mailing.ReportSerial.Gather.Sort();
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport3;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport3.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_GATHER);
        break;
      case Protocol._MSG_RESP_ANTISCOUTREPORTINFO:
        global::CombatReport combatReport4 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_RECON);
        combatReport4.Recon = new ReconReportContent();
        combatReport4.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport4.BeRead = ((int) combatReport4.Flag & 1) > 0;
        combatReport4.BeSave = ((int) combatReport4.Flag & 2) > 0;
        combatReport4.Recon.KingdomID = MP.ReadUShort();
        combatReport4.Recon.CombatlZone = MP.ReadUShort();
        combatReport4.Recon.CombatPoint = MP.ReadByte();
        combatReport4.Recon.CombatPointKind = (POINT_KIND) MP.ReadByte();
        combatReport4.Recon.AntiScout = MP.ReadByte();
        combatReport4.Recon.WatchLevel = MP.ReadByte();
        combatReport4.Recon.SrcKingdomID = MP.ReadUShort();
        combatReport4.Recon.SrcName = MP.ReadString(13);
        combatReport4.Recon.SrcAllianceTag = MP.ReadString(3);
        combatReport4.Recon.SrcHead = MP.ReadUShort();
        combatReport4.Recon.bAmbush = MP.ReadByte();
        combatReport4.DateTime = GameConstants.GetDateTime(combatReport4.Times).ToString("MM/dd/yy HH:mm:ss");
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport4.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport4.SerialID] = new SerialBox(combatReport4.SerialID, combatReport4.Flag, combatReport4.BeRead, combatReport4.BeSave);
          if (!combatReport4.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport4.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport4.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport4;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
          {
            if (this.Mailing.ReportSerial.AntiScout.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
              break;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport4.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
            this.Mailing.ReportSerial.AntiScout.Add(combatReport4.SerialID);
            this.Mailing.ReportSerial.AntiScout.Sort();
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport4;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport4.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_RECON);
        break;
      case Protocol._MSG_RESP_RESHELPREPORTINFO:
        global::CombatReport combatReport5 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_RESOURCE);
        combatReport5.Resource = new ResourceReportContent();
        combatReport5.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport5.BeRead = ((int) combatReport5.Flag & 1) > 0;
        combatReport5.BeSave = ((int) combatReport5.Flag & 2) > 0;
        combatReport5.Resource.Result = MP.ReadByte();
        combatReport5.Resource.Name = MP.ReadString(13);
        combatReport5.Resource.Resource = new uint[5];
        for (byte index = 0; index < (byte) 5; ++index)
          combatReport5.Resource.Resource[(int) index] = MP.ReadUInt();
        combatReport5.DateTime = GameConstants.GetDateTime(combatReport5.Times).ToString("MM/dd/yy HH:mm:ss");
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport5.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport5.SerialID] = new SerialBox(combatReport5.SerialID, combatReport5.Flag, combatReport5.BeRead, combatReport5.BeSave);
          if (!combatReport5.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport5.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport5.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport5;
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
          {
            if (this.Mailing.ReportSerial.Resource.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
              break;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport5.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
            this.Mailing.ReportSerial.Resource.Add(combatReport5.SerialID);
            this.Mailing.ReportSerial.Resource.Sort();
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport5;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport5.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_HELP);
        break;
      case Protocol._MSG_RESP_MONSTERREPORTINFO:
        global::CombatReport combatReport6 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_MONSTER);
        combatReport6.Monster = new MonsterReportContent();
        combatReport6.SetData(MP.ReadByte(), MP.ReadLong());
        combatReport6.BeRead = ((int) combatReport6.Flag & 1) > 0;
        combatReport6.BeSave = ((int) combatReport6.Flag & 2) > 0;
        combatReport6.Monster.KindgomID = MP.ReadUShort();
        combatReport6.Monster.Zone = MP.ReadUShort();
        combatReport6.Monster.Point = MP.ReadByte();
        combatReport6.Monster.Result = MP.ReadByte();
        if (combatReport6.Monster.Result < (byte) 2 || combatReport6.Monster.Result > (byte) 3)
        {
          combatReport6.Monster.Head = MP.ReadUShort();
          combatReport6.Monster.MonsterID = MP.ReadUShort();
          combatReport6.Monster.MonsterLv = MP.ReadByte();
          combatReport6.Monster.BeginHPPercent = MP.ReadUInt();
          combatReport6.Monster.EndHPPercent = MP.ReadUInt();
          combatReport6.Monster.MonsterMaxHP = MP.ReadUInt();
          combatReport6.Monster.Exp = MP.ReadUInt();
          combatReport6.Monster.HeroID = new ushort[5];
          combatReport6.Monster.HeroExp = new uint[5];
          combatReport6.Monster.HeroData = new MonsterReportContent.HeroDataType[5];
          for (int index = 0; index < 5; ++index)
            combatReport6.Monster.HeroID[index] = MP.ReadUShort();
          for (int index = 0; index < 5; ++index)
            combatReport6.Monster.HeroExp[index] = MP.ReadUInt();
          for (int index = 0; index < 5; ++index)
          {
            combatReport6.Monster.HeroData[index] = new MonsterReportContent.HeroDataType();
            combatReport6.Monster.HeroData[index].SkillLV1 = MP.ReadByte();
            combatReport6.Monster.HeroData[index].SkillLV2 = MP.ReadByte();
            combatReport6.Monster.HeroData[index].SkillLV3 = MP.ReadByte();
            combatReport6.Monster.HeroData[index].SkillLV4 = MP.ReadByte();
            combatReport6.Monster.HeroData[index].LV = MP.ReadByte();
            combatReport6.Monster.HeroData[index].Star = MP.ReadByte();
            combatReport6.Monster.HeroData[index].Enhance = MP.ReadByte();
            combatReport6.Monster.HeroData[index].Equip = MP.ReadByte();
          }
          combatReport6.Monster.SequentialDamageTimes = MP.ReadByte();
          combatReport6.Monster.EffectiveDamageTimes = MP.ReadByte();
          combatReport6.Monster.AttrScale = new MonsterReportContent.MonsterDataType();
          combatReport6.Monster.AttrScale.ActionTimes = MP.ReadByte();
          combatReport6.Monster.AttrScale.SequentialDamageScale = MP.ReadUInt();
          combatReport6.Monster.AttrScale.DamageScale = MP.ReadUInt();
          combatReport6.Monster.AttrScale.MaxHPScale = MP.ReadUInt();
          combatReport6.Monster.AttrScale.HealingScale = MP.ReadUInt();
          combatReport6.Monster.AttrScale.InitMP = MP.ReadUShort();
          combatReport6.Monster.RandomSeed = MP.ReadUShort();
          combatReport6.Monster.RandomGap = MP.ReadByte();
          combatReport6.Monster.Version = MP.ReadUInt();
          combatReport6.Monster.PatchNo = MP.ReadUInt();
          if (combatReport6.Monster.Result < (byte) 2)
          {
            combatReport6.Monster.ItemLen = MP.ReadByte();
            combatReport6.Monster.Item = new MonsterReportContent.ItemDataType[30];
            for (int index = 0; index < (int) combatReport6.Monster.ItemLen && index < 30; ++index)
            {
              combatReport6.Monster.Item[index] = new MonsterReportContent.ItemDataType();
              combatReport6.Monster.Item[index].ItemID = MP.ReadUShort();
              combatReport6.Monster.Item[index].Num = MP.ReadUShort();
              combatReport6.Monster.Item[index].ItemRank = MP.ReadByte();
            }
          }
          else
            combatReport6.Monster.AllianceTag = MP.ReadString(3);
        }
        if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport6.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.ReportSerial.Matrix[combatReport6.SerialID] = new SerialBox(combatReport6.SerialID, combatReport6.Flag, combatReport6.BeRead, combatReport6.BeSave);
          if (!combatReport6.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (combatReport6.BeSave)
        {
          if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport6.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
          this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport6;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
          if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
          {
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport6.Times;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
            this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
            if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
              ++this.Mailing.ReportSerial.Count;
          }
          this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport6;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
        }
        if (!combatReport6.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
        break;
      case Protocol._MSG_RESP_REPORTMARKREAD:
        byte num3 = MP.ReadByte();
        MyFavorite MyFavor2 = new MyFavorite(MailType.EMAIL_BATTLE, 0U);
        this.DoFavor.Type = MailType.EMAIL_BATTLE;
        for (int index = 0; index < (int) num3; ++index)
        {
          this.DoFavor.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref MyFavor2))
          {
            --this.Mailing.FavorSerial.Unseen;
            MyFavor2.Combat.BeRead = true;
          }
          else
          {
            if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.Combat))
              return;
            if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_COLLECT && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.GatheringID, out MyFavor2.Combat))
              --MyFavor2.Combat.UnSeen;
            --this.Mailing.ReportSerial.Unseen;
            this.DoFavor.Combat.BeRead = true;
            this.DoFavor.Combat.Flag |= (byte) 1;
            if (this.DoFavor.Combat.BeKept)
              this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0U, 0U);
          }
        }
        if (num3 > (byte) 0)
          this.SaveMail(this.DoFavor.Type);
        GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE);
        break;
      case Protocol._MSG_RESP_SAVEREPORT:
        if (this.DoFavor == null)
          this.DoFavor = new MyFavorite(Id: 0U);
        this.DoFavor.Serial = MP.ReadUInt();
        this.DoFavor.Kind = MailType.EMAIL_BATTLE;
        this.DoFavor.Type = MailType.EMAIL_BATTLE;
        if (this.MailReportGet(ref this.DoFavor))
        {
          this.DoFavor.Combat.Flag |= (byte) 2;
          this.DoFavor.Combat.BeSave = true;
          if (this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.DoFavor.Combat.SerialID) || (long) this.Mailing.FavorSerial.Count >= (long) this.Mailing.FavorSerial.Inbox.Length)
            break;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = this.DoFavor.Kind;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.DoFavor.Combat.SerialID;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = this.DoFavor.Combat.Times;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
          this.Mailing.FavorSerial.Infolog = true;
          ++this.Mailing.FavorSerial.Count;
          this.Mailing.FavorSerial.Combat.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
          this.DeleteMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0U);
          if (this.DoFavor.Combat.BeKept)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          this.Mailing.ReportSerial.Inbox[(int) this.DoFavor.Combat.Index].Serial = 0U;
          this.Mailing.ReportSerial.Mail.Remove(this.DoFavor.Combat.SerialID);
          if (this.Mailing.ReportSerial.Count > 0U)
            --this.Mailing.ReportSerial.Count;
          ++this.Mailing.ReportSerial.Change;
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
          this.SaveMail(MailType.EMAIL_BATTLE);
          this.MailingboxRefresh(MailType.EMAIL_BATTLE);
          this.MailingboxRefresh(MailType.EMAIL_FAVORY);
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
          if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(682U), (ushort) byte.MaxValue);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2);
        break;
      case Protocol._MSG_RESP_DELETEREPORT:
        GUIManager instance1 = GUIManager.Instance;
        MyFavorite MyFavor3 = new MyFavorite(MailType.EMAIL_BATTLE, 0U);
        this.DoFavor.Kind = MailType.EMAIL_BATTLE;
        byte num4 = MP.ReadByte();
        for (int index7 = 0; index7 < (int) num4; ++index7)
        {
          MyFavor3.Serial = MP.ReadUInt();
          if (instance1.SerialNo > 0U && (int) instance1.SerialNo == (int) MyFavor3.Serial && (UnityEngine.Object) instance1.m_BMButtonT != (UnityEngine.Object) null)
            instance1.m_BMButtonT.gameObject.SetActive(false);
          if (this.FavorReportGet(ref MyFavor3))
          {
            for (int index8 = 0; index8 < this.Mailing.FavorSerial.Inbox.Length; ++index8)
            {
              if (this.Mailing.FavorSerial.Inbox[index8].Type == MyFavor3.Type && (int) this.Mailing.FavorSerial.Inbox[index8].Serial == (int) MyFavor3.Combat.SerialID)
              {
                this.Mailing.FavorSerial.Inbox[index8].Serial = 0U;
                --this.Mailing.FavorSerial.Total;
                break;
              }
            }
            this.Mailing.FavorSerial.Combat.Mail.Remove(MyFavor3.Serial);
          }
          else if (!this.DeleteMail(MailType.EMAIL_BATTLE, MyFavor3.Serial))
            ;
        }
        if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && num4 > (byte) 0)
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(684U), (ushort) byte.MaxValue);
        this.MailDataRefresh(MailType.EMAIL_BATTLE);
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        if (num4 > (byte) 0)
          this.SaveMail(MailType.EMAIL_BATTLE);
        this.SaveMailData(MP.Protocol);
        this.MailingboxRefresh(MailType.EMAIL_BATTLE);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2);
        break;
      case Protocol._MSG_RESP_ALLREPORT_MOD:
        this.DoFavor.Type = MailType.EMAIL_BATTLE;
        this.Mailing.ReportSerial.Total = (uint) MP.ReadByte();
        this.Mailing.ReportSerial.Unread = (uint) MP.ReadByte();
        if (GUIManager.Instance.HideUILock(EUILock.Mailing_Read))
        {
          this.Mailing.ReportSerial.Unseen = 0U;
          for (int id = 0; (long) id < (long) this.Mailing.ReportSerial.Count; ++id)
          {
            if ((this.DoFavor.Combat = this.CombatReportGet(id)) != null && !this.DoFavor.Combat.BeRead)
            {
              this.DoFavor.Combat.Flag |= (byte) 1;
              this.DoFavor.Combat.BeRead = true;
              if (this.DoFavor.Combat.SerialID <= this.Mailing.ReportSerial.LastSave)
                this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0U, 0U);
            }
          }
        }
        else if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
        {
          this.Mailing.ReportSerial.Holding = true;
          this.LoadReportMail(MailType.EMAIL_BATTLE, true);
          this.DoFavor.Kind = MailType.EMAIL_BATTLE;
          GUIManager instance2 = GUIManager.Instance;
          if (instance2.SerialNo > 0U && (UnityEngine.Object) instance2.m_BMButtonT != (UnityEngine.Object) null)
            instance2.m_BMButtonT.gameObject.SetActive(false);
          for (int index = 0; index < this.Mailing.ReportSerial.Inbox.Length; ++index)
          {
            this.DeleteMail(this.DoFavor, this.Mailing.ReportSerial.Inbox[index].Serial, 0U);
            this.Mailing.ReportSerial.Inbox[index].Serial = 0U;
          }
          this.Mailing.ReportSerial.Resource.Clear();
          this.Mailing.ReportSerial.Gather.Clear();
          this.Mailing.ReportSerial.Mail.Clear();
          this.Mailing.ReportSerial.Unseen = 0U;
          this.Mailing.ReportSerial.Count = 0U;
          if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(684U), (ushort) byte.MaxValue);
          this.MailDataRefresh(MailType.EMAIL_BATTLE);
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Resources, 1);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2);
        }
        this.SaveMail(this.DoFavor.Type);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailing);
        break;
      case Protocol._MSG_RESP_SAVEMARKREAD:
        this.Mailing.FavorSerial.Last = (uint) MP.ReadByte();
        for (int index = 0; (long) index < (long) this.Mailing.FavorSerial.Last; ++index)
        {
          this.DoFavor.Type = (MailType) MP.ReadByte();
          if (this.DoFavor.Type == MailType.EMAIL_FAVORY)
            this.DoFavor.Type = MailType.EMAIL_SYSTEM;
          else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
            this.DoFavor.Type = MailType.EMAIL_LETTER;
          this.DoFavor.Serial = MP.ReadUInt();
          if (!this.FavorReportGet(ref this.DoFavor))
            return;
          if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
          {
            this.DoFavor.System.BeRead = true;
            this.DoFavor.System.Flag |= (byte) 1;
            if (this.DoFavor.System.BeKept)
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          else if (this.DoFavor.Type == MailType.EMAIL_BATTLE)
          {
            this.DoFavor.Combat.BeRead = true;
            this.DoFavor.Combat.Flag |= (byte) 1;
            if (this.DoFavor.Combat.BeKept)
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          else if (this.DoFavor.Type == MailType.EMAIL_LETTER)
          {
            this.DoFavor.Mail.BeRead = true;
            this.DoFavor.Mail.Flag |= (byte) 1;
            if (this.DoFavor.Mail.BeKept)
              this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          --this.Mailing.FavorSerial.Unseen;
        }
        GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_FAVORY);
        break;
      case Protocol._MSG_RESP_DELETESAVE:
        this.Mailing.FavorSerial.Last = (uint) MP.ReadByte();
        this.DoFavor.Kind = MailType.EMAIL_LETTER;
        for (int index = 0; (long) index < (long) this.Mailing.FavorSerial.Last; ++index)
        {
          this.DoFavor.Type = (MailType) MP.ReadByte();
          if (this.DoFavor.Type == MailType.EMAIL_FAVORY)
            this.DoFavor.Type = MailType.EMAIL_SYSTEM;
          else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
            this.DoFavor.Type = MailType.EMAIL_LETTER;
          this.DoFavor.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref this.DoFavor))
          {
            if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
            {
              if (this.DoFavor.System.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
                --this.Mailing.FavorSerial.Select;
              this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0U);
              this.Mailing.FavorSerial.Inbox[(int) this.DoFavor.System.Index].Serial = 0U;
              this.Mailing.FavorSerial.System.Mail.Remove(this.DoFavor.Serial);
            }
            else if (this.DoFavor.Type == MailType.EMAIL_BATTLE)
            {
              if (this.DoFavor.Combat.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
                --this.Mailing.FavorSerial.Select;
              this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0U);
              this.Mailing.FavorSerial.Inbox[(int) this.DoFavor.Combat.Index].Serial = 0U;
              this.Mailing.FavorSerial.Combat.Mail.Remove(this.DoFavor.Serial);
            }
            else if (this.DoFavor.Type == MailType.EMAIL_LETTER)
            {
              if (this.DoFavor.Mail.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0U)
                --this.Mailing.FavorSerial.Select;
              this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0U);
              this.Mailing.FavorSerial.Inbox[(int) this.DoFavor.Mail.Index].Serial = 0U;
              this.Mailing.FavorSerial.Mail.Mail.Remove(this.DoFavor.Serial);
            }
            if (this.Mailing.FavorSerial.Count > 0U)
              --this.Mailing.FavorSerial.Count;
          }
          else
          {
            this.ResetMail();
            return;
          }
        }
        if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683U), (ushort) byte.MaxValue);
        this.MailDataRefresh(MailType.EMAIL_SYSTEM);
        this.MailDataRefresh(MailType.EMAIL_LETTER);
        this.MailDataRefresh(MailType.EMAIL_BATTLE);
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        if (this.Mailing.FavorSerial.Last == 0U)
        {
          this.ResetMail();
        }
        else
        {
          this.SaveMail(MailType.EMAIL_LETTER);
          this.SaveMail(MailType.EMAIL_BATTLE);
          this.SaveMail(MailType.EMAIL_SYSTEM);
        }
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_FAVORY);
        break;
      case Protocol._MSG_RESP_NOTICEINFO:
        NoticeContent noticeContent = new NoticeContent();
        noticeContent.SerialID = this.Mailing.SystemSerial.New = MP.ReadUInt();
        noticeContent.SetData(MP.ReadByte(), MP.ReadLong());
        noticeContent.BeRead = ((int) noticeContent.Flag & 1) > 0;
        noticeContent.BeSave = ((int) noticeContent.Flag & 2) > 0;
        noticeContent.Type = (NoticeReport) MP.ReadByte();
        noticeContent.OffsetLen = MP.ReadUInt();
        if (noticeContent.Type == NoticeReport.ENotice_Enhance)
        {
          noticeContent.NoticeHeroEnhance = new NoticeContent.Enhance();
          noticeContent.NoticeHeroEnhance.HeroID = MP.ReadUShort();
          noticeContent.NoticeHeroEnhance.Rank = MP.ReadByte();
          noticeContent.NoticeHeroEnhance.Star = MP.ReadByte();
        }
        else if (noticeContent.Type == NoticeReport.ENotice_StarUp)
        {
          noticeContent.NoticeHeroStarUp = new NoticeContent.StarUp();
          noticeContent.NoticeHeroStarUp.HeroID = MP.ReadUShort();
          noticeContent.NoticeHeroStarUp.Star = MP.ReadByte();
          noticeContent.NoticeHeroStarUp.Rank = MP.ReadByte();
        }
        else if (noticeContent.Type == NoticeReport.ENotice_JoinAlliance)
        {
          noticeContent.Notice_JoinAlliance = new NoticeContent.JoinAlliance();
          noticeContent.Notice_JoinAlliance.Tag = MP.ReadString(3);
          noticeContent.Notice_JoinAlliance.Name = MP.ReadString(20);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_ApplyAlliance)
        {
          noticeContent.Notice_ApplyAlliance = new NoticeContent.ApplyAlliance();
          noticeContent.Notice_ApplyAlliance.Tag = MP.ReadString(3);
          noticeContent.Notice_ApplyAlliance.Name = MP.ReadString(20);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
        {
          noticeContent.Notice_ApplyAllianceBeDenied = new NoticeContent.ApplyAllianceBeDenied();
          noticeContent.Notice_ApplyAllianceBeDenied.Dealer = MP.ReadString(13);
          noticeContent.Notice_ApplyAllianceBeDenied.Tag = MP.ReadString(3);
          noticeContent.Notice_ApplyAllianceBeDenied.Name = MP.ReadString(20);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_AllianceDismiss)
        {
          noticeContent.Notice_AllianceDismiss = new NoticeContent.AllianceDismiss();
          noticeContent.Notice_AllianceDismiss.Leader = MP.ReadString(13);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
        {
          noticeContent.Notice_AllianceLeaderStepDown = new NoticeContent.AllianceLeaderStepDown();
          noticeContent.Notice_AllianceLeaderStepDown.OldLeader = MP.ReadString(13);
          noticeContent.Notice_AllianceLeaderStepDown.NewLeader = MP.ReadString(13);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_ActivityDegreePrize)
        {
          noticeContent.Notice_ActivityDegreePrize = new NoticeContent.ActivityDegreePrize();
          noticeContent.Notice_ActivityDegreePrize.Type = (NoticeContent.ActivityCircleEventType) MP.ReadByte();
          noticeContent.Notice_ActivityDegreePrize.Degree = MP.ReadByte();
          noticeContent.Notice_ActivityDegreePrize.PrizeNum = MP.ReadByte();
          noticeContent.Notice_ActivityDegreePrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Notice_ActivityDegreePrize.PrizeNum];
          for (byte index = 0; (int) index < (int) noticeContent.Notice_ActivityDegreePrize.PrizeNum; ++index)
          {
            noticeContent.Notice_ActivityDegreePrize.PrizeData[(int) index].Rank = MP.ReadByte();
            noticeContent.Notice_ActivityDegreePrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
            noticeContent.Notice_ActivityDegreePrize.PrizeData[(int) index].Num = MP.ReadByte();
          }
        }
        else if (noticeContent.Type == NoticeReport.Enotice_ActivityRankPrize)
        {
          noticeContent.Notice_ActivityRankPrize = new NoticeContent.ActivityRankPrize();
          noticeContent.Notice_ActivityRankPrize.Type = (NoticeContent.ActivityCircleEventType) MP.ReadByte();
          noticeContent.Notice_ActivityRankPrize.Place = MP.ReadByte();
          noticeContent.Notice_ActivityRankPrize.PrizeNum = MP.ReadByte();
          noticeContent.Notice_ActivityRankPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Notice_ActivityRankPrize.PrizeNum];
          for (byte index = 0; (int) index < (int) noticeContent.Notice_ActivityRankPrize.PrizeNum; ++index)
          {
            noticeContent.Notice_ActivityRankPrize.PrizeData[(int) index].Rank = MP.ReadByte();
            noticeContent.Notice_ActivityRankPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
            noticeContent.Notice_ActivityRankPrize.PrizeData[(int) index].Num = MP.ReadByte();
          }
        }
        else if (noticeContent.Type == NoticeReport.Enotice_InviteAlliance)
        {
          noticeContent.Notice_InviteAlliance = new NoticeContent.InviteAlliance();
          noticeContent.Notice_InviteAlliance.AllianceID = MP.ReadUInt();
          noticeContent.Notice_InviteAlliance.InviterName = MP.ReadString(13);
          noticeContent.Notice_InviteAlliance.Tag = MP.ReadString(3);
          noticeContent.Notice_InviteAlliance.Name = MP.ReadString(20);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_SynLordEquip)
        {
          noticeContent.Notice_SynLordEquip = new NoticeContent.SynLordEquip();
          noticeContent.Notice_SynLordEquip.ItemID = MP.ReadUShort();
          noticeContent.Notice_SynLordEquip.Rank = MP.ReadByte();
          noticeContent.Notice_SynLordEquip.AddExp = MP.ReadUInt();
        }
        else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel)
        {
          noticeContent.Notice_RallyNotice = new NoticeContent.RallyNotice();
          noticeContent.Notice_RallyNotice.HostName = MP.ReadString(13);
          noticeContent.Notice_RallyNotice.HostTag = MP.ReadString(3);
          noticeContent.Notice_RallyNotice.TargetName = MP.ReadString(13);
          noticeContent.Notice_RallyNotice.TargetTag = MP.ReadString(3);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_CryptFinish)
        {
          noticeContent.Notice_CryptNotice = new NoticeContent.CryptNotice();
          noticeContent.Notice_CryptNotice.Money = MP.ReadUShort();
          noticeContent.Notice_CryptNotice.Kind = MP.ReadByte();
          noticeContent.Notice_CryptNotice.Level = MP.ReadByte();
        }
        else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
        {
          noticeContent.Notice_AsTargetAlly = new NoticeContent.AsTargetAlly();
          noticeContent.Notice_AsTargetAlly.HostName = MP.ReadString(13);
          noticeContent.Notice_AsTargetAlly.HostTag = MP.ReadString(3);
          noticeContent.Notice_AsTargetAlly.TargetName = MP.ReadString(13);
        }
        else if (noticeContent.Type == NoticeReport.Enotice_OtherSavedLord)
        {
          noticeContent.Notice_OtherSavedLord = new NoticeContent.OtherSavedLord();
          noticeContent.Notice_OtherSavedLord.HomeKingdom = MP.ReadUShort();
          noticeContent.Notice_OtherSavedLord.AllianceTag = MP.ReadString(3);
          noticeContent.Notice_OtherSavedLord.Name = MP.ReadString(13);
        }
        else if (noticeContent.Type != NoticeReport.Enotice_SelfSavedLord)
        {
          if (noticeContent.Type == NoticeReport.Enotice_LordBeingReleased)
          {
            noticeContent.Notice_LordBeingReleased = new NoticeContent.LordBeingReleased();
            noticeContent.Notice_LordBeingReleased.HomeKingdom = MP.ReadUShort();
            noticeContent.Notice_LordBeingReleased.AllianceTag = MP.ReadString(3);
            noticeContent.Notice_LordBeingReleased.Name = MP.ReadString(13);
          }
          else if (noticeContent.Type == NoticeReport.Enotice_LordBeingExecuted)
          {
            noticeContent.Notice_LordBeingExecuted = new NoticeContent.LordBeingExecuted();
            noticeContent.Notice_LordBeingExecuted.HomeKingdom = MP.ReadUShort();
            noticeContent.Notice_LordBeingExecuted.AllianceTag = MP.ReadString(3);
            noticeContent.Notice_LordBeingExecuted.Name = MP.ReadString(13);
          }
          else if (noticeContent.Type != NoticeReport.Enotice_LordEscaped)
          {
            if (noticeContent.Type == NoticeReport.Enotice_OtherBreakPrison)
            {
              noticeContent.Notice_OtherBreakPrison = new NoticeContent.OtherBreakPrison();
              noticeContent.Notice_OtherBreakPrison.HomeKingdom = MP.ReadUShort();
              noticeContent.Notice_OtherBreakPrison.AllianceTag = MP.ReadString(3);
              noticeContent.Notice_OtherBreakPrison.Name = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RescuedPrisoner)
            {
              noticeContent.Notice_RescuedPrisoner = new NoticeContent.RescuedPrisoner();
              noticeContent.Notice_RescuedPrisoner.HomeKingdom = MP.ReadUShort();
              noticeContent.Notice_RescuedPrisoner.AllianceTag = MP.ReadString(3);
              noticeContent.Notice_RescuedPrisoner.Name = MP.ReadString(13);
              noticeContent.Notice_RescuedPrisoner.PrisonerNum = MP.ReadByte();
              noticeContent.Notice_RescuedPrisoner.ClaimReward = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RequestRansom)
            {
              noticeContent.Notice_RequestRansom = new NoticeContent.RequestRansom();
              noticeContent.Notice_RequestRansom.Ransom = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_ReceivedRansom)
            {
              noticeContent.Notice_ReceivedRansom = new NoticeContent.ReceivedRansom();
              noticeContent.Notice_ReceivedRansom.Ransom = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_PrisonFull)
            {
              noticeContent.Notice_PrisonFull = new NoticeContent.PrisonFull();
              noticeContent.Notice_PrisonFull.HomeKingdom = MP.ReadUShort();
              noticeContent.Notice_PrisonFull.AllianceTag = MP.ReadString(3);
              noticeContent.Notice_PrisonFull.Name = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BeQuitAlliance)
            {
              noticeContent.Notice_BeQuitAlliance = new NoticeContent.BeQuitAlliance();
              noticeContent.Notice_BeQuitAlliance.Dealer = MP.ReadString(13);
              noticeContent.Notice_BeQuitAlliance.AllianceTag = MP.ReadString(3);
              noticeContent.Notice_BeQuitAlliance.Alliance = MP.ReadString(20);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BuyTreasure)
            {
              noticeContent.Notice_BuyTreasure = new NoticeContent.BuyTreasure();
              noticeContent.Notice_BuyTreasure.Crystal = MP.ReadUInt();
              noticeContent.Notice_BuyTreasure.BonusCrystal = MP.ReadUInt();
              noticeContent.Notice_BuyTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
              for (int index = 0; index < 5; ++index)
              {
                noticeContent.Notice_BuyTreasure.Gift[index] = new NoticeContent.TreasureAllianceGift();
                noticeContent.Notice_BuyTreasure.Gift[index].ItemID = MP.ReadUShort();
                noticeContent.Notice_BuyTreasure.Gift[index].ItemNum = MP.ReadUShort();
              }
              noticeContent.Notice_BuyTreasure.ItemNum = MP.ReadByte();
              noticeContent.Notice_BuyTreasure.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Notice_BuyTreasure.ItemNum];
              for (int index = 0; index < (int) noticeContent.Notice_BuyTreasure.ItemNum; ++index)
              {
                noticeContent.Notice_BuyTreasure.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Notice_BuyTreasure.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Notice_BuyTreasure.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Notice_BuyTreasure.Item[index].ItemRank = MP.ReadByte();
              }
              noticeContent.Notice_BuyTreasure.GiftTop = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel_Moving)
            {
              noticeContent.Notice_RallyNotice_Moving = new NoticeContent.RallyNotice_Moving();
              noticeContent.Notice_RallyNotice_Moving.HostName = MP.ReadString(13);
              noticeContent.Notice_RallyNotice_Moving.HostTag = MP.ReadString(3);
              noticeContent.Notice_RallyNotice_Moving.TargetName = MP.ReadString(13);
              noticeContent.Notice_RallyNotice_Moving.TargetTag = MP.ReadString(3);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AtkFailedSelfShield)
            {
              noticeContent.Enotice_AtkFailedSelfShield = new NoticeContent.AtkFailedSelfShield();
              noticeContent.Enotice_AtkFailedSelfShield.FailedType = MP.ReadByte();
              noticeContent.Enotice_AtkFailedSelfShield.KingdomID = MP.ReadUShort();
              noticeContent.Enotice_AtkFailedSelfShield.zoneID = MP.ReadUShort();
              noticeContent.Enotice_AtkFailedSelfShield.pointID = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RecivedGift)
            {
              noticeContent.Enotice_RecivedGift = new NoticeContent.Gifts();
              noticeContent.Enotice_RecivedGift.GiftsName = MP.ReadString(13);
              noticeContent.Enotice_RecivedGift.GiftsTag = MP.ReadString(3);
              noticeContent.Enotice_RecivedGift.Item = new NoticeContent.TreasureAllianceGift();
              noticeContent.Enotice_RecivedGift.Item.ItemID = MP.ReadUShort();
              noticeContent.Enotice_RecivedGift.Item.ItemNum = MP.ReadUShort();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_PrisonAmnestied)
            {
              noticeContent.Enotice_PrisonAmnestied = new NoticeContent.PrisonAmnestied();
              noticeContent.Enotice_PrisonAmnestied.KingsHomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_PrisonAmnestied.KingdomTag = MP.ReadString(3);
              noticeContent.Enotice_PrisonAmnestied.KingdomName = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_LordBeingAmnestied)
            {
              noticeContent.Enotice_LordBeingAmnestied = new NoticeContent.LordBeingAmnestied();
              noticeContent.Enotice_LordBeingAmnestied.KingsHomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_LordBeingAmnestied.KingdomTag = MP.ReadString(3);
              noticeContent.Enotice_LordBeingAmnestied.KingdomName = MP.ReadString(13);
              noticeContent.Enotice_LordBeingAmnestied.WardensHomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_LordBeingAmnestied.Tag = MP.ReadString(3);
              noticeContent.Enotice_LordBeingAmnestied.Name = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RulerGift)
            {
              noticeContent.Enotice_RulerGift = new NoticeContent.RulerGift();
              noticeContent.Enotice_RulerGift.RulerKind = MP.ReadByte();
              noticeContent.Enotice_RulerGift.RulerAllianceKingdomID = MP.ReadUShort();
              noticeContent.Enotice_RulerGift.Tag = MP.ReadString(3);
              noticeContent.Enotice_RulerGift.Name = MP.ReadString(13);
              noticeContent.Enotice_RulerGift.GiftKindNum = MP.ReadByte();
              noticeContent.Enotice_RulerGift.Gifts = new NoticeContent.TreasureAllianceGift[16];
              for (int index = 0; index < (int) noticeContent.Enotice_RulerGift.GiftKindNum; ++index)
              {
                noticeContent.Enotice_RulerGift.Gifts[index] = new NoticeContent.TreasureAllianceGift();
                noticeContent.Enotice_RulerGift.Gifts[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_RulerGift.Gifts[index].ItemNum = MP.ReadUShort();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_DismissAllianceLeader)
            {
              noticeContent.Enotice_DismissAllianceLeader = new NoticeContent.AllianceDismissLeader();
              noticeContent.Enotice_DismissAllianceLeader.OldLeader = MP.ReadString(13);
              noticeContent.Enotice_DismissAllianceLeader.NewLeader = MP.ReadString(13);
              noticeContent.Enotice_DismissAllianceLeader.OffLineDay = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AmbushDefSuccess)
            {
              noticeContent.Enotice_AmbushDefSuccess = new NoticeContent.Cantonment();
              noticeContent.Enotice_AmbushDefSuccess.AmbushName = MP.ReadString(13);
              noticeContent.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag = MP.ReadString(3);
              noticeContent.Enotice_AmbushDefSuccess.AtkPlayerName = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AmbushDefFailed)
            {
              noticeContent.Enotice_AmbushDefFailed = new NoticeContent.Cantonment();
              noticeContent.Enotice_AmbushDefFailed.AmbushName = MP.ReadString(13);
              noticeContent.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_AmbushDefFailed.AtkPlayerAllianceTag = MP.ReadString(3);
              noticeContent.Enotice_AmbushDefFailed.AtkPlayerName = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
            {
              noticeContent.Enotice_ActivityKVKDegreePrize = new NoticeContent.ActivityKVKDegreePrize();
              noticeContent.Enotice_ActivityKVKDegreePrize.ActType = (EActivityType) ((int) MP.ReadByte() - 1);
              noticeContent.Enotice_ActivityKVKDegreePrize.EventType = (EActivityKingdomEventType) MP.ReadByte();
              noticeContent.Enotice_ActivityKVKDegreePrize.Degree = MP.ReadByte();
              noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
            {
              noticeContent.Enotice_ActivityKVKRankPrize = new NoticeContent.ActivityKVKRankPrize();
              noticeContent.Enotice_ActivityKVKRankPrize.ActType = (EActivityType) ((int) MP.ReadByte() - 1);
              noticeContent.Enotice_ActivityKVKRankPrize.EventType = (EActivityKingdomEventType) MP.ReadByte();
              noticeContent.Enotice_ActivityKVKRankPrize.Place = MP.ReadByte();
              noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_ActivityKVKRankPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
            {
              noticeContent.Enotice_BuyBlackMarketTreasure = new NoticeContent.BuyTreasure();
              noticeContent.Enotice_BuyBlackMarketTreasure.Crystal = MP.ReadUInt();
              noticeContent.Enotice_BuyBlackMarketTreasure.BonusCrystal = MP.ReadUInt();
              noticeContent.Enotice_BuyBlackMarketTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
              for (int index = 0; index < 5; ++index)
              {
                noticeContent.Enotice_BuyBlackMarketTreasure.Gift[index] = new NoticeContent.TreasureAllianceGift();
                noticeContent.Enotice_BuyBlackMarketTreasure.Gift[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_BuyBlackMarketTreasure.Gift[index].ItemNum = MP.ReadUShort();
              }
              noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum = MP.ReadByte();
              noticeContent.Enotice_BuyBlackMarketTreasure.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum];
              for (int index = 0; index < (int) noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum; ++index)
              {
                noticeContent.Enotice_BuyBlackMarketTreasure.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Enotice_BuyBlackMarketTreasure.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_BuyBlackMarketTreasure.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Enotice_BuyBlackMarketTreasure.Item[index].ItemRank = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_KickOffTeam)
            {
              noticeContent.Enotice_KickOffTeam = new NoticeContent.KickOffTeam();
              noticeContent.Enotice_KickOffTeam.HostName = MP.ReadString(13);
              noticeContent.Enotice_KickOffTeam.AllianceTag = MP.ReadString(3);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AMRankPrize)
            {
              noticeContent.Enotice_AMRankPrize = new NoticeContent.ActivityKVKRankPrize();
              noticeContent.Enotice_AMRankPrize.ActType = (EActivityType) ((int) MP.ReadByte() - 1);
              noticeContent.Enotice_AMRankPrize.EventType = (EActivityKingdomEventType) MP.ReadByte();
              noticeContent.Enotice_AMRankPrize.Place = MP.ReadByte();
              noticeContent.Enotice_AMRankPrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_AMRankPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_AMRankPrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_AMRankPrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_AMRankPrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_AMRankPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_AMRankPrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AllianceHomeKingdom)
            {
              noticeContent.Enotice_AllianceHomeKingdom = new NoticeContent.AllianceChangeHomeKingdom();
              noticeContent.Enotice_AllianceHomeKingdom.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_AllianceHomeKingdom.Leader = MP.ReadString(13);
              noticeContent.Enotice_AllianceHomeKingdom.HomeKingdom = MP.ReadUShort();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_WorldKingPrize)
            {
              noticeContent.Enotice_WorldKingPrize = new NoticeContent.WorldKingPrize();
              noticeContent.Enotice_WorldKingPrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_WorldKingPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_WorldKingPrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_WorldKingPrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_WorldKingPrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_WorldKingPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_WorldKingPrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BackendAddCrystal)
            {
              noticeContent.Enotice_BackendAddCrystal = new NoticeContent.AddCrystal();
              noticeContent.Enotice_BackendAddCrystal.Crystal = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_LoginConpensate)
            {
              noticeContent.Enotice_LoginConpensate = new NoticeContent.AddCrystal();
              noticeContent.Enotice_LoginConpensate.Crystal = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_PurchaseConpensate)
            {
              noticeContent.Enotice_PurchaseConpensate = new NoticeContent.AddCrystal();
              noticeContent.Enotice_PurchaseConpensate.Crystal = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RallyNPCCancel)
            {
              noticeContent.Enotice_RallyNPCCancel = new NoticeContent.RallyNpcCancel();
              noticeContent.Enotice_RallyNPCCancel.HostName = MP.ReadString(13);
              noticeContent.Enotice_RallyNPCCancel.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_RallyNPCCancel.NPCLevel = MP.ReadByte();
              noticeContent.Enotice_RallyNPCCancel.NPCID = MP.ReadUShort();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
            {
              noticeContent.Enotice_RallyNPCCancelInvalid = new NoticeContent.RallyNpcCancel();
              noticeContent.Enotice_RallyNPCCancelInvalid.HostName = MP.ReadString(13);
              noticeContent.Enotice_RallyNPCCancelInvalid.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_RallyNPCCancelInvalid.NPCLevel = MP.ReadByte();
              noticeContent.Enotice_RallyNPCCancelInvalid.NPCID = MP.ReadUShort();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_LordEquipExpire)
            {
              noticeContent.Enotice_LordEquipExpire = new NoticeContent.LordEquipExpire();
              noticeContent.Enotice_LordEquipExpire.ItemID = MP.ReadUShort();
              noticeContent.Enotice_LordEquipExpire.Rank = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_WorldNotKingPrize)
            {
              noticeContent.Enotice_WorldNotKingPrize = new NoticeContent.WorldKingPrize_NotKing();
              noticeContent.Enotice_WorldNotKingPrize.Place = MP.ReadByte();
              noticeContent.Enotice_WorldNotKingPrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_WorldNotKingPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_WorldNotKingPrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_WorldNotKingPrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BuyEmoteTreasure)
            {
              noticeContent.Enotice_BuyEmoteTreasure = new NoticeContent.BuyEmoteTreasure();
              noticeContent.Enotice_BuyEmoteTreasure.ItemID = MP.ReadUShort();
              noticeContent.Enotice_BuyEmoteTreasure.ItemNum = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_PrisnerUsePoison)
            {
              noticeContent.Enotice_PrisnerUsePoison = new NoticeContent.PrisonerUsePoison();
              noticeContent.Enotice_PrisnerUsePoison.HomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_PrisnerUsePoison.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_PrisnerUsePoison.Name = MP.ReadString(13);
              noticeContent.Enotice_PrisnerUsePoison.EffectTime = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
            {
              noticeContent.Enotice_PrisnerPoisonEffect = new NoticeContent.PrisonerPoisonEffect();
              noticeContent.Enotice_PrisnerPoisonEffect.HomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_PrisnerPoisonEffect.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_PrisnerPoisonEffect.Name = MP.ReadString(13);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BackendActivity)
            {
              noticeContent.Enotice_BackendActivity = new NoticeContent.BackendActivity();
              noticeContent.Enotice_BackendActivity.Crystal = MP.ReadUInt();
              noticeContent.Enotice_BackendActivity.ItemNum = MP.ReadByte();
              noticeContent.Enotice_BackendActivity.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Enotice_BackendActivity.ItemNum];
              for (int index = 0; index < (int) noticeContent.Enotice_BackendActivity.ItemNum; ++index)
              {
                noticeContent.Enotice_BackendActivity.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Enotice_BackendActivity.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_BackendActivity.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Enotice_BackendActivity.Item[index].ItemRank = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
            {
              noticeContent.Enotice_BuyCastleSkinTreasure = new NoticeContent.BuyCastleSkinreasure();
              noticeContent.Enotice_BuyCastleSkinTreasure.CastleSkinID = MP.ReadUShort();
              noticeContent.Enotice_BuyCastleSkinTreasure.ItemID = MP.ReadUShort();
              noticeContent.Enotice_BuyCastleSkinTreasure.ItemNum = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_FederalRankPrize)
            {
              noticeContent.Enotice_FederalRankPrize = new NoticeContent.WorldKingPrize_NotKing();
              noticeContent.Enotice_FederalRankPrize.Place = MP.ReadByte();
              noticeContent.Enotice_FederalRankPrize.PrizeNum = MP.ReadByte();
              noticeContent.Enotice_FederalRankPrize.PrizeData = new NoticeContent.ActPrize[(int) noticeContent.Enotice_FederalRankPrize.PrizeNum];
              for (byte index = 0; (int) index < (int) noticeContent.Enotice_FederalRankPrize.PrizeNum; ++index)
              {
                noticeContent.Enotice_FederalRankPrize.PrizeData[(int) index].Rank = MP.ReadByte();
                noticeContent.Enotice_FederalRankPrize.PrizeData[(int) index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_FederalRankPrize.PrizeData[(int) index].Num = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_TreasureBackPrize)
            {
              noticeContent.Enotice_TreasureBackPrize = new NoticeContent.BuyTreasure();
              noticeContent.Enotice_TreasureBackPrize.Crystal = MP.ReadUInt();
              noticeContent.Enotice_TreasureBackPrize.BonusCrystal = MP.ReadUInt();
              noticeContent.Enotice_TreasureBackPrize.Gift = new NoticeContent.TreasureAllianceGift[5];
              for (int index = 0; index < 5; ++index)
              {
                noticeContent.Enotice_TreasureBackPrize.Gift[index] = new NoticeContent.TreasureAllianceGift();
                noticeContent.Enotice_TreasureBackPrize.Gift[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_TreasureBackPrize.Gift[index].ItemNum = MP.ReadUShort();
              }
              noticeContent.Enotice_TreasureBackPrize.ItemNum = MP.ReadByte();
              noticeContent.Enotice_TreasureBackPrize.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Enotice_TreasureBackPrize.ItemNum];
              for (int index = 0; index < (int) noticeContent.Enotice_TreasureBackPrize.ItemNum; ++index)
              {
                noticeContent.Enotice_TreasureBackPrize.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Enotice_TreasureBackPrize.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_TreasureBackPrize.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Enotice_TreasureBackPrize.Item[index].ItemRank = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_LookingForStringTable)
            {
              noticeContent.Enotice_LookingForStringTable = new NoticeContent.LookingForStringTable();
              noticeContent.Enotice_LookingForStringTable.Title = MP.ReadUInt();
              noticeContent.Enotice_LookingForStringTable.Content = MP.ReadUInt();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_MarchingPet_Cancel)
            {
              noticeContent.Enotice_MarchingPet_Cancel = new NoticeContent.MarchingPet_Cancel();
              noticeContent.Enotice_MarchingPet_Cancel.HasTarget = MP.ReadByte();
              noticeContent.Enotice_MarchingPet_Cancel.HomeKingdom = MP.ReadUShort();
              noticeContent.Enotice_MarchingPet_Cancel.AllianceTag = MP.ReadString(3);
              noticeContent.Enotice_MarchingPet_Cancel.Name = MP.ReadString(13);
              noticeContent.Enotice_MarchingPet_Cancel.PetID = MP.ReadUShort();
              noticeContent.Enotice_MarchingPet_Cancel.Skill_ID = MP.ReadUShort();
              noticeContent.Enotice_MarchingPet_Cancel.Skill_LV = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.ENotice_PetStarUp)
            {
              noticeContent.ENotice_PetStarUp = new NoticeContent.PetStarUp();
              noticeContent.ENotice_PetStarUp.PetID = MP.ReadUShort();
              noticeContent.ENotice_PetStarUp.PetStar = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.ENotice_PrisonerPetSkillEscaped)
            {
              noticeContent.ENotice_PrisonerPetSkillEscaped = new NoticeContent.PetSkillEscaped();
              noticeContent.ENotice_PrisonerPetSkillEscaped.PetID = MP.ReadUShort();
              noticeContent.ENotice_PrisonerPetSkillEscaped.Skill_ID = MP.ReadUShort();
              noticeContent.ENotice_PrisonerPetSkillEscaped.Skill_LV = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.ENotice_LordPetSkillEscaped)
            {
              noticeContent.ENotice_LordPetSkillEscaped = new NoticeContent.PetSkillEscaped();
              noticeContent.ENotice_LordPetSkillEscaped.PetID = MP.ReadUShort();
              noticeContent.ENotice_LordPetSkillEscaped.Skill_ID = MP.ReadUShort();
              noticeContent.ENotice_LordPetSkillEscaped.Skill_LV = MP.ReadByte();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_ScoutTargetLeave)
            {
              noticeContent.Enotice_ScoutTargetLeave = new NoticeContent.MarchTargetLeave();
              noticeContent.Enotice_ScoutTargetLeave.OffsetLen = noticeContent.OffsetLen;
              if (noticeContent.Enotice_ScoutTargetLeave.OffsetLen > 0U)
              {
                noticeContent.Enotice_ScoutTargetLeave.HomeKingdom = MP.ReadUShort();
                noticeContent.Enotice_ScoutTargetLeave.AllianceTag = MP.ReadString(3);
                noticeContent.Enotice_ScoutTargetLeave.Name = MP.ReadString(13);
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_AttackTargetLeave)
            {
              noticeContent.Enotice_AttackTargetLeave = new NoticeContent.MarchTargetLeave();
              noticeContent.Enotice_AttackTargetLeave.OffsetLen = noticeContent.OffsetLen;
              if (noticeContent.Enotice_AttackTargetLeave.OffsetLen > 0U)
              {
                noticeContent.Enotice_AttackTargetLeave.HomeKingdom = MP.ReadUShort();
                noticeContent.Enotice_AttackTargetLeave.AllianceTag = MP.ReadString(3);
                noticeContent.Enotice_AttackTargetLeave.Name = MP.ReadString(13);
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_MaintainCompensation)
            {
              noticeContent.Enotice_MaintainCompensation = new NoticeContent.MaintainCompensation();
              noticeContent.Enotice_MaintainCompensation.MailTitleStrID = MP.ReadUShort();
              noticeContent.Enotice_MaintainCompensation.MailContentStrID = MP.ReadUShort();
              noticeContent.Enotice_MaintainCompensation.Crystal = MP.ReadUInt();
              noticeContent.Enotice_MaintainCompensation.ItemNum = MP.ReadByte();
              noticeContent.Enotice_MaintainCompensation.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Enotice_MaintainCompensation.ItemNum];
              for (int index = 0; index < (int) noticeContent.Enotice_MaintainCompensation.ItemNum; ++index)
              {
                noticeContent.Enotice_MaintainCompensation.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Enotice_MaintainCompensation.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_MaintainCompensation.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Enotice_MaintainCompensation.Item[index].ItemRank = MP.ReadByte();
              }
            }
            else if (noticeContent.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
            {
              noticeContent.Enotice_BuyRedPocketTreasure = new NoticeContent.BuyRedPocketTreasure();
              noticeContent.Enotice_BuyRedPocketTreasure.StringID = MP.ReadUShort();
            }
            else if (noticeContent.Type == NoticeReport.Enotice_SocialFriendModify)
            {
              noticeContent.Enotice_SocialFriendModify = new NoticeContent.SocialFriendMail();
              noticeContent.Enotice_SocialFriendModify.RemoveType = MP.ReadByte();
              noticeContent.Enotice_SocialFriendModify.TargetName = MP.ReadString(41);
              noticeContent.Enotice_SocialFriendModify.PlayerName = MP.ReadString(13);
              noticeContent.Enotice_SocialFriendModify.PlayerTag = MP.ReadString(3);
            }
            else if (noticeContent.Type == NoticeReport.Enotice_ReturnCeremony)
            {
              noticeContent.Enotice_ReturnCeremony = new NoticeContent.ReturnCeremony();
              noticeContent.Enotice_ReturnCeremony.Crystal = MP.ReadUInt();
              noticeContent.Enotice_ReturnCeremony.ItemNum = MP.ReadByte();
              noticeContent.Enotice_ReturnCeremony.Item = new NoticeContent.ComboBoxTBItem[(int) noticeContent.Enotice_ReturnCeremony.ItemNum];
              for (int index = 0; index < (int) noticeContent.Enotice_ReturnCeremony.ItemNum; ++index)
              {
                noticeContent.Enotice_ReturnCeremony.Item[index] = new NoticeContent.ComboBoxTBItem();
                noticeContent.Enotice_ReturnCeremony.Item[index].ItemID = MP.ReadUShort();
                noticeContent.Enotice_ReturnCeremony.Item[index].ItemNum = MP.ReadUShort();
                noticeContent.Enotice_ReturnCeremony.Item[index].ItemRank = MP.ReadByte();
              }
            }
          }
        }
        if (this.Mailing.SystemSerial.Matrix.TryGetValue(noticeContent.SerialID, out this.DoFavor.Box))
        {
          this.DoFavor.Box.Pull = true;
        }
        else
        {
          this.Mailing.SystemSerial.Matrix[noticeContent.SerialID] = new SerialBox(noticeContent.SerialID, noticeContent.Flag, noticeContent.BeRead, noticeContent.BeSave);
          if (!noticeContent.BeRead)
            AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
        }
        if (noticeContent.BeSave)
        {
          if (!this.Mailing.FavorSerial.System.Mail.ContainsKey(this.Mailing.SystemSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
          {
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.SystemSerial.New;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = noticeContent.Times;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_SYSTEM;
            this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
            ++this.Mailing.FavorSerial.Count;
          }
          this.Mailing.SystemSerial.Order.Add(new MailSaveOrder(this.Mailing.SystemSerial.New, (byte) 1));
          this.Mailing.FavorSerial.System.Mail[this.Mailing.SystemSerial.New] = noticeContent;
          this.Mailing.FavorSerial.Infolog = true;
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
        }
        else
        {
          this.Mailing.SystemSerial.Order.Add(new MailSaveOrder(this.Mailing.SystemSerial.New, (byte) 0));
          if (!this.Mailing.SystemSerial.Mail.ContainsKey(this.Mailing.SystemSerial.New) && (long) this.Mailing.SystemSerial.Count < (long) this.Mailing.SystemSerial.Inbox.Length)
          {
            this.Mailing.SystemSerial.Inbox[(IntPtr) this.Mailing.SystemSerial.Count].Serial = this.Mailing.SystemSerial.New;
            this.Mailing.SystemSerial.Inbox[(IntPtr) this.Mailing.SystemSerial.Count].Timing = noticeContent.Times;
            this.Mailing.SystemSerial.Inbox[(IntPtr) this.Mailing.SystemSerial.Count].Type = MailType.EMAIL_SYSTEM;
            this.Mailing.SystemSerial.Inbox[(IntPtr) this.Mailing.SystemSerial.Count].Change = true;
            ++this.Mailing.SystemSerial.Count;
          }
          this.Mailing.SystemSerial.Mail[this.Mailing.SystemSerial.New] = noticeContent;
          this.MailDataRefresh(MailType.EMAIL_SYSTEM);
        }
        if (!noticeContent.BeRead)
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
        break;
      case Protocol._MSG_RESP_NOTICEMARKREAD:
        this.Mailing.SystemSerial.Last = (uint) MP.ReadByte();
        this.DoFavor.Type = MailType.EMAIL_SYSTEM;
        for (int index = 0; (long) index < (long) this.Mailing.SystemSerial.Last; ++index)
        {
          this.DoFavor.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref this.DoFavor))
          {
            this.DoFavor.Mail.BeRead = true;
            --this.Mailing.FavorSerial.Unseen;
          }
          else
          {
            if (!this.Mailing.SystemSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.System))
              return;
            --this.Mailing.SystemSerial.Unseen;
            this.DoFavor.System.BeRead = true;
            this.DoFavor.System.Flag |= (byte) 1;
            if (this.DoFavor.System.BeKept)
              this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0U, 0U);
          }
        }
        if (this.Mailing.SystemSerial.Last > 0U)
          this.SaveMail(this.DoFavor.Type);
        GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
        break;
      case Protocol._MSG_RESP_SAVENOTICE:
        this.DoFavor.Serial = MP.ReadUInt();
        this.DoFavor.Kind = MailType.EMAIL_SYSTEM;
        this.DoFavor.Type = MailType.EMAIL_SYSTEM;
        if (this.MailReportGet(ref this.DoFavor))
        {
          this.DoFavor.System.BeSave = true;
          this.DoFavor.System.Flag |= (byte) 2;
          if (this.Mailing.FavorSerial.System.Mail.ContainsKey(this.DoFavor.System.SerialID) || (long) this.Mailing.FavorSerial.Count >= (long) this.Mailing.FavorSerial.Inbox.Length)
            break;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = this.DoFavor.Kind;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.DoFavor.System.SerialID;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = this.DoFavor.System.Times;
          this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
          this.Mailing.FavorSerial.Infolog = true;
          ++this.Mailing.FavorSerial.Count;
          this.Mailing.FavorSerial.System.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
          this.DeleteMail(this.DoFavor, this.DoFavor.System.SerialID, 0U);
          if (this.DoFavor.System.BeKept)
          {
            this.DoFavor.Kind = MailType.EMAIL_FAVORY;
            this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
          }
          this.Mailing.SystemSerial.Inbox[(int) this.DoFavor.System.Index].Serial = 0U;
          this.Mailing.SystemSerial.Mail.Remove(this.DoFavor.System.SerialID);
          if (this.Mailing.SystemSerial.Count > 0U)
            --this.Mailing.SystemSerial.Count;
          ++this.Mailing.SystemSerial.Change;
          this.MailDataRefresh(MailType.EMAIL_SYSTEM);
          this.MailDataRefresh(MailType.EMAIL_FAVORY);
          this.SaveMail(MailType.EMAIL_SYSTEM);
          this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
          this.MailingboxRefresh(MailType.EMAIL_FAVORY);
          GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
          if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(681U), (ushort) byte.MaxValue);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2);
        break;
      case Protocol._MSG_RESP_DELETENOTICE:
        this.Mailing.SystemSerial.Last = (uint) MP.ReadByte();
        this.DoFavor.Type = MailType.EMAIL_SYSTEM;
        for (int index9 = 0; (long) index9 < (long) this.Mailing.SystemSerial.Last; ++index9)
        {
          this.DoFavor.Serial = MP.ReadUInt();
          if (this.FavorReportGet(ref this.DoFavor))
          {
            for (int index10 = 0; index10 < this.Mailing.FavorSerial.Inbox.Length; ++index10)
            {
              if (this.Mailing.FavorSerial.Inbox[index10].Type == this.DoFavor.Type && (int) this.Mailing.FavorSerial.Inbox[index10].Serial == (int) this.DoFavor.Mail.SerialID)
              {
                this.Mailing.FavorSerial.Inbox[index10].Serial = 0U;
                --this.Mailing.FavorSerial.Count;
                break;
              }
            }
            this.Mailing.FavorSerial.Mail.Mail.Remove(this.DoFavor.Serial);
          }
          else
          {
            this.DoFavor.Type = MailType.EMAIL_SYSTEM;
            this.DoFavor.Kind = MailType.EMAIL_SYSTEM;
            if ((this.DoFavor.System = this.SystemReportGet(this.DoFavor.Serial)) != null)
            {
              this.DoFavor.System.BeKill = true;
              if (this.DoFavor.System.BeChecked && this.Outlooking && this.Mailing.SystemSerial.Select > 0U)
                --this.Mailing.SystemSerial.Select;
              this.Mailing.SystemSerial.Inbox[(int) this.DoFavor.System.Index].Serial = 0U;
              if (this.Mailing.SystemSerial.Count > 0U)
                --this.Mailing.SystemSerial.Count;
              this.DeleteMail(this.DoFavor, this.DoFavor.Serial, 0U);
              this.Mailing.SystemSerial.Mail.Remove(this.DoFavor.Serial);
            }
          }
        }
        if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && this.Mailing.SystemSerial.Last > 0U)
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683U), (ushort) byte.MaxValue);
        this.MailDataRefresh(MailType.EMAIL_SYSTEM);
        if (this.Mailing.SystemSerial.Last > 0U)
          this.SaveMail(MailType.EMAIL_SYSTEM);
        this.SaveMailData(MP.Protocol);
        this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
        GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2);
        break;
      default:
        switch (protocol)
        {
          case Protocol._MSG_RESP_MAIL_ERROR:
            this.DeleteMail(MailType.EMAIL_LETTER, this.DoFavor.Serial = MP.ReadUInt());
            this.Mailing.MailSerial.Matrix.Remove(this.DoFavor.Serial);
            this.MailDataRefresh(MailType.EMAIL_FAVORY);
            this.MailDataRefresh(MailType.EMAIL_LETTER);
            this.MailingboxRefresh(MailType.EMAIL_LETTER);
            GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            return;
          case Protocol._MSG_RESP_REPORT_ERROR:
            this.DeleteMail(MailType.EMAIL_BATTLE, this.DoFavor.Serial = MP.ReadUInt());
            this.Mailing.ReportSerial.Matrix.Remove(this.DoFavor.Serial);
            this.MailDataRefresh(MailType.EMAIL_FAVORY);
            this.MailDataRefresh(MailType.EMAIL_BATTLE);
            this.MailingboxRefresh(MailType.EMAIL_BATTLE);
            GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            return;
          case Protocol._MSG_RESP_NOTICE_ERROR:
            this.DeleteMail(MailType.EMAIL_SYSTEM, this.DoFavor.Serial = MP.ReadUInt());
            this.Mailing.SystemSerial.Matrix.Remove(this.DoFavor.Serial);
            this.MailDataRefresh(MailType.EMAIL_FAVORY);
            this.MailDataRefresh(MailType.EMAIL_SYSTEM);
            this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
            GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            return;
          case Protocol._MSG_RESP_SCOUT_NPC_REPORTINFO:
            global::CombatReport combatReport7 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_NPCSCOUT);
            combatReport7.NPCScout = new NPCScoutReportContent();
            combatReport7.SetData(MP.ReadByte(), MP.ReadLong());
            combatReport7.BeRead = ((int) combatReport7.Flag & 1) > 0;
            combatReport7.BeSave = ((int) combatReport7.Flag & 2) > 0;
            combatReport7.NPCScout.KingdomID = MP.ReadUShort();
            combatReport7.NPCScout.CombatlZone = MP.ReadUShort();
            combatReport7.NPCScout.CombatPoint = MP.ReadByte();
            combatReport7.NPCScout.CombatPointKind = (POINT_KIND) MP.ReadByte();
            combatReport7.NPCScout.NPCLevel = MP.ReadByte();
            combatReport7.NPCScout.NPCID = MP.ReadUShort();
            combatReport7.NPCScout.Reward = MP.ReadUShort();
            combatReport7.NPCScout.ScoutResult = MP.ReadByte();
            combatReport7.NPCScout.ScoutLevel = MP.ReadByte();
            combatReport7.NPCScout.ScoutContentLen = MP.ReadUShort();
            combatReport7.NPCScout.ScoutContent = new byte[(int) combatReport7.NPCScout.ScoutContentLen];
            MP.ReadBlock(combatReport7.NPCScout.ScoutContent, 0, (int) combatReport7.NPCScout.ScoutContentLen);
            if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport7.SerialID, out this.DoFavor.Box))
            {
              this.DoFavor.Box.Pull = true;
            }
            else
            {
              this.Mailing.ReportSerial.Matrix[combatReport7.SerialID] = new SerialBox(combatReport7.SerialID, combatReport7.Flag, combatReport7.BeRead, combatReport7.BeSave);
              if (!combatReport7.BeRead)
                AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
            }
            if (combatReport7.BeSave)
            {
              if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
              {
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport7.Times;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
                ++this.Mailing.FavorSerial.Count;
              }
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
              this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport7;
              this.Mailing.FavorSerial.Infolog = true;
              this.MailDataRefresh(MailType.EMAIL_FAVORY);
            }
            else
            {
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
              if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
              {
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport7.Times;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
                if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
                  ++this.Mailing.ReportSerial.Count;
              }
              this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport7;
              this.MailDataRefresh(MailType.EMAIL_BATTLE);
            }
            if (!combatReport7.BeRead)
              GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
            return;
          case Protocol._MSG_RESP_NPC_COMBATREPORTINFO:
            global::CombatReport combatReport8 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_NPCCOMBAT);
            combatReport8.NPCCombat = new NPCCombatReportContent();
            combatReport8.SetData(MP.ReadByte(), MP.ReadLong());
            combatReport8.BeRead = ((int) combatReport8.Flag & 1) > 0;
            combatReport8.BeSave = ((int) combatReport8.Flag & 2) > 0;
            combatReport8.NPCCombat.KingdomID = MP.ReadUShort();
            combatReport8.NPCCombat.CombatlZone = MP.ReadUShort();
            combatReport8.NPCCombat.CombatPoint = MP.ReadByte();
            combatReport8.NPCCombat.CombatPointKind = (POINT_KIND) MP.ReadByte();
            combatReport8.NPCCombat.Side = MP.ReadByte();
            combatReport8.NPCCombat.AssaultKingdomID = MP.ReadUShort();
            combatReport8.NPCCombat.AssaultAllianceTag = MP.ReadString(3);
            combatReport8.NPCCombat.AssaultName = MP.ReadString(13);
            combatReport8.NPCCombat.NPCLevel = MP.ReadByte();
            combatReport8.NPCCombat.NPCID = MP.ReadUShort();
            combatReport8.NPCCombat.Result = (CombatReportResultType) MP.ReadByte();
            combatReport8.NPCCombat.Reward = MP.ReadUShort();
            combatReport8.NPCCombat.HeroData = new CombatHeroExpData[5];
            for (int index = 0; index < combatReport8.NPCCombat.HeroData.Length; ++index)
            {
              combatReport8.NPCCombat.HeroData[index] = new CombatHeroExpData();
              combatReport8.NPCCombat.HeroData[index].HeroID = MP.ReadUShort();
              combatReport8.NPCCombat.HeroData[index].Star = MP.ReadByte();
            }
            combatReport8.NPCCombat.EarnLordExp = MP.ReadUInt();
            combatReport8.NPCCombat.EarnHeroExp = MP.ReadUInt();
            combatReport8.NPCCombat.DetailAutoID = MP.ReadULong();
            combatReport8.NPCCombat.DetailDbServerID = MP.ReadInt();
            combatReport8.NPCCombat.AccessKey = MP.ReadInt();
            combatReport8.NPCCombat.DetailSelfIndex = MP.ReadByte();
            combatReport8.NPCCombat.ResurrextTotal = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.AssaultCapitalZone = MP.ReadUShort();
            combatReport8.NPCCombat.SummaryHead.AssaultCapitalPoint = MP.ReadByte();
            combatReport8.NPCCombat.SummaryHead.AssaultLosePower = MP.ReadULong();
            combatReport8.NPCCombat.SummaryHead.AssaultTroopForce = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.AssaultTroopInjure = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.AssaultTroopDeath = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.DefenceCapitalZone = MP.ReadUShort();
            combatReport8.NPCCombat.SummaryHead.DefenceCapitalPoint = MP.ReadByte();
            combatReport8.NPCCombat.SummaryHead.DefenceLosePower = MP.ReadULong();
            combatReport8.NPCCombat.SummaryHead.DefenceTroopForce = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.DefenceTroopInjure = MP.ReadUInt();
            combatReport8.NPCCombat.SummaryHead.DefenceTroopDeath = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.WallDefence = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.WallDamage = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.TrapNumber = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.LoseTrapNumber = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.SaveTrapNumber = MP.ReadUInt();
            combatReport8.NPCCombat.Summary.AssaultLevel = MP.ReadByte();
            combatReport8.NPCCombat.Summary.AssaultHead = MP.ReadUShort();
            combatReport8.NPCCombat.Summary.AssaultLordInCombat = MP.ReadByte();
            combatReport8.NPCCombat.Summary.AssaultVIPLevel = MP.ReadByte();
            combatReport8.NPCCombat.Summary.IsLeader = MP.ReadByte();
            combatReport8.NPCCombat.Summary.AssaultAllianceRank = MP.ReadByte();
            combatReport8.NPCCombat.Version = MP.ReadUInt();
            combatReport8.NPCCombat.PatchNo = MP.ReadUInt();
            combatReport8.NPCCombat.AssaultArmyCoord = MP.ReadByte();
            combatReport8.NPCCombat.DefenceArmyCoord = MP.ReadByte();
            combatReport8.NPCCombat.PetSkillPatchNo = MP.ReadUInt();
            combatReport8.NPCCombat.m_AssaultPetSkill_ID = new ushort[20];
            for (int index = 0; index < combatReport8.NPCCombat.m_AssaultPetSkill_ID.Length; ++index)
              combatReport8.NPCCombat.m_AssaultPetSkill_ID[index] = MP.ReadUShort();
            combatReport8.NPCCombat.m_AssaultPetSkill_LV = new byte[20];
            for (int index = 0; index < combatReport8.NPCCombat.m_AssaultPetSkill_LV.Length; ++index)
              combatReport8.NPCCombat.m_AssaultPetSkill_LV[index] = MP.ReadByte();
            if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport8.SerialID, out this.DoFavor.Box))
            {
              this.DoFavor.Box.Pull = true;
            }
            else
            {
              this.Mailing.ReportSerial.Matrix[combatReport8.SerialID] = new SerialBox(combatReport8.SerialID, combatReport8.Flag, combatReport8.BeRead, combatReport8.BeSave);
              if (!combatReport8.BeRead)
                AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
            }
            if (combatReport8.BeSave)
            {
              if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
              {
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport8.Times;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
                ++this.Mailing.FavorSerial.Count;
              }
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
              this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport8;
              this.Mailing.FavorSerial.Infolog = true;
              this.MailDataRefresh(MailType.EMAIL_FAVORY);
            }
            else
            {
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
              if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
              {
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport8.Times;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
                if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
                  ++this.Mailing.ReportSerial.Count;
              }
              this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport8;
              this.MailDataRefresh(MailType.EMAIL_BATTLE);
            }
            if (!combatReport8.BeRead)
              GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
            return;
          case Protocol._MSG_RESP_PET_REPORTINFO:
            global::CombatReport combatReport9 = new global::CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(), CombatCollectReport.CCR_PETREPORT);
            combatReport9.Pet = new PetReportContent();
            combatReport9.SetData(MP.ReadByte(), MP.ReadLong());
            combatReport9.BeRead = ((int) combatReport9.Flag & 1) > 0;
            combatReport9.BeSave = ((int) combatReport9.Flag & 2) > 0;
            combatReport9.Pet.KindgomID = MP.ReadUShort();
            combatReport9.Pet.Zone = MP.ReadUShort();
            combatReport9.Pet.Point = MP.ReadByte();
            combatReport9.Pet.Kind = MP.ReadByte();
            combatReport9.Pet.Side = MP.ReadByte();
            combatReport9.Pet.AssaultKingdomID = MP.ReadUShort();
            combatReport9.Pet.AssaultAllianceTag = MP.ReadString(3);
            combatReport9.Pet.AssaultName = MP.ReadString(13);
            combatReport9.Pet.AssaultCapitalZone = MP.ReadUShort();
            combatReport9.Pet.AssaultCapitalPoint = MP.ReadByte();
            combatReport9.Pet.AssaultLevel = MP.ReadByte();
            combatReport9.Pet.AssaultHead = MP.ReadUShort();
            combatReport9.Pet.AssaultVIPLevel = MP.ReadByte();
            combatReport9.Pet.AssaultAllianceRank = MP.ReadByte();
            combatReport9.Pet.DefenceKingdomID = MP.ReadUShort();
            combatReport9.Pet.DefenceAllianceTag = MP.ReadString(3);
            combatReport9.Pet.DefenceName = MP.ReadString(13);
            combatReport9.Pet.DefenceCapitalZone = MP.ReadUShort();
            combatReport9.Pet.DefenceCapitalPoint = MP.ReadByte();
            combatReport9.Pet.DefenceLevel = MP.ReadByte();
            combatReport9.Pet.DefenceHead = MP.ReadUShort();
            combatReport9.Pet.DefenceVIPLevel = MP.ReadByte();
            combatReport9.Pet.DefenceAllianceRank = MP.ReadByte();
            combatReport9.Pet.PatchNo = MP.ReadUInt();
            combatReport9.Pet.PetID = MP.ReadUShort();
            combatReport9.Pet.PetStar = MP.ReadByte();
            combatReport9.Pet.SkillID = MP.ReadUShort();
            combatReport9.Pet.SkillLevel = MP.ReadByte();
            combatReport9.Pet.DeadTroops = new uint[16];
            combatReport9.Pet.InjureTroops = new uint[16];
            combatReport9.Pet.Resource = new uint[5];
            combatReport9.Pet.Result = (PetReportResultType) MP.ReadByte();
            if (combatReport9.Pet.Result == PetReportResultType.EPRR_ATTACK_RSS || combatReport9.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_RSS)
            {
              for (byte index = 0; (int) index < combatReport9.Pet.Resource.Length; ++index)
                combatReport9.Pet.Resource[(int) index] = MP.ReadUInt();
            }
            else if (combatReport9.Pet.Result == PetReportResultType.EPRR_ATTACK_TROOP)
            {
              combatReport9.Pet.LostPower = MP.ReadULong();
              combatReport9.Pet.TotalInjure = MP.ReadUInt();
              combatReport9.Pet.TotalDead = MP.ReadUInt();
            }
            else if (combatReport9.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_TROOP)
            {
              combatReport9.Pet.LostPower = MP.ReadULong();
              for (int index = 0; index < combatReport9.Pet.InjureTroops.Length; ++index)
                combatReport9.Pet.InjureTroops[index] = MP.ReadUInt();
              for (int index = 0; index < combatReport9.Pet.DeadTroops.Length; ++index)
                combatReport9.Pet.DeadTroops[index] = MP.ReadUInt();
            }
            else if (combatReport9.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_WALL)
              combatReport9.Pet.WallDamage = MP.ReadUInt();
            if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport9.SerialID, out this.DoFavor.Box))
              this.DoFavor.Box.Pull = true;
            else
              this.Mailing.ReportSerial.Matrix[combatReport9.SerialID] = new SerialBox(combatReport9.SerialID, combatReport9.Flag, combatReport9.BeRead, combatReport9.BeSave);
            if (combatReport9.BeSave)
            {
              if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (long) this.Mailing.FavorSerial.Count < (long) this.Mailing.FavorSerial.Inbox.Length)
              {
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Timing = combatReport9.Times;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.FavorSerial.Inbox[(IntPtr) this.Mailing.FavorSerial.Count].Change = true;
                ++this.Mailing.FavorSerial.Count;
              }
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 1));
              this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport9;
              this.Mailing.FavorSerial.Infolog = true;
              this.MailDataRefresh(MailType.EMAIL_FAVORY);
            }
            else
            {
              this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, (byte) 0));
              if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New) && this.Mailing.ReportSerial.Mail.Count < 130)
              {
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Serial = this.Mailing.ReportSerial.New;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Timing = combatReport9.Times;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Type = MailType.EMAIL_BATTLE;
                this.Mailing.ReportSerial.Inbox[(IntPtr) this.Mailing.ReportSerial.Count].Change = true;
                if ((long) this.Mailing.ReportSerial.Count < (long) (this.Mailing.ReportSerial.Inbox.Length - 1))
                  ++this.Mailing.ReportSerial.Count;
              }
              this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport9;
              this.MailDataRefresh(MailType.EMAIL_BATTLE);
            }
            if (!combatReport9.BeRead)
              GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
            this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
            return;
          default:
            return;
        }
    }
  }

  public bool isNotEmojiCharacter(char codePoint)
  {
    if (codePoint == char.MinValue || codePoint == '\t' || codePoint == '\n' || codePoint == '\r' || codePoint >= ' ' && codePoint <= '\uD7FF')
      return true;
    return codePoint >= '\uE000' && codePoint <= '�';
  }

  public void InitialMail()
  {
  }

  public void PurgeMail()
  {
    this.Mailing.Flag = new MailSave();
    this.Mailing.MailSerial = new MailSerial();
    this.Mailing.FavorSerial = new FavorSerial();
    this.Mailing.ReportSerial = new ReportSerial();
    this.Mailing.SystemSerial = new SystemSerial();
    this.SaveMail(MailType.EMAIL_LETTER);
    this.SaveMail(MailType.EMAIL_BATTLE);
    this.SaveMail(MailType.EMAIL_SYSTEM);
  }

  public void ResetMail()
  {
    this.Mailing.Flag = new MailSave();
    this.Mailing.MailSerial = new MailSerial();
    this.Mailing.FavorSerial = new FavorSerial();
    this.Mailing.ReportSerial = new ReportSerial();
    this.Mailing.SystemSerial = new SystemSerial();
    this.SaveMail(MailType.EMAIL_LETTER);
    this.SaveMail(MailType.EMAIL_BATTLE);
    this.SaveMail(MailType.EMAIL_SYSTEM);
    NetworkManager.Reload();
  }

  public bool ClearMail(MailType MT, bool Force = false)
  {
    switch (MT)
    {
      case MailType.EMAIL_SYSTEM:
        uint total1 = this.Mailing.SystemSerial.Total;
        uint unread1 = this.Mailing.SystemSerial.Unread;
        uint num1 = this.Mailing.SystemSerial.Max = this.Mailing.SystemSerial.Last;
        this.Mailing.SystemSerial = new SystemSerial();
        for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
        {
          if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == MailType.EMAIL_SYSTEM)
          {
            this.Mailing.FavorSerial.System.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int) index].Serial);
            this.Mailing.FavorSerial.Inbox[(int) index].Serial = 0U;
            if (this.Mailing.FavorSerial.Count > 0U)
              --this.Mailing.FavorSerial.Count;
          }
        }
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        if (!Force)
        {
          this.Mailing.SystemSerial.Total = total1;
          this.Mailing.SystemSerial.Unread = unread1;
          this.Mailing.SystemSerial.Max = this.Mailing.SystemSerial.Last = num1;
          break;
        }
        break;
      case MailType.EMAIL_BATTLE:
        uint total2 = this.Mailing.ReportSerial.Total;
        uint unread2 = this.Mailing.ReportSerial.Unread;
        uint num2 = this.Mailing.ReportSerial.Max = this.Mailing.ReportSerial.Last;
        this.Mailing.ReportSerial = new ReportSerial();
        for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
        {
          if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == MailType.EMAIL_BATTLE)
          {
            this.Mailing.FavorSerial.Combat.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int) index].Serial);
            this.Mailing.FavorSerial.Inbox[(int) index].Serial = 0U;
            if (this.Mailing.FavorSerial.Count > 0U)
              --this.Mailing.FavorSerial.Count;
          }
        }
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        if (!Force)
        {
          this.Mailing.ReportSerial.Total = total2;
          this.Mailing.ReportSerial.Unread = unread2;
          this.Mailing.ReportSerial.Max = this.Mailing.ReportSerial.Last = num2;
          break;
        }
        break;
      case MailType.EMAIL_LETTER:
        uint total3 = this.Mailing.MailSerial.Total;
        uint unread3 = this.Mailing.MailSerial.Unread;
        uint num3 = this.Mailing.MailSerial.Max = this.Mailing.MailSerial.Last;
        this.Mailing.MailSerial = new MailSerial();
        for (ushort index = 0; (int) index < this.Mailing.FavorSerial.Inbox.Length; ++index)
        {
          if (this.Mailing.FavorSerial.Inbox[(int) index].Serial > 0U && this.Mailing.FavorSerial.Inbox[(int) index].Type == MailType.EMAIL_LETTER)
          {
            this.Mailing.FavorSerial.Mail.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int) index].Serial);
            this.Mailing.FavorSerial.Inbox[(int) index].Serial = 0U;
            if (this.Mailing.FavorSerial.Count > 0U)
              --this.Mailing.FavorSerial.Count;
          }
        }
        this.MailDataRefresh(MailType.EMAIL_FAVORY);
        if (!Force)
        {
          this.Mailing.MailSerial.Total = total3;
          this.Mailing.MailSerial.Unread = unread3;
          this.Mailing.MailSerial.Max = this.Mailing.MailSerial.Last = num3;
          break;
        }
        break;
      default:
        this.PurgeMail();
        break;
    }
    this.SaveMail(MT);
    if (Force)
      NetworkManager.Reload();
    return true;
  }

  public void MailingboxRefresh(MailType MT = MailType.EMAIL_MAX, ReportSubSet RSS = ReportSubSet.REPORTSet_MAX)
  {
    DataManager.msgBuffer[0] = (byte) MT;
    DataManager.msgBuffer[1] = (byte) RSS;
    GameManager.OnRefresh(NetworkNews.Refresh_Mailing, DataManager.msgBuffer);
  }

  public uint GetMailboxSize(MailType MT = MailType.EMAIL_MAX)
  {
    switch (MT >= MailType.EMAIL_MAX ? (int) this.OpenMail.Kind : (int) MT)
    {
      case 0:
        return this.Mailing.SystemSerial.Count;
      case 1:
        return this.Mailing.ReportSerial.Count;
      case 3:
        return this.Mailing.FavorSerial.Count;
      default:
        return this.Mailing.MailSerial.Count;
    }
  }

  public uint GetMailboxUnread(MailType MT = MailType.EMAIL_MAX)
  {
    switch (MT)
    {
      case MailType.EMAIL_SYSTEM:
        return this.Mailing.SystemSerial.Unseen;
      case MailType.EMAIL_BATTLE:
        return this.Mailing.ReportSerial.Unseen;
      case MailType.EMAIL_LETTER:
        return this.Mailing.MailSerial.Unseen;
      case MailType.EMAIL_FAVORY:
        return this.Mailing.FavorSerial.Unseen;
      default:
        return this.Mailing.MailSerial.Unseen + this.Mailing.ReportSerial.Unseen + this.Mailing.FavorSerial.Unseen + this.Mailing.SystemSerial.Unseen;
    }
  }

  public byte GetSubMailboxUnread(uint SerialID)
  {
    byte subMailboxUnread = 0;
    this.DoFavor.Kind = MailType.EMAIL_LETTER;
    this.DoFavor.Serial = SerialID;
    SubContent subContent;
    List<uint> uintList;
    if (this.MailReportGet(ref this.DoFavor) && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out uintList))
    {
      for (ushort index = 0; (int) index < uintList.Count; ++index)
      {
        this.DoFavor.Serial = uintList[(int) index];
        if (this.MailReportGet(ref this.DoFavor) && !this.DoFavor.Mail.BeRead)
          ++subMailboxUnread;
      }
    }
    return subMailboxUnread;
  }

  public byte GetMailboxUnread(uint ReplyID, string ReplySender)
  {
    byte mailboxUnread = 0;
    this.DoFavor.Kind = MailType.EMAIL_LETTER;
    SubContent subContent;
    List<uint> uintList;
    if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out uintList))
    {
      for (ushort index = 0; (int) index < uintList.Count; ++index)
      {
        this.DoFavor.Serial = uintList[(int) index];
        if (this.MailReportGet(ref this.DoFavor) && !this.DoFavor.Mail.BeRead)
          ++mailboxUnread;
      }
    }
    return mailboxUnread;
  }

  public int GetMailboxSize(uint ReplyID, string ReplySender)
  {
    SubContent subContent;
    List<uint> uintList;
    return this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out uintList) ? uintList.Count : 0;
  }

  public byte GetMailboxGatherUnread()
  {
    byte mailboxGatherUnread = 0;
    for (int id = 0; id < this.Mailing.ReportSerial.Gather.Count; ++id)
    {
      if (this.GatherReportGet(id) != null && !this.DoFavor.Combat.BeRead)
        ++mailboxGatherUnread;
    }
    return mailboxGatherUnread;
  }

  public int GetMailboxReportSize(ReportSubSet Type)
  {
    switch (Type)
    {
      case ReportSubSet.REPORTSet_HELP:
        return this.Mailing.ReportSerial.Resource.Count;
      case ReportSubSet.REPORTSet_RECON:
        return this.Mailing.ReportSerial.AntiScout.Count;
      default:
        return this.Mailing.ReportSerial.Gather.Count;
    }
  }

  public uint GetMailboxReportSerial(ReportSubSet Type)
  {
    switch (Type)
    {
      case ReportSubSet.REPORTSet_GATHER:
        return this.Mailing.ReportSerial.GatheringID;
      case ReportSubSet.REPORTSet_RECON:
        return this.Mailing.ReportSerial.AntiScoutID;
      default:
        return this.Mailing.ReportSerial.ResourceID;
    }
  }

  public int GetMailboxGatherSize() => this.Mailing.ReportSerial.Gather.Count;

  public int GetMailboxReconSize() => this.Mailing.ReportSerial.AntiScout.Count;

  public int GetMailboxResourceSize() => this.Mailing.ReportSerial.Resource.Count;

  public void ResetMailingData()
  {
    if (this.Mailing.Loaded && NetworkManager.UserID != this.Mailing.UserId)
    {
      this.PurgeMail();
      this.Mailing.Caliber = 0L;
      this.Mailing.MailSerial.Old = 0U;
      this.Mailing.ReportSerial.Old = 0U;
    }
    if (!this.Mailing.Loaded)
    {
      this.LoadMail(MailType.EMAIL_LETTER);
    }
    else
    {
      this.Mailing.MailSerial.Purge = 0U;
      this.Mailing.ReportSerial.Purge = 0U;
      this.Mailing.SystemSerial.Purge = 0U;
      this.Mailing.MailSerial.Fetch = this.Mailing.MailSerial.New;
      this.Mailing.ReportSerial.Fetch = this.Mailing.ReportSerial.New;
      this.Mailing.SystemSerial.Fetch = this.Mailing.SystemSerial.New;
    }
    this.Mailing.MailSerial.Pulling = false;
    this.Mailing.MailSerial.Parsing = false;
    this.Mailing.ReportSerial.Pulling = false;
    this.Mailing.ReportSerial.Parsing = false;
    this.Mailing.SystemSerial.Pulling = false;
    this.Mailing.SystemSerial.Parsing = false;
    this.Mailing.Refresh = true;
    this.Mailing.Loaded = true;
    this.Mailing.UserId = NetworkManager.UserID;
  }

  public void MIBDataCheck()
  {
    this.Mailing.Refresh = false;
    this.Mailing.Caliber = this.ServerTime;
    if (this.Mailing.MailSerial.Caliber.Count > 0)
    {
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_MAILINFO;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) this.Mailing.MailSerial.Caliber.Count);
      foreach (uint data in this.Mailing.MailSerial.Caliber)
        messagePacket.Add(data);
      messagePacket.Send();
      this.Mailing.MailSerial.Caliber.Clear();
    }
    if (this.Mailing.ReportSerial.Caliber.Count > 0)
    {
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTINFO;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) this.Mailing.ReportSerial.Caliber.Count);
      foreach (uint data in this.Mailing.ReportSerial.Caliber)
        messagePacket.Add(data);
      messagePacket.Send();
      this.Mailing.ReportSerial.Caliber.Clear();
    }
    if (this.Mailing.SystemSerial.Caliber.Count > 0)
    {
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_NOTICEINFO;
      messagePacket.AddSeqId();
      messagePacket.Add((byte) this.Mailing.SystemSerial.Caliber.Count);
      foreach (uint data in this.Mailing.SystemSerial.Caliber)
        messagePacket.Add(data);
      messagePacket.Send();
      this.Mailing.SystemSerial.Caliber.Clear();
    }
    this.MailDataRefresh(MailType.EMAIL_SYSTEM);
    this.MailDataRefresh(MailType.EMAIL_LETTER);
    this.MailDataRefresh(MailType.EMAIL_BATTLE);
    this.MailDataRefresh(MailType.EMAIL_FAVORY);
    this.SaveMail(MailType.EMAIL_SYSTEM);
    this.SaveMail(MailType.EMAIL_LETTER);
    this.SaveMail(MailType.EMAIL_BATTLE);
    this.MailingboxRefresh(MailType.EMAIL_SYSTEM);
    this.MailingboxRefresh(MailType.EMAIL_LETTER);
    this.MailingboxRefresh(MailType.EMAIL_BATTLE);
    this.MailingboxRefresh(MailType.EMAIL_FAVORY);
    GameManager.OnRefresh(NetworkNews.Refresh_Mailbox);
    this.MIB.Serial = 0U;
    this.MIB.Change = this.MIB.Check = false;
    if (this.MIB.Timing == NetworkManager.UserID)
      return;
    long.TryParse(PlayerPrefs.GetString("Mailing" + (object) (this.MIB.Timing = NetworkManager.UserID)), out this.BlackoutMail);
  }

  public void RecvUserRename(MessagePacket MP)
  {
    switch (MP.Protocol)
    {
      case Protocol._MSG_RESP_ROLE_NAME_CHECK:
        if (!(bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput))
          break;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceInput, (int) MP.ReadByte(), (int) MP.ReadByte());
        break;
      case Protocol._MSG_RESP_ROLE_RENAME:
        switch (DataManager.msgBuffer[0] = MP.ReadByte())
        {
          case 0:
            ushort num = MP.ReadUShort();
            GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
            this.SetCurItemQuantity(num, MP.ReadUShort(), (byte) 0, 0L);
            MP.ReadStringPlus(13, this.RoleAttr.Name);
            CString cstring = StringManager.Instance.StaticString1024();
            cstring.StringToFormat(this.RoleAttr.Name);
            cstring.AppendFormat(this.mStringTable.GetStringByID(701U));
            GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) 18);
            GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), num);
            GameManager.OnRefresh(NetworkNews.Refresh_Item);
            DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) 131, (ushort) 1);
            break;
          case 1:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(702U), (ushort) byte.MaxValue);
            break;
          case 2:
          case 5:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(426U), (ushort) byte.MaxValue);
            break;
          case 3:
          case 4:
            GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
            break;
        }
        GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
        GameManager.OnRefresh(NetworkNews.Refresh_Attr);
        break;
    }
  }

  public void RecvItemInfo(MessagePacket MP)
  {
    this.RecvItemState = (DataManager.eMsgState) MP.ReadByte();
    if (this.RecvItemState == DataManager.eMsgState.EMS_Begin || this.RecvItemState == DataManager.eMsgState.EMS_BeginAndEnd)
    {
      this.sortItemDataCountMax = (short) 0;
      this.curItemDataCount = (short) 0;
      this.curItemQuantity.Clear();
      Array.Clear((Array) this.sortItemData, 0, this.sortItemData.Length);
    }
    short num = MP.ReadShort();
    for (int index = 0; index < (int) num; ++index)
    {
      ushort key = MP.ReadUShort();
      if ((int) this.curItemDataCount + index < 800)
      {
        this.curItemQuantity.Add(key, MP.ReadUShort());
        this.sortItemData[(int) this.curItemDataCount + index] = key;
      }
      else
        break;
    }
    this.curItemDataCount += num;
    if (this.curItemDataCount > (short) 800)
      this.curItemDataCount = (short) 800;
    if (this.RecvItemState != DataManager.eMsgState.EMS_End && this.RecvItemState != DataManager.eMsgState.EMS_BeginAndEnd)
      return;
    this.sortItemDataCountMax = this.curItemDataCount;
    if (((int) this.SortItemDataType & 16) == 0)
      this.SortItemDataType = (byte) 4;
    this.SortStoreData();
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
  }

  public bool SendSellItem(ushort ItemID, ushort Quantity)
  {
    Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
    if ((int) recordByKey.EquipKey != (int) ItemID)
      return false;
    if ((long) this.Resource[4].Stock + (long) (recordByKey.RecoverPrice * (uint) Quantity) > (long) uint.MaxValue)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(83U), (ushort) byte.MaxValue);
      return false;
    }
    if (!GUIManager.Instance.ShowUILock(EUILock.SellItem))
      return false;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SELLITEM;
    messagePacket.AddSeqId();
    messagePacket.Add((byte) 1);
    messagePacket.Add(ItemID);
    messagePacket.Add(Quantity);
    messagePacket.Send();
    return true;
  }

  public void RecvSellItem(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        this.Resource[4].Stock = MP.ReadUInt();
        byte num1 = MP.ReadByte();
        CString cstring1 = StringManager.Instance.StaticString1024();
        CString cstring2 = StringManager.Instance.StaticString1024();
        for (int index = 0; index < (int) num1; ++index)
        {
          ushort num2 = MP.ReadUShort();
          this.SetCurItemQuantity(num2, MP.ReadUShort(), (byte) 0, 0L);
          cstring1.ClearString();
          cstring2.ClearString();
          Equip recordByKey = this.EquipTable.GetRecordByKey(num2);
          UIItemInfo.SetNameProperties((UIText) null, (UIText) null, cstring1, (CString) null, ref recordByKey);
          cstring2.StringToFormat(cstring1);
          cstring2.AppendFormat(this.mStringTable.GetStringByID(836U));
          GUIManager.Instance.AddHUDMessage(cstring2.ToString(), (ushort) 18);
        }
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        GameManager.OnRefresh(NetworkNews.Refresh_Item);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(83U), (ushort) byte.MaxValue);
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.SellItem);
  }

  private void SendUseItem(
    ushort ItemID,
    ushort Quantity,
    ushort Target = 0,
    ushort Parameter1 = 0,
    ushort Parameter2 = 0,
    uint Parameter3 = 0,
    string Name = "")
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.UseItem))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_USEITEM;
    messagePacket.AddSeqId();
    messagePacket.Add(ItemID);
    messagePacket.Add(Quantity);
    messagePacket.Add(Target);
    messagePacket.Add(Parameter1);
    messagePacket.Add(Parameter2);
    if ((int) ItemID == (int) GameConstants.TalentSaveItemID)
    {
      messagePacket.Add((uint) this.TalentSaveZero);
      messagePacket.Add(Encoding.UTF8.GetBytes(this.SaveTalentData[0].TagName.ToString()), len: (int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
      for (byte index = 0; (int) index < (int) Parameter2; ++index)
      {
        messagePacket.Add(this.TalentSaveQueue[(int) index].TalentID);
        messagePacket.Add(this.TalentSaveQueue[(int) index].AddLevel);
      }
    }
    else if (ItemID == (ushort) 1253)
    {
      messagePacket.Add(Parameter3);
      messagePacket.Add(Name, Encoding.UTF8.GetByteCount(Name));
    }
    else if ((int) ItemID == (int) GameConstants.LESaveItemID)
    {
      messagePacket.Add(Parameter3);
      messagePacket.Add(Encoding.UTF8.GetBytes(UILordEquipSetEdit.SetName.ToString()), len: (int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
      for (byte index = 0; (int) index < UILordEquipSetEdit.showingSet.SerialNO.Length; ++index)
        messagePacket.Add(UILordEquipSetEdit.showingSet.SerialNO[(int) index]);
    }
    else
      messagePacket.Add(Parameter3);
    messagePacket.Send();
  }

  public unsafe void RecvUseItem(MessagePacket MP)
  {
    byte x1 = MP.ReadByte();
    bool flag1 = false;
    byte[] meg = (byte[]) null;
    switch (x1)
    {
      case 0:
        ushort num1 = MP.ReadUShort();
        Equip recordByKey1 = DataManager.Instance.EquipTable.GetRecordByKey(num1);
        if ((int) recordByKey1.EquipKey != (int) num1)
          break;
        int curItemQuantity = (int) this.GetCurItemQuantity(num1, (byte) 0);
        this.SetCurItemQuantity(num1, MP.ReadUShort(), (byte) 0, 0L);
        int num2 = curItemQuantity - (int) this.GetCurItemQuantity(num1, (byte) 0);
        ushort index1 = MP.ReadUShort();
        bool flag2 = true;
        EItemType eitemType = (EItemType) ((uint) recordByKey1.EquipKind - 1U);
        switch (eitemType)
        {
          case EItemType.EIT_CaseByCase:
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 1)
            {
              this.MarchEventData[(int) index1].Type = (EMarchEventType) MP.ReadByte();
              this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
              this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
              this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), true, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey >= (ushort) 2 && recordByKey1.PropertiesInfo[0].Propertieskey < (ushort) 6 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 38)
            {
              switch ((ECaseByCaseType) recordByKey1.PropertiesInfo[0].Propertieskey)
              {
                case ECaseByCaseType.ECBCT_RandomTeleport:
                  DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) 122, (ushort) 1);
                  break;
                case ECaseByCaseType.ECBCT_AdvanceTeleport:
                case ECaseByCaseType.ECBCT_NewbieTeleport:
                case ECaseByCaseType.ECBCT_WorldTeleport:
                  DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) 123, (ushort) 1);
                  break;
              }
              DataManager.MapDataController.updateCapitalPoint(MP.ReadUShort(), MP.ReadByte(), MP.ReadUShort(), true);
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 8)
            {
              this.RoleTalentPoint = MP.ReadUShort();
              if (MP.ReadByte() == (byte) 0)
              {
                Array.Clear((Array) this.AllTalentData, 0, this.AllTalentData.Length);
                this.NoUseTalent = (byte) 1;
                Array.Clear((Array) this.CheckSendCount, 0, this.CheckSendCount.Length);
                this.CehckSendIdx = this.CheckRecvIdx = (byte) 0;
                flag1 = true;
              }
              else
              {
                int index2 = (int) MP.ReadByte() + 1;
                this.NoUseTalent = (byte) 0;
                if (index2 < this.SaveTalentData.Length)
                {
                  Buffer.BlockCopy((Array) this.SaveTalentData[index2].SaveTalentData, 0, (Array) this.AllTalentData, 0, 100);
                  GUIManager.Instance.UpdateUI(EGUIWindow.UI_TalentSave, -1);
                  GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(927U), (ushort) byte.MaxValue);
                }
              }
              this.AttribVal.UpdateTalentData();
              GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 20 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 21)
            {
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID((uint) (1514 + ((int) recordByKey1.PropertiesInfo[0].Propertieskey - 20) * 2)), (ushort) byte.MaxValue);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 27)
            {
              this.RoleAttr.LordEquipBagSize = MP.ReadByte();
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7515U), (ushort) byte.MaxValue);
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordEquip, 1);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 29)
            {
              LordEquipData.Instance().Recv_Gem_TAKEOFF(MP);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 26)
            {
              this.RoleAttr.BookmarkLimit += recordByKey1.PropertiesInfo[0].PropertiesValue;
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 25)
            {
              flag1 = true;
              this.beCaptured.nowCaptureStat = LoadCaptureState.None;
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 0);
              GUIManager.Instance.UpdateUI(EGUIWindow.Door, 18);
              ushort leaderId = DataManager.Instance.GetLeaderID();
              if (leaderId != (ushort) 0)
              {
                DataManager.Instance.TempFightHeroID[(int) leaderId] = (byte) 0;
                DataManager.Instance.SetFightHeroData();
                GameManager.OnRefresh(NetworkNews.Refresh_Hero);
                GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0);
                GUIManager.Instance.UpdateUI(EGUIWindow.UI_BattleHeroSelect, 2);
              }
              DataManager.Instance.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
              DataManager.Instance.AttribVal.UpdateLordEquipData();
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 30)
            {
              flag1 = true;
              this.RoleAttr.recvMonsterPoint = MP.ReadUInt();
              this.RoleAttr.LastMonsterPointRecoverTime = MP.ReadLong();
              this.UpdateMonsterPoint();
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 40)
            {
              flag1 = true;
              this.RoleAttr.ScardStar = MP.ReadUInt();
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 33)
            {
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 31 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 32)
            {
              this.RecvUpdateBuffInfo(MP);
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 34)
            {
              LandWalkerManager.SetActionNormal();
              this.SetWallQueueBar();
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 36)
            {
              this.SaveTalentData[(int) this.SaveTalentData[0].SaveIndex].InitSaveTalentData(MP);
              this.SaveTalentData[0].SaveIndex = (byte) 0;
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_Talent, -3);
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(935U), (ushort) byte.MaxValue);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 35)
            {
              MP.ReadStringPlus(41, this.RoleAttr.NickName);
              string str = this.RoleAttr.NickName.ToString();
              char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
              for (int index3 = 0; index3 < this.RoleAttr.NickName.Length; ++index3)
              {
                if (!this.isNotEmojiCharacter(this.RoleAttr.NickName[index3]))
                  chPtr[index3] = ' ';
              }
              str = (string) null;
              GameManager.OnRefresh(NetworkNews.Refresh_Attr);
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9508U), (ushort) byte.MaxValue);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 37)
            {
              int index4 = (int) MP.ReadByte();
              if (LordEquipData.Instance().LordEquipSets[index4] == null)
                LordEquipData.Instance().LordEquipSets[index4] = new LordEquipSet();
              if (LordEquipData.Instance().LordEquipSets[index4].Name == null)
                LordEquipData.Instance().LordEquipSets[index4].Name = StringManager.Instance.SpawnString();
              MP.ReadStringPlus((int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE, LordEquipData.Instance().LordEquipSets[index4].Name);
              for (int index5 = 0; index5 < 8; ++index5)
                LordEquipData.Instance().LordEquipSets[index4].SerialNO[index5] = MP.ReadUInt();
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordEquipSetEdit, 2);
              GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(935U), (ushort) byte.MaxValue);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey != (ushort) 41)
            {
              if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 43)
              {
                GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
                flag1 = true;
                break;
              }
              if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 44)
              {
                flag1 = false;
                flag2 = false;
                break;
              }
              if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 49)
              {
                DataManager.Instance.PetResource.Stock = MP.ReadUInt();
                GameManager.OnRefresh(NetworkNews.Refresh_PetResource);
                if (GUIManager.Instance.bContinuousUse)
                {
                  GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248U), (ushort) 18);
                  break;
                }
                flag1 = true;
                break;
              }
              break;
            }
            break;
          case EItemType.EIT_Resource:
            int propertieskey1 = (int) recordByKey1.PropertiesInfo[0].Propertieskey;
            if (propertieskey1 >= 1 && propertieskey1 <= 5)
            {
              this.Resource[propertieskey1 - 1].Stock = MP.ReadUInt();
              GameManager.OnRefresh(NetworkNews.Refresh_Resource);
              if (GUIManager.Instance.bContinuousUse)
              {
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248U), (ushort) 18);
                break;
              }
              flag1 = true;
              break;
            }
            switch (propertieskey1)
            {
              case 6:
                GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
                GameManager.OnRefresh(NetworkNews.Refresh_Resource);
                if (GUIManager.Instance.bContinuousUse)
                  GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248U), (ushort) 18);
                else
                  flag1 = true;
                GameManager.OnRefresh();
                break;
              case 7:
                this.RoleAlliance.Money = MP.ReadUInt();
                flag1 = true;
                break;
            }
            break;
          case EItemType.EIT_SpeedUpPercent:
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 1 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 12 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 17 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 18 || recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 21)
            {
              if ((int) index1 < (int) (ushort) this.QueueIndexbyUesItemTarget.Length)
              {
                byte QueuebarIndex = (byte) this.QueueIndexbyUesItemTarget[(int) index1];
                if (this.QueueIndexbyUesItemTarget[(int) index1] < EQueueBarIndex.MAX && this.queueBarData[(int) QueuebarIndex].bActive)
                {
                  switch (QueuebarIndex)
                  {
                    case 16:
                      this.m_WallRepairBeginValue = MP.ReadUInt();
                      this.m_WallRepairNowValue = MP.ReadUInt();
                      if ((int) this.m_WallRepairNowValue == (int) this.m_WallRepairMaxValue)
                      {
                        AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level, (byte) 0);
                        DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0U);
                        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787U), (ushort) 8);
                        break;
                      }
                      this.bNeedShowWallQueueBar = true;
                      this.SetWallQueueBar();
                      break;
                    case 18:
                      this.queueBarData[(int) QueuebarIndex].StartTime = MP.ReadLong();
                      this.queueBarData[(int) QueuebarIndex].TotalTime = MP.ReadUInt();
                      this.RoleAttr.LordEquipEventTime.BeginTime = this.queueBarData[(int) QueuebarIndex].StartTime;
                      this.RoleAttr.LordEquipEventTime.RequireTime = this.queueBarData[(int) QueuebarIndex].TotalTime;
                      break;
                    default:
                      this.queueBarData[(int) QueuebarIndex].StartTime = MP.ReadLong();
                      this.queueBarData[(int) QueuebarIndex].TotalTime = MP.ReadUInt();
                      if (QueuebarIndex == (byte) 19 || QueuebarIndex == (byte) 20)
                      {
                        DataManager.missionDataManager.UpdateTimeMissionTime(QueuebarIndex);
                        break;
                      }
                      if (QueuebarIndex == (byte) 21)
                      {
                        DataManager.missionDataManager.VipRewardStartTime = this.queueBarData[(int) QueuebarIndex].StartTime;
                        DataManager.missionDataManager.UpdateVipTime();
                        break;
                      }
                      break;
                  }
                }
              }
              GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
              if (GUIManager.Instance.bContinuousUse)
              {
                GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(249U), (ushort) 18);
                break;
              }
              CString cstring = StringManager.Instance.StaticString1024();
              cstring.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint) recordByKey1.EquipName));
              cstring.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749U));
              GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) 18);
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 11)
            {
              if (index1 != (ushort) 100)
              {
                if ((int) index1 == this.MarchEventTime.Length)
                {
                  this.beCaptured.StartActionTime = MP.ReadLong();
                  this.beCaptured.TotalTime = MP.ReadUInt();
                  this.queueBarData[30].StartTime = this.beCaptured.StartActionTime;
                  this.queueBarData[30].TotalTime = this.beCaptured.TotalTime;
                }
                else
                {
                  this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
                  this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
                  GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
                  this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), true, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
                }
                GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
              }
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 16)
            {
              if (this.MarchEventTime.Length > (int) index1)
              {
                this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
                this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
                GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
              }
              GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
              flag1 = true;
              break;
            }
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 22)
            {
              PetManager.Instance.ItemCraftBeginTime = MP.ReadLong();
              PetManager.Instance.ItemCraftNeedTime = MP.ReadUInt();
              if (PetManager.Instance.ItemCraftBeginTime > 0L && PetManager.Instance.ItemCraftNeedTime > 0U)
                this.SetQueueBarData(EQueueBarIndex.PetFusion, true, PetManager.Instance.ItemCraftBeginTime, PetManager.Instance.ItemCraftNeedTime);
              else
                this.SetQueueBarData(EQueueBarIndex.PetFusion, false, 0L, 0U);
              flag1 = true;
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_PetFusionbuilding, 1);
              GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
              break;
            }
            this.RecvUpdateBuffInfo(MP);
            ESpeedUpPercent propertieskey2 = (ESpeedUpPercent) recordByKey1.PropertiesInfo[0].Propertieskey;
            if (propertieskey2 >= ESpeedUpPercent.EUP_TIME_UNIT && propertieskey2 <= ESpeedUpPercent.EUP_RESEARCH_TIME_UNIT)
            {
              if (DataManager.mapDataController.IsKing())
              {
                if (recordByKey1.EquipKey != (ushort) 1289)
                {
                  flag1 = true;
                  break;
                }
                break;
              }
              if (DataManager.mapDataController.IsWorldKing())
              {
                if (recordByKey1.EquipKey != (ushort) 1290)
                {
                  flag1 = true;
                  break;
                }
                break;
              }
              flag1 = true;
              break;
            }
            if (propertieskey2 == ESpeedUpPercent.EUP_PET_FUSION_SPEED)
            {
              flag1 = true;
              break;
            }
            break;
          case EItemType.EIT_VIP:
            if (recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 1)
            {
              this.RoleAttr.VipPoint = MP.ReadUInt();
              byte vipLevel = this.RoleAttr.VIPLevel;
              this.RoleAttr.VIPLevel = this.GetVIPLevel(this.RoleAttr.VipPoint);
              DataManager.missionDataManager.UpdateVipState();
              if ((int) vipLevel != (int) this.RoleAttr.VIPLevel)
              {
                GameManager.OnRefresh(NetworkNews.Refresh_VIP);
                GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int) this.RoleAttr.VIPLevel + ((int) vipLevel << 16), openMode: (byte) 0);
                this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
              }
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_VIP, 0);
              flag1 = true;
              break;
            }
            break;
          case EItemType.EIT_Shield:
            if (recordByKey1.PropertiesInfo[0].Propertieskey <= (ushort) 2)
            {
              this.RecvUpdateBuffInfo(MP);
              CString cstring = StringManager.Instance.StaticString1024();
              cstring.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey1.EquipName));
              cstring.AppendFormat(this.mStringTable.GetStringByID(749U));
              GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) 18);
              break;
            }
            break;
          case EItemType.EIT_TroopFight:
          case EItemType.EIT_RSGenerate:
            this.RecvUpdateBuffInfo(MP);
            flag1 = true;
            break;
          case EItemType.EIT_MaterialTreasureBox:
          case EItemType.EIT_ComboTreasureBox:
            GUIManager instance1 = GUIManager.Instance;
            DataManager instance2 = DataManager.Instance;
            instance1.OpenBoxCount = num2;
            instance1.CommonGetCrystal = MP.ReadUInt();
            instance1.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
            instance1.CommonGetAllianceCoin = MP.ReadUInt();
            uint num3 = MP.ReadUInt();
            instance2.RoleAlliance.Money = num3;
            byte num4 = MP.ReadByte();
            if ((byte) ((uint) recordByKey1.EquipKind - 1U) == (byte) 18 || instance1.OpenBoxCount > 1)
            {
              byte num5 = (byte) ((uint) num4 + instance1.CommonGetCrystal + instance1.CommonGetAllianceCoin);
              instance1.CommonItemData.Clear();
              for (int index6 = 0; index6 < (int) num5; ++index6)
              {
                CommonItemDataType commonItemDataType = new CommonItemDataType();
                commonItemDataType.ItemID = MP.ReadUShort();
                commonItemDataType.Num = MP.ReadUShort();
                commonItemDataType.ItemRank = MP.ReadByte();
                instance1.CommonItemData.Add(commonItemDataType);
                if (index6 < (int) num4)
                {
                  int Quantity = (int) instance2.GetCurItemQuantity(commonItemDataType.ItemID, commonItemDataType.ItemRank) + (int) commonItemDataType.Num;
                  if (Quantity <= (int) ushort.MaxValue)
                  {
                    instance2.SetCurItemQuantity(commonItemDataType.ItemID, (ushort) Quantity, commonItemDataType.ItemRank, 0L);
                    if (commonItemDataType.ItemRank > (byte) 0)
                      this.ReflashMaterialItem = (byte) 1;
                  }
                }
              }
              Door menu = instance1.FindMenu(EGUIWindow.Door) as Door;
              if ((UnityEngine.Object) menu != (UnityEngine.Object) null)
                menu.OpenMenu(EGUIWindow.UI_OpenBox, 2, (int) num1);
            }
            else
            {
              ushort num6 = MP.ReadUShort();
              ushort x2 = MP.ReadUShort();
              byte num7 = MP.ReadByte();
              if (num4 > (byte) 0)
              {
                int Quantity = (int) instance2.GetCurItemQuantity(num6, num7) + (int) x2;
                if (Quantity <= (int) ushort.MaxValue)
                {
                  instance2.SetCurItemQuantity(num6, (ushort) Quantity, num7, 0L);
                  if (num7 > (byte) 0)
                    this.ReflashMaterialItem = (byte) 1;
                }
              }
              Equip recordByKey2 = instance2.EquipTable.GetRecordByKey(num6);
              CString cstring1 = StringManager.Instance.StaticString1024();
              cstring1.Append(instance2.mStringTable.GetStringByID(840U));
              if (num7 != (byte) 0)
              {
                cstring1.StringToFormat(MallManager.Instance.GetItemRankName(num7));
                cstring1.AppendFormat(instance2.mStringTable.GetStringByID(7739U));
              }
              CString nameStr = StringManager.Instance.StaticString1024();
              UIItemInfo.SetNameProperties((UIText) null, (UIText) null, nameStr, (CString) null, ref recordByKey2);
              cstring1.Append(nameStr);
              if (x2 > (ushort) 1)
              {
                cstring1.IntToFormat((long) x2);
                cstring1.AppendFormat("x{0}");
              }
              flag1 = false;
              CString cstring2 = StringManager.Instance.StaticString1024();
              cstring2.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint) recordByKey1.EquipName));
              cstring2.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749U));
              GUIManager.Instance.AddHUDMessage(cstring2.ToString(), (ushort) 18);
              GUIManager.Instance.AddHUDMessage(cstring1.ToString(), (ushort) byte.MaxValue);
            }
            LordEquipData.Instance().Scan_MaterialOrEquipIncreace();
            GameManager.OnRefresh();
            break;
          case EItemType.EIT_EnhanceStone:
            Equip recordByKey3 = this.EquipTable.GetRecordByKey(recordByKey1.SyntheticParts[1].SyntheticItem);
            CString cstring3 = StringManager.Instance.StaticString1024();
            cstring3.Append(this.mStringTable.GetStringByID(840U));
            CString nameStr1 = StringManager.Instance.StaticString1024();
            UIItemInfo.SetNameProperties((UIText) null, (UIText) null, nameStr1, (CString) null, ref recordByKey3);
            cstring3.Append(nameStr1);
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14588U), (ushort) byte.MaxValue);
            GUIManager.Instance.AddHUDMessage(cstring3.ToString(), (ushort) byte.MaxValue);
            break;
          default:
            if (eitemType == EItemType.EIT_Consumables)
            {
              switch ((byte) recordByKey1.PropertiesInfo[0].Propertieskey)
              {
                case 2:
                  GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 0);
                  CurHeroData curHeroData = this.curHeroData[(uint) index1];
                  DataManager.msgBuffer[0] = (byte) 5;
                  byte num8 = DataManager.msgBuffer[1] = curHeroData.Level;
                  int num9 = (int) this.UpdateHeroAttr(index1, MP);
                  curHeroData = this.curHeroData[(uint) index1];
                  LevelUp recordByKey4 = this.LevelUpTable.GetRecordByKey((ushort) curHeroData.Level);
                  float num10 = (float) curHeroData.Exp / (float) recordByKey4.HeroExp;
                  DataManager.msgBuffer[2] = curHeroData.Level;
                  GameConstants.GetBytes(num10, DataManager.msgBuffer, 3);
                  GameConstants.GetBytes(index1, DataManager.msgBuffer, 7);
                  if ((int) curHeroData.Level > (int) num8)
                    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, -1);
                  meg = DataManager.msgBuffer;
                  break;
                case 4:
                  DataManager.StageDataController.RoleAttrLevelUp(MP, 24);
                  DataManager.instance.RoleAttr.TodayUseMoraleItemTimes = MP.ReadByte();
                  GameManager.OnRefresh(NetworkNews.Refresh_Morale);
                  GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
                  flag1 = true;
                  break;
                case 5:
                case 6:
                  GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 0);
                  PetManager instance3 = PetManager.Instance;
                  PetData petData = instance3.FindPetData(index1);
                  if (petData != null)
                  {
                    byte level = petData.Level;
                    petData.Level = MP.ReadByte();
                    petData.Exp = MP.ReadUInt();
                    PetManager.Instance.UpdatePetSort(false);
                    DataManager.msgBuffer[0] = (byte) 5;
                    DataManager.msgBuffer[1] = level;
                    DataManager.msgBuffer[2] = petData.Level;
                    PetTbl recordByKey5 = instance3.PetTable.GetRecordByKey(petData.ID);
                    uint needExp = instance3.GetNeedExp(petData.Level, recordByKey5.Rare);
                    GameConstants.GetBytes(needExp == 0U ? 0.0f : (float) petData.Exp / (float) needExp, DataManager.msgBuffer, 3);
                    GameConstants.GetBytes(index1, DataManager.msgBuffer, 7);
                    meg = DataManager.msgBuffer;
                    petData.UpdateLevelState();
                    break;
                  }
                  break;
              }
            }
            else
              break;
            break;
        }
        if (num2 != 0)
          GameManager.OnRefresh(NetworkNews.Refresh_Item, meg);
        if (flag1)
        {
          CString cstring4 = StringManager.Instance.StaticString1024();
          cstring4.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint) recordByKey1.EquipName));
          cstring4.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749U));
          GUIManager.Instance.AddHUDMessage(cstring4.ToString(), (ushort) 18);
        }
        if (GUIManager.Instance.bContinuousUse)
          GUIManager.Instance.bContinuousUse = false;
        if (flag2)
        {
          AudioManager.Instance.PlayUISFX(UIKind.ItemUse);
          goto case 7;
        }
        else
          goto case 7;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(702U), (ushort) byte.MaxValue);
        goto case 7;
      case 2:
      case 4:
      case 5:
      case 6:
      case 9:
      case 21:
      case 22:
      case 23:
      case 33:
      case 34:
      case 36:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 46:
      case 49:
      case 60:
      case 61:
      case 62:
      case 99:
      case 100:
      case 101:
      case 102:
      case 111:
      case 112:
      case 114:
      case 115:
      case 116:
        CString cstring5 = StringManager.Instance.StaticString1024();
        cstring5.IntToFormat((long) x1);
        cstring5.AppendFormat(this.mStringTable.GetStringByID(10057U));
        GUIManager.Instance.AddHUDMessage(cstring5.ToString(), (ushort) byte.MaxValue);
        goto case 7;
      case 3:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(809U), (ushort) byte.MaxValue);
        goto case 7;
      case 7:
      case 8:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 113:
        GUIManager.Instance.HideUILock(EUILock.UseItem);
        break;
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(616U));
        goto case 7;
      case 11:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5771U), (ushort) byte.MaxValue);
        goto case 7;
      case 12:
      case 13:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(645U));
        goto case 7;
      case 14:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(7647U));
        goto case 7;
      case 15:
      case 16:
      case 18:
      case 19:
      case 25:
      case 32:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5811U), (ushort) byte.MaxValue);
        goto case 7;
      case 17:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(820U), (ushort) byte.MaxValue);
        goto case 7;
      case 20:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7528U), (ushort) byte.MaxValue);
        goto case 7;
      case 24:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(888U), (ushort) byte.MaxValue);
        goto case 7;
      case 26:
      case 27:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1478U), (ushort) byte.MaxValue);
        goto case 7;
      case 28:
      case 59:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952U), (ushort) byte.MaxValue);
        goto case 7;
      case 29:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10033U), (ushort) byte.MaxValue);
        goto case 7;
      case 30:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(687U), (ushort) byte.MaxValue);
        goto case 7;
      case 31:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(688U));
        goto case 7;
      case 35:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(956U), (ushort) byte.MaxValue);
        goto case 7;
      case 37:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1504U), (ushort) byte.MaxValue);
        goto case 7;
      case 45:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1456U), (ushort) byte.MaxValue);
        goto case 7;
      case 47:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(420U), (ushort) byte.MaxValue);
        goto case 7;
      case 48:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9369U), (ushort) byte.MaxValue);
        goto case 7;
      case 50:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(9369U));
        goto case 7;
      case 51:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(954U), (ushort) byte.MaxValue);
        goto case 7;
      case 52:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(956U), (ushort) byte.MaxValue);
        goto case 7;
      case 53:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9943U), (ushort) byte.MaxValue);
        goto case 7;
      case 54:
      case 57:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1478U), (ushort) byte.MaxValue);
        goto case 7;
      case 55:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8107U), (ushort) byte.MaxValue);
        goto case 7;
      case 56:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7744U), (ushort) byte.MaxValue);
        goto case 7;
      case 58:
        CString cstring6 = StringManager.Instance.StaticString1024();
        cstring6.ClearString();
        cstring6.IntToFormat(25L);
        cstring6.AppendFormat(this.mStringTable.GetStringByID(9167U));
        GUIManager.Instance.AddHUDMessage(cstring6.ToString(), (ushort) byte.MaxValue);
        goto case 7;
      case 63:
      case 64:
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
        goto default;
      case 65:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat(24L);
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(15001U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) byte.MaxValue);
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
        goto case 7;
      case 66:
        GUIManager.Instance.HideUILock(EUILock.UseItem);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(15002U), (ushort) byte.MaxValue);
        UISuicideBox.SendRefresh();
        break;
      default:
        CString cstring7 = StringManager.Instance.StaticString1024();
        cstring7.IntToFormat((long) x1);
        cstring7.AppendFormat(this.mStringTable.GetStringByID(10057U));
        GUIManager.Instance.AddHUDMessage(cstring7.ToString(), (ushort) byte.MaxValue);
        goto case 7;
    }
  }

  public void UpdateLoadItemNotify()
  {
    if (this.ReflashMaterialItem == (byte) 0)
      return;
    DataManager.Instance.mLordEquip.Scan_MaterialOrEquipIncreace();
    this.ReflashMaterialItem = (byte) 0;
  }

  public void SortCurItemData()
  {
    if (this.SortItemDataType == (byte) 8)
      return;
    this.SortItemDataType = (byte) 8;
    Array.Clear((Array) this.sortItemDataStart, 0, this.sortItemDataStart.Length);
    Array.Clear((Array) this.sortItemDataCount, 0, this.sortItemDataCount.Length);
    Array.Sort<ushort>(this.sortItemData, 0, (int) this.sortItemDataCountMax, (IComparer<ushort>) this.itemDataComparer);
    this.sortItemDataCountMax = this.curItemDataCount;
    byte index1 = 0;
    for (int index2 = 0; index2 < (int) this.curItemDataCount; ++index2)
    {
      Equip recordByKey = this.EquipTable.GetRecordByKey(this.sortItemData[index2]);
      if ((int) recordByKey.EquipKey == (int) this.sortItemData[index2])
      {
        byte index3 = recordByKey.EquipKind <= (byte) 0 || recordByKey.EquipKind > (byte) 30 ? (byte) 30 : (byte) ((uint) recordByKey.EquipKind - 1U);
        if ((int) index1 != (int) index3)
        {
          this.sortItemDataCount[(int) index1] = (ushort) ((uint) index2 - (uint) this.sortItemDataStart[(int) index1]);
          this.sortItemDataStart[(int) index3] = (ushort) index2;
          index1 = index3;
        }
      }
    }
    this.sortItemDataCount[(int) index1] = (ushort) ((uint) this.curItemDataCount - (uint) this.sortItemDataStart[(int) index1]);
  }

  public void SortCurItemDataForBag()
  {
    if (((int) this.SortItemDataType & 1) > 0)
      return;
    this.SortItemDataType |= (byte) 1;
    Array.Clear((Array) this.sortItemDataStart, 0, this.sortItemDataStart.Length);
    Array.Clear((Array) this.sortItemDataCount, 0, this.sortItemDataCount.Length);
    this.bagitemDataComparer.SortType = (byte) 0;
    Array.Sort<ushort>(this.sortItemData, 0, (int) this.sortItemDataCountMax, (IComparer<ushort>) this.bagitemDataComparer);
    byte index1 = 0;
    ushort num = 0;
    this.sortItemDataCountMax = this.curItemDataCount;
    int curItemDataCount = (int) this.curItemDataCount;
    for (int index2 = 0; index2 < curItemDataCount; ++index2)
    {
      Equip recordByKey = this.EquipTable.GetRecordByKey(this.sortItemData[index2]);
      if ((int) recordByKey.EquipKey == (int) this.sortItemData[index2])
      {
        byte index3 = recordByKey.EquipKind <= (byte) 0 || recordByKey.EquipKind > (byte) 30 ? (byte) 30 : (byte) ((uint) recordByKey.EquipKind - 1U);
        if ((int) index1 != (int) index3)
        {
          this.sortItemDataCount[(int) index1] = num;
          num = (ushort) 1;
          this.sortItemDataStart[(int) index3] = (ushort) index2;
          index1 = index3;
        }
        else
          ++num;
      }
    }
    this.sortItemDataCount[(int) index1] = num;
  }

  public void SortStoreData()
  {
    if (((int) this.SortItemDataType & 4) > 0)
      return;
    int tableCount = this.StoreData.TableCount;
    if (tableCount == 0)
      return;
    if (this.TotalShopItemData == null)
      this.TotalShopItemData = new CHashTable<ushort, ushort>(tableCount);
    if (((int) this.SortItemDataType & 16) > 0)
    {
      this.SortSotreData = new ushort[tableCount];
      for (ushort Index = 0; (int) Index < this.SortSotreData.Length; ++Index)
        this.SortSotreData[(int) Index] = this.StoreData.GetRecordByIndex((int) Index).ID;
    }
    Array.Clear((Array) this.SortSotreDataStart, 0, this.SortSotreDataStart.Length);
    Array.Clear((Array) this.SortSotreDataCount, 0, this.SortSotreDataCount.Length);
    this.bagitemDataComparer.SortType = (byte) 1;
    Array.Sort<ushort>(this.SortSotreData, (IComparer<ushort>) this.bagitemDataComparer);
    byte index1 = 0;
    ushort num = 0;
    for (int index2 = 0; index2 < tableCount; ++index2)
    {
      StoreTbl recordByKey1 = this.StoreData.GetRecordByKey(this.SortSotreData[index2]);
      Equip recordByKey2 = this.EquipTable.GetRecordByKey(recordByKey1.ItemID);
      if (((int) this.SortItemDataType & 16) > 0 && recordByKey1.Num == (ushort) 1)
        this.TotalShopItemData.Add(recordByKey2.EquipKey, recordByKey1.ID);
      if ((int) recordByKey2.EquipKey == (int) recordByKey1.ItemID)
      {
        byte equipKind = recordByKey2.EquipKind;
        if ((int) index1 != (int) equipKind)
        {
          this.SortSotreDataCount[(int) index1] = num;
          num = (ushort) 1;
          this.SortSotreDataStart[(int) equipKind] = (ushort) index2;
          index1 = equipKind;
        }
        else
          ++num;
      }
    }
    this.SortSotreDataCount[(int) index1] = num;
    if (((int) this.SortItemDataType & 16) > 0)
      this.SortItemDataType = (byte) 0;
    this.SortItemDataType |= (byte) 4;
  }

  public void SortResourceFilterData()
  {
    if (this.SortItemDataType == (byte) 2 || this.SortSotreData == null)
      return;
    this.SortItemDataType = (byte) 2;
    int tableCount = this.StoreData.TableCount;
    Array.Clear((Array) this.SortSotreDataStart, 0, this.SortSotreDataStart.Length);
    Array.Clear((Array) this.SortSotreDataCount, 0, this.SortSotreDataCount.Length);
    this.bagitemDataComparer.SortType = (byte) 2;
    Array.Sort<ushort>(this.SortSotreData, (IComparer<ushort>) this.bagitemDataComparer);
    ushort index1 = 0;
    ushort num1 = 0;
    ushort num2 = 0;
    Equip recordByKey1;
    for (ushort index2 = 0; (int) index2 < tableCount; ++index2)
    {
      StoreTbl recordByKey2 = this.StoreData.GetRecordByKey(this.SortSotreData[(int) index2]);
      recordByKey1 = this.EquipTable.GetRecordByKey(recordByKey2.ItemID);
      if ((int) recordByKey1.EquipKey == (int) recordByKey2.ItemID)
      {
        byte num3 = (byte) ((uint) recordByKey1.EquipKind - 1U);
        switch (num3)
        {
          case 10:
            ushort propertieskey = recordByKey1.PropertiesInfo[0].Propertieskey;
            if ((int) index1 != (int) propertieskey)
            {
              this.SortSotreDataCount[(int) index1] = num2;
              num2 = (ushort) 1;
              this.SortSotreDataStart[(int) propertieskey] = index2;
              index1 = propertieskey;
              continue;
            }
            ++num2;
            continue;
          case 11:
            ushort index3 = 6;
            if ((int) index1 != (int) index3)
            {
              this.SortSotreDataCount[(int) index1] = num2;
              num2 = (ushort) 1;
              this.SortSotreDataStart[(int) index3] = index2;
              index1 = index3;
              continue;
            }
            ++num2;
            continue;
          default:
            if (num3 == (byte) 9 && recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 49)
            {
              ushort index4 = 8;
              if ((int) index1 != (int) index4)
              {
                this.SortSotreDataCount[(int) index1] = num2;
                num2 = (ushort) 1;
                this.SortSotreDataStart[(int) index4] = index2;
                index1 = index4;
                continue;
              }
              ++num2;
              continue;
            }
            if (num3 == (byte) 9)
            {
              ushort index5 = 7;
              if ((int) index1 != (int) index5)
              {
                this.SortSotreDataCount[(int) index1] = num2;
                num2 = (ushort) 1;
                this.SortSotreDataStart[(int) index5] = index2;
                index1 = index5;
                continue;
              }
              ++num2;
              continue;
            }
            continue;
        }
      }
    }
    this.SortSotreDataCount[(int) index1] = num2;
    Array.Clear((Array) this.sortItemDataStart, 0, this.sortItemDataStart.Length);
    Array.Clear((Array) this.sortItemDataCount, 0, this.sortItemDataCount.Length);
    this.bagitemDataComparer.SortType = (byte) 3;
    Array.Sort<ushort>(this.sortItemData, 0, (int) this.sortItemDataCountMax, (IComparer<ushort>) this.bagitemDataComparer);
    ushort index6 = 0;
    num1 = (ushort) 0;
    ushort num4 = 0;
    this.sortItemDataCountMax = this.curItemDataCount;
    int curItemDataCount = (int) this.curItemDataCount;
    for (ushort index7 = 0; (int) index7 < curItemDataCount; ++index7)
    {
      recordByKey1 = this.EquipTable.GetRecordByKey(this.sortItemData[(int) index7]);
      if ((int) recordByKey1.EquipKey == (int) this.sortItemData[(int) index7])
      {
        byte num5 = (byte) ((uint) recordByKey1.EquipKind - 1U);
        switch (num5)
        {
          case 10:
            ushort propertieskey = recordByKey1.PropertiesInfo[0].Propertieskey;
            if ((int) index6 != (int) propertieskey)
            {
              this.sortItemDataCount[(int) index6] = num4;
              num4 = (ushort) 1;
              this.sortItemDataStart[(int) propertieskey] = index7;
              index6 = propertieskey;
              continue;
            }
            ++num4;
            continue;
          case 11:
            ushort index8 = 12;
            if ((int) index6 != (int) index8)
            {
              this.sortItemDataCount[(int) index6] = num4;
              num4 = (ushort) 1;
              this.sortItemDataStart[(int) index8] = index7;
              index6 = index8;
              continue;
            }
            ++num4;
            continue;
          default:
            if (num5 == (byte) 5 && recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 2)
            {
              ushort index9 = 15;
              if ((int) index6 != (int) index9)
              {
                this.sortItemDataCount[(int) index6] = num4;
                num4 = (ushort) 1;
                this.sortItemDataStart[(int) index9] = index7;
                index6 = index9;
                continue;
              }
              ++num4;
              continue;
            }
            if (num5 == (byte) 9 && recordByKey1.PropertiesInfo[0].Propertieskey == (ushort) 49)
            {
              ushort index10 = 8;
              if ((int) index6 != (int) index10)
              {
                this.sortItemDataCount[(int) index6] = num4;
                num4 = (ushort) 1;
                this.sortItemDataStart[(int) index10] = index7;
                index6 = index10;
                continue;
              }
              ++num4;
              continue;
            }
            continue;
        }
      }
    }
    this.sortItemDataCount[(int) index6] = num4;
  }

  public void SetCurItemQuantity(ushort ItemID, ushort Quantity, byte Rare = 0, long lastUpdateTime = 0)
  {
    if (ItemID == (ushort) 0)
      return;
    Equip recordByKey = DataManager.Instance.EquipTable.GetRecordByKey(ItemID);
    if (GameConstants.IsBetween((int) recordByKey.EquipKind, 20, 27))
      LordEquipData.setItemQuantity(ItemID, Rare, Quantity, 0L);
    else if (PetManager.Instance.IsPetItem(ItemID))
    {
      PetManager.Instance.SetCurItemQuantity(ItemID, Quantity, Rare);
    }
    else
    {
      if (this.curItemQuantity.ContainsKey(ItemID))
      {
        this.curItemQuantity.Remove(ItemID);
        if (Quantity == (ushort) 0)
        {
          this.SortItemDataType = (byte) 0;
          --this.curItemDataCount;
          int index = Array.IndexOf<ushort>(this.sortItemData, ItemID);
          if (index >= 0)
            this.sortItemData[index] = (ushort) 0;
        }
        else
          this.curItemQuantity.Add(ItemID, Quantity);
      }
      else if (Quantity != (ushort) 0 && this.curItemDataCount < (short) 800)
      {
        this.SortItemDataType = (byte) 0;
        int index = Array.IndexOf<ushort>(this.sortItemData, (ushort) 0);
        if (index >= 0)
          this.sortItemData[index] = ItemID;
        ++this.curItemDataCount;
        this.sortItemDataCountMax = (short) Mathf.Max((int) this.curItemDataCount, (int) this.sortItemDataCountMax);
        this.curItemQuantity.Add(ItemID, Quantity);
      }
      if (this.MySysSetting.bShowBuildUp)
        GUIManager.Instance.BuildingData.UpdateBuildState((byte) 9, (ushort) byte.MaxValue);
      if ((int) recordByKey.EquipKey != (int) ItemID || (recordByKey.EquipKind < (byte) 1 || recordByKey.EquipKind > (byte) 4) && recordByKey.EquipKind != (byte) 5)
        return;
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5);
    }
  }

  public ushort GetCurItemQuantity(ushort ItemID, byte Rare = 0)
  {
    if (GameConstants.IsBetween((int) DataManager.Instance.EquipTable.GetRecordByKey(ItemID).EquipKind, 20, 27))
      return LordEquipData.getItemQuantity(ItemID, Rare);
    return PetManager.Instance.IsPetItem(ItemID) ? PetManager.Instance.GetCurItemQuantity(ItemID, Rare) : this.curItemQuantity.Find(ItemID);
  }

  public bool GetStoreData(ref StoreTbl storeData, ushort ItemID)
  {
    Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
    if (((int) this.SortItemDataType & 4) == 0)
      this.SortStoreData();
    int num1 = (int) this.SortSotreDataStart[(int) recordByKey.EquipKind];
    int num2 = num1 + (int) this.SortSotreDataCount[(int) recordByKey.EquipKind];
    while (num1 <= num2)
    {
      ushort InKey = (ushort) Math.Floor((double) ((num1 + num2) / 2));
      storeData = this.StoreData.GetRecordByKey(InKey);
      if ((int) ItemID == (int) storeData.ItemID)
        return true;
      if ((int) ItemID < (int) storeData.ItemID)
        num2 = (int) InKey - 1;
      else
        num1 = (int) InKey + 1;
    }
    return false;
  }

  private void InitialQueueBarData()
  {
    byte index1 = 0;
    QueueBarData queueBarData1 = this.queueBarData[(int) index1] with
    {
      eKind = EQueueBarKind.Building
    };
    this.queueBarData[(int) index1] = queueBarData1;
    byte index2 = 1;
    QueueBarData queueBarData2 = this.queueBarData[(int) index2] with
    {
      eKind = EQueueBarKind.Researching
    };
    this.queueBarData[(int) index2] = queueBarData2;
    for (byte index3 = 2; index3 <= (byte) 9; ++index3)
    {
      QueueBarData queueBarData3 = this.queueBarData[(int) index3] with
      {
        eKind = EQueueBarKind.Marching
      };
      this.queueBarData[(int) index3] = queueBarData3;
    }
    byte index4 = 10;
    QueueBarData queueBarData4 = this.queueBarData[(int) index4] with
    {
      eKind = EQueueBarKind.Training
    };
    this.queueBarData[(int) index4] = queueBarData4;
    byte index5 = 11;
    QueueBarData queueBarData5 = this.queueBarData[(int) index5] with
    {
      eKind = EQueueBarKind.HeroEnhance
    };
    this.queueBarData[(int) index5] = queueBarData5;
    byte index6 = 12;
    QueueBarData queueBarData6 = this.queueBarData[(int) index6] with
    {
      eKind = EQueueBarKind.HeroEvolution
    };
    this.queueBarData[(int) index6] = queueBarData6;
    byte index7 = 13;
    queueBarData6 = this.queueBarData[(int) index7] with
    {
      eKind = EQueueBarKind.Treatmenting
    };
    this.queueBarData[(int) index7] = queueBarData6;
    byte index8 = 14;
    queueBarData6 = this.queueBarData[(int) index8] with
    {
      eKind = EQueueBarKind.Manufacturing
    };
    this.queueBarData[(int) index8] = queueBarData6;
    byte index9 = 17;
    queueBarData6 = this.queueBarData[(int) index9] with
    {
      eKind = EQueueBarKind.Idle
    };
    this.queueBarData[(int) index9] = queueBarData6;
    byte index10 = 19;
    queueBarData6 = this.queueBarData[(int) index10] with
    {
      eKind = EQueueBarKind.Mission
    };
    this.queueBarData[(int) index10] = queueBarData6;
    byte index11 = 20;
    queueBarData6 = this.queueBarData[(int) index11] with
    {
      eKind = EQueueBarKind.Mission
    };
    this.queueBarData[(int) index11] = queueBarData6;
    byte index12 = 21;
    queueBarData6 = this.queueBarData[(int) index12] with
    {
      eKind = EQueueBarKind.Mission
    };
    this.queueBarData[(int) index12] = queueBarData6;
    byte index13 = 18;
    queueBarData6 = this.queueBarData[(int) index13] with
    {
      eKind = EQueueBarKind.Forging
    };
    this.queueBarData[(int) index13] = queueBarData6;
    byte index14 = 30;
    queueBarData6 = this.queueBarData[(int) index14] with
    {
      eKind = EQueueBarKind.LordReturn
    };
    this.queueBarData[(int) index14] = queueBarData6;
    byte index15 = 31;
    queueBarData6 = this.queueBarData[(int) index15] with
    {
      eKind = EQueueBarKind.HideArmy
    };
    this.queueBarData[(int) index15] = queueBarData6;
    byte index16 = 32;
    queueBarData6 = this.queueBarData[(int) index16] with
    {
      eKind = EQueueBarKind.Mobilization
    };
    this.queueBarData[(int) index16] = queueBarData6;
    byte index17 = 33;
    queueBarData6 = this.queueBarData[(int) index17] with
    {
      eKind = EQueueBarKind.NpcReward
    };
    this.queueBarData[(int) index17] = queueBarData6;
    byte index18 = 34;
    queueBarData6 = this.queueBarData[(int) index18] with
    {
      eKind = EQueueBarKind.PetFusion
    };
    this.queueBarData[(int) index18] = queueBarData6;
    byte index19 = 35;
    queueBarData6 = this.queueBarData[(int) index19] with
    {
      eKind = EQueueBarKind.PetEvolution
    };
    this.queueBarData[(int) index19] = queueBarData6;
    byte index20 = 36;
    queueBarData6 = this.queueBarData[(int) index20] with
    {
      eKind = EQueueBarKind.PetMarch
    };
    this.queueBarData[(int) index20] = queueBarData6;
    for (byte index21 = 22; index21 <= (byte) 29; ++index21)
    {
      queueBarData6 = this.queueBarData[(int) index21] with
      {
        eKind = EQueueBarKind.JoinedRally
      };
      this.queueBarData[(int) index21] = queueBarData6;
    }
    for (byte index22 = 0; (int) index22 < this.sortedQueueBarData.Length; ++index22)
      this.sortedQueueBarData[(int) index22] = index22;
  }

  public void ResetQueueBarData()
  {
    for (int eIndex = 0; eIndex < 37; ++eIndex)
    {
      if ((this.bRecvQueueBarData & 1L << eIndex) == 0L)
        this.SetQueueBarData((EQueueBarIndex) eIndex, false, 0L, 0U);
    }
    this.bRecvQueueBarData = 0L;
  }

  public bool SortQueueBarData()
  {
    if (!this.bNeedSortQueueBarData)
      return false;
    this.bNeedSortQueueBarData = false;
    this.SetIdleData();
    for (byte index = 0; (int) index < this.sortedQueueBarData.Length; ++index)
      this.sortedQueueBarData[(int) index] = index;
    Array.Sort<byte>(this.sortedQueueBarData, (IComparer<byte>) this.queueBarDataComparer);
    this.curQueueBarDataCount = (byte) 0;
    for (int index = 0; index < this.sortedQueueBarData.Length && this.queueBarData[(int) this.sortedQueueBarData[index]].bActive; ++index)
      ++this.curQueueBarDataCount;
    byte[] numArray = new byte[this.sortedQueueBarData.Length];
    Array.Copy((Array) this.sortedQueueBarData, (Array) numArray, this.sortedQueueBarData.Length);
    int index1 = 0;
    byte num1 = 22;
    byte num2 = 29;
    byte num3 = 2;
    byte num4 = 9;
    for (int index2 = 0; index2 < this.sortedQueueBarData.Length; ++index2)
    {
      if ((int) this.sortedQueueBarData[index2] >= (int) num3 && (int) this.sortedQueueBarData[index2] <= (int) num4)
      {
        numArray[index1] = this.sortedQueueBarData[index2];
        ++index1;
        byte index3 = (byte) ((uint) this.sortedQueueBarData[index2] - (uint) num3);
        if (this.MarchEventData[(int) index3].Type == EMarchEventType.EMET_RallyMarching)
        {
          for (int index4 = 0; index4 < this.JoinedRallyDataType.Length; ++index4)
          {
            if (this.queueBarData[index4 + (int) num1].bActive && (int) this.JoinedRallyDataType[index4].MarchIndex == (int) index3)
            {
              numArray[index1] = (byte) ((uint) index4 + (uint) num1);
              ++index1;
            }
          }
        }
      }
      else if ((int) this.sortedQueueBarData[index2] >= (int) num1 && (int) this.sortedQueueBarData[index2] <= (int) num2)
      {
        byte index5 = (byte) ((uint) this.sortedQueueBarData[index2] - (uint) num1);
        if (this.queueBarData[(int) this.sortedQueueBarData[index2]].bActive && (this.MarchEventData[(int) index5].Type == EMarchEventType.EMET_RallyStanby || this.MarchEventData[(int) index5].Type == EMarchEventType.EMET_RallyAttack))
        {
          numArray[index1] = this.sortedQueueBarData[index2];
          ++index1;
        }
      }
      else
      {
        numArray[index1] = this.sortedQueueBarData[index2];
        ++index1;
      }
    }
    Array.Copy((Array) numArray, (Array) this.sortedQueueBarData, this.sortedQueueBarData.Length);
    return true;
  }

  public void SetQueueBarData(EQueueBarIndex eIndex, bool bActive, long StartTime, uint TotalTime)
  {
    int index = (int) eIndex;
    QueueBarData queueBarData = this.queueBarData[index];
    bool bActive1 = queueBarData.bActive;
    queueBarData.bActive = bActive;
    queueBarData.StartTime = StartTime;
    queueBarData.TotalTime = TotalTime;
    this.queueBarData[index] = queueBarData;
    this.bNeedSortQueueBarData = true;
    this.SetIdleData();
    if (!bActive)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, (int) eIndex);
    else if (!this.bBeginReLogin && !bActive1)
      this.bNewQueue = true;
    if (eIndex != EQueueBarIndex.Training && eIndex != EQueueBarIndex.Manufacturing && eIndex != EQueueBarIndex.Researching && eIndex != EQueueBarIndex.TrapRepair && eIndex != EQueueBarIndex.Treatmenting && eIndex != EQueueBarIndex.PetFusion)
      return;
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void SetRecvQueueBarData(int Index) => this.bRecvQueueBarData |= 1L << Index;

  public void GetQueueBarTitle(EQueueBarIndex eIndex, StringBuilder sb)
  {
  }

  public void GetQueueBarTitle(
    EQueueBarIndex eIndex,
    StringBuilder sb,
    ref string title1,
    ref string title2)
  {
    sb.Length = 0;
    switch (eIndex)
    {
      case EQueueBarIndex.Building:
        if (GUIManager.Instance.BuildingData.AllBuildsData.Length <= (int) GUIManager.Instance.BuildingData.BuildingManorID)
          break;
        RoleBuildingData roleBuildingData = GUIManager.Instance.BuildingData.AllBuildsData[(int) GUIManager.Instance.BuildingData.BuildingManorID];
        BuildTypeData recordByKey1 = this.BuildsTypeData.GetRecordByKey(roleBuildingData.BuildID);
        if (GUIManager.Instance.BuildingData.QueueBuildType == (byte) 1)
        {
          title1 = this.mStringTable.GetStringByID(258U);
          sb.AppendFormat(this.mStringTable.GetStringByID(268U), (object) ((int) roleBuildingData.Level + 1), (object) this.mStringTable.GetStringByID((uint) recordByKey1.NameID));
        }
        else
        {
          title1 = this.mStringTable.GetStringByID(4100U);
          sb.AppendFormat(this.mStringTable.GetStringByID(268U), (object) roleBuildingData.Level, (object) this.mStringTable.GetStringByID((uint) recordByKey1.NameID));
        }
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.Researching:
        title1 = this.mStringTable.GetStringByID(259U);
        TechDataTbl recordByKey2 = this.TechData.GetRecordByKey(this.ResearchTech);
        if (recordByKey2.LevelMax == (byte) 1)
          sb.AppendFormat("{0}", (object) this.mStringTable.GetStringByID((uint) recordByKey2.TechName));
        else
          sb.AppendFormat("{0}{1} {2}", (object) this.mStringTable.GetStringByID(32U), (object) ((int) this.GetTechLevel(this.ResearchTech) + 1), (object) this.mStringTable.GetStringByID((uint) recordByKey2.TechName));
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.Training:
        title1 = this.mStringTable.GetStringByID(264U);
        SoldierData recordByKey3 = this.SoldierDataTable.GetRecordByKey((ushort) ((int) this.SoldierKind * 4 + (int) this.SoldierRank + 1));
        CString s1 = StringManager.Instance.StaticString1024();
        StringManager.IntToStr(s1, (long) this.SoldierTrainingQty, bNumber: true);
        sb.AppendFormat(this.mStringTable.GetStringByID(269U), (object) this.mStringTable.GetStringByID((uint) recordByKey3.Name), (object) s1.ToString());
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.HeroEnhance:
        title1 = this.mStringTable.GetStringByID(375U);
        CurHeroData curHeroData = this.curHeroData[(uint) this.RoleAttr.EnhanceEventHeroID];
        sb.AppendFormat(this.mStringTable.GetStringByID(377U), (object) ((int) curHeroData.Enhance + 1));
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.HeroEvolution:
        title1 = this.mStringTable.GetStringByID(376U);
        Hero recordByKey4 = this.HeroTable.GetRecordByKey(this.RoleAttr.StarUpEventHeroID);
        title2 = this.mStringTable.GetStringByID((uint) recordByKey4.HeroTitle);
        break;
      case EQueueBarIndex.Treatmenting:
        title1 = this.mStringTable.GetStringByID(4045U);
        uint x = 0;
        for (int index = 0; index < 16; ++index)
          x += this.mTreatmentSoldier[index];
        CString s2 = StringManager.Instance.StaticString1024();
        StringManager.IntToStr(s2, (long) x, bNumber: true);
        sb.AppendFormat(this.mStringTable.GetStringByID(4046U), (object) s2.ToString());
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.Manufacturing:
        title1 = this.mStringTable.GetStringByID(3764U);
        SoldierData recordByKey5 = this.SoldierDataTable.GetRecordByKey((ushort) ((int) this.TrapKind * 4 + (int) this.TrapRank + 17));
        CString s3 = StringManager.Instance.StaticString1024();
        StringManager.IntToStr(s3, (long) this.TrapTrainingQty, bNumber: true);
        sb.AppendFormat(this.mStringTable.GetStringByID(4048U), (object) this.mStringTable.GetStringByID((uint) recordByKey5.Name), (object) s3.ToString());
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.TrapRepair:
        title1 = this.mStringTable.GetStringByID(1046U);
        CString s4 = StringManager.Instance.StaticString1024();
        StringManager.IntToStr(s4, (long) this.Trap_TreatmentQuantity, bNumber: true);
        sb.AppendFormat(this.mStringTable.GetStringByID(1047U), (object) s4.ToString());
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.WallRepair:
        title1 = this.mStringTable.GetStringByID(3788U);
        title2 = this.mStringTable.GetStringByID(3789U);
        break;
      case EQueueBarIndex.Forging:
        title1 = this.mStringTable.GetStringByID(261U);
        Equip recordByKey6 = this.EquipTable.GetRecordByKey(this.RoleAttr.LordEquipEventData.ItemID);
        sb.Append(GameConstants.SItemRareHeader[(int) this.RoleAttr.LordEquipEventData.Color]);
        sb.Append(this.mStringTable.GetStringByID((uint) recordByKey6.EquipName));
        sb.Append("</color>");
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.AffairMission:
        title2 = this.mStringTable.GetStringByID(1524U);
        title1 = this.mStringTable.GetStringByID(260U);
        break;
      case EQueueBarIndex.AllianceMission:
        title2 = this.mStringTable.GetStringByID(1525U);
        title1 = this.mStringTable.GetStringByID(260U);
        break;
      case EQueueBarIndex.VIPMission:
        title2 = this.mStringTable.GetStringByID(1526U);
        title1 = this.mStringTable.GetStringByID(260U);
        break;
      case EQueueBarIndex.LordReturn:
        PointCode pointCode;
        GameConstants.MapIDToPointCode(DataManager.Instance.beCaptured.MapID, out pointCode.zoneID, out pointCode.pointID);
        Vector2 mapPosbyPointCode1 = GameConstants.getTileMapPosbyPointCode(pointCode.zoneID, pointCode.pointID);
        sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273U), (object) mapPosbyPointCode1.x, (object) mapPosbyPointCode1.y);
        title2 = sb.ToString();
        title1 = this.mStringTable.GetStringByID(267U);
        break;
      case EQueueBarIndex.HideArmy:
        title1 = this.mStringTable.GetStringByID(8590U);
        title2 = this.mStringTable.GetStringByID(8591U);
        break;
      case EQueueBarIndex.Mobilization:
        title1 = this.mStringTable.GetStringByID(1339U);
        if (MobilizationManager.Instance.mMissionStatus == (byte) 0)
        {
          title2 = this.mStringTable.GetStringByID(1358U);
          break;
        }
        if (MobilizationManager.Instance.mMissionStatus == (byte) 1)
        {
          title2 = this.mStringTable.GetStringByID(1359U);
          break;
        }
        if (MobilizationManager.Instance.mMissionStatus != (byte) 2)
          break;
        title2 = this.mStringTable.GetStringByID(1360U);
        break;
      case EQueueBarIndex.NpcReward:
        for (int index = 0; index < 3; ++index)
        {
          if (GUIManager.Instance.BoxID[index] > (ushort) 0 && GUIManager.Instance.BoxTime[index] > 0L)
          {
            title1 = GUIManager.Instance.BoxTime[index] >= this.ServerTime ? this.mStringTable.GetStringByID(12034U) : this.mStringTable.GetStringByID(12046U);
            title2 = this.mStringTable.GetStringByID((uint) this.NPCPrize.GetRecordByKey(GUIManager.Instance.BoxID[index]).Element);
            break;
          }
        }
        break;
      case EQueueBarIndex.PetFusion:
        title1 = this.mStringTable.GetStringByID(14660U);
        sb.Length = 0;
        FusionData recordByKey7 = this.FusionDataTable.GetRecordByKey(PetManager.Instance.ItemCraftID);
        CString s5 = StringManager.Instance.StaticString1024();
        StringManager.IntToStr(s5, (long) PetManager.Instance.ItemCraftCount, bNumber: true);
        if (recordByKey7.Fusion_Kind < (byte) 1)
          sb.AppendFormat("{0} {1}", (object) this.mStringTable.GetStringByID((uint) this.EquipTable.GetRecordByKey(recordByKey7.Fusion_ItemID).EquipName), (object) s5.ToString());
        else
          sb.AppendFormat("{0}{1} {2}", (object) this.mStringTable.GetStringByID((uint) this.EquipTable.GetRecordByKey(recordByKey7.Fusion_ItemID).EquipName), (object) this.mStringTable.GetStringByID(14669U), (object) s5.ToString());
        title2 = sb.ToString();
        break;
      case EQueueBarIndex.PetEvolution:
        title1 = this.mStringTable.GetStringByID(376U);
        PetTbl recordByKey8 = PetManager.Instance.PetTable.GetRecordByKey(PetManager.Instance.PetUI_EvoID);
        title2 = this.mStringTable.GetStringByID((uint) recordByKey8.Name);
        break;
      case EQueueBarIndex.PetMarch:
        title1 = this.mStringTable.GetStringByID(266U);
        PointCode point = PetManager.Instance.m_PetMarchEventData.Point;
        Vector2 mapPosbyPointCode2 = GameConstants.getTileMapPosbyPointCode(point.zoneID, point.pointID);
        sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273U), (object) mapPosbyPointCode2.x, (object) mapPosbyPointCode2.y);
        title2 = sb.ToString();
        break;
      default:
        if (eIndex >= EQueueBarIndex.MarchingBegin && eIndex <= EQueueBarIndex.MarchingEnd)
        {
          int index = (int) (eIndex - 2);
          if (index >= DataManager.Instance.MarchEventData.Length || index < 0)
            break;
          int mapId = GameConstants.PointCodeToMapID(DataManager.Instance.MarchEventData[index].Point.zoneID, DataManager.Instance.MarchEventData[index].Point.pointID);
          Vector2 vector2 = DataManager.Instance.MarchEventData[index].PointKind != POINT_KIND.PK_YOLK ? GameConstants.getTileMapPosbySpriteID(mapId) : DataManager.MapDataController.GetYolkPos(DataManager.MapDataController.LayoutMapInfo[mapId].tableID, DataManager.MapDataController.FocusKingdomID);
          sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273U), (object) vector2.x, (object) vector2.y);
          title2 = sb.ToString();
          if (DataManager.Instance.MarchEventData[index].Type >= EMarchEventType.EMET_AttackMarching && DataManager.Instance.MarchEventData[index].Type <= EMarchEventType.EMET_DeliverMarching)
          {
            title1 = DataManager.Instance.mStringTable.GetStringByID(266U);
            break;
          }
          if (DataManager.Instance.MarchEventData[index].Type >= EMarchEventType.EMET_AttackReturn && DataManager.Instance.MarchEventData[index].Type <= EMarchEventType.EMET_HitMonsterRetreat)
          {
            sb.Length = 0;
            Vector2 tileMapPosbyMapId = GameConstants.getTileMapPosbyMapID(DataManager.Instance.RoleAttr.CapitalPoint);
            sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273U), (object) (int) tileMapPosbyMapId.x, (object) (int) tileMapPosbyMapId.y);
            title2 = sb.ToString();
            title1 = DataManager.Instance.mStringTable.GetStringByID(267U);
            break;
          }
          if (DataManager.Instance.MarchEventData[index].Type != EMarchEventType.EMET_RallyStanby)
            break;
          if (DataManager.Instance.ServerTime >= this.MarchEventTime[index].BeginTime + (long) this.MarchEventTime[index].RequireTime)
          {
            title2 = DataManager.Instance.mStringTable.GetStringByID(4909U);
            title1 = DataManager.Instance.mStringTable.GetStringByID(4906U);
            break;
          }
          title2 = DataManager.Instance.mStringTable.GetStringByID(4908U);
          title1 = DataManager.Instance.mStringTable.GetStringByID(4906U);
          break;
        }
        if (eIndex < EQueueBarIndex.JoinedRallyBegin || eIndex > EQueueBarIndex.JoinedRallyEnd)
          break;
        int index1 = (int) (eIndex - 22);
        long num = this.JoinedRallyDataType[index1].MarchEventTime.BeginTime + (long) this.JoinedRallyDataType[index1].MarchEventTime.RequireTime;
        if (this.JoinedRallyDataType[index1].State == (byte) 1)
        {
          if (DataManager.Instance.ServerTime >= num)
          {
            title2 = DataManager.Instance.mStringTable.GetStringByID(4909U);
            title1 = DataManager.Instance.mStringTable.GetStringByID(4906U);
            break;
          }
          title2 = DataManager.Instance.mStringTable.GetStringByID(4908U);
          title1 = DataManager.Instance.mStringTable.GetStringByID(4906U);
          break;
        }
        int mapId1 = GameConstants.PointCodeToMapID(this.MarchEventData[index1].Point.zoneID, this.MarchEventData[index1].Point.pointID);
        Vector2 vector2_1 = DataManager.Instance.MarchEventData[index1].PointKind != POINT_KIND.PK_YOLK ? GameConstants.getTileMapPosbySpriteID(mapId1) : DataManager.MapDataController.GetYolkPos(DataManager.MapDataController.LayoutMapInfo[mapId1].tableID, DataManager.MapDataController.FocusKingdomID);
        sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273U), (object) vector2_1.x, (object) vector2_1.y);
        title2 = sb.ToString();
        title1 = DataManager.Instance.mStringTable.GetStringByID(849U);
        break;
    }
  }

  public eTimerSpriteType GetQueueBarSpriteType(EQueueBarIndex eIndex)
  {
    eTimerSpriteType queueBarSpriteType1 = eTimerSpriteType.Speed;
    if (eIndex == EQueueBarIndex.Idle)
      return eTimerSpriteType.Idle;
    if (eIndex >= EQueueBarIndex.MarchingBegin && eIndex <= EQueueBarIndex.MarchingEnd)
    {
      int index = Mathf.Clamp((int) (eIndex - 2), 0, 7);
      if (DataManager.Instance.MarchEventData[index].Type == EMarchEventType.EMET_RallyStanby)
        return eTimerSpriteType.RallyStanby;
      if (DataManager.Instance.MarchEventData[index].Type == EMarchEventType.EMET_RallyAttack)
        return eTimerSpriteType.RallyAttack;
      if (DataManager.Instance.MarchEventData[index].Type == EMarchEventType.EMET_RallyMarching)
        return eTimerSpriteType.Speed;
    }
    if (eIndex >= EQueueBarIndex.JoinedRallyBegin && eIndex <= EQueueBarIndex.JoinedRallyEnd || eIndex == EQueueBarIndex.HideArmy)
      return eTimerSpriteType.RallyCountDown;
    switch (eIndex)
    {
      case EQueueBarIndex.Mobilization:
        eTimerSpriteType queueBarSpriteType2 = eTimerSpriteType.Mobilization;
        if (MobilizationManager.Instance.mMissionStatus == (byte) 1)
          queueBarSpriteType2 = eTimerSpriteType.Mobilization_Report;
        else if (MobilizationManager.Instance.mMissionStatus == (byte) 2)
          queueBarSpriteType2 = eTimerSpriteType.Mobilization_fail;
        return queueBarSpriteType2;
      case EQueueBarIndex.NpcReward:
        for (int index = 0; index < 3; ++index)
        {
          if (GUIManager.Instance.BoxID[index] > (ushort) 0 && GUIManager.Instance.BoxTime[index] > 0L)
            return GUIManager.Instance.BoxTime[index] <= this.ServerTime ? eTimerSpriteType.NPCRewardEnd : eTimerSpriteType.NPCRewardTransIng;
        }
        return eTimerSpriteType.NPCRewardTransIng;
      case EQueueBarIndex.PetMarch:
        return eTimerSpriteType.PetMarch;
      default:
        if (this.RoleAlliance.Id != 0U && (eIndex == EQueueBarIndex.Building && GUIManager.Instance.BuildingData.QueueBuildType == (byte) 1 && this.mPlayHelpDataType[1].Kind == (byte) 0 || eIndex == EQueueBarIndex.Researching && this.mPlayHelpDataType[0].Kind == (byte) 0))
          queueBarSpriteType1 = eTimerSpriteType.Help;
        if ((eIndex == EQueueBarIndex.Building || eIndex == EQueueBarIndex.Researching || eIndex == EQueueBarIndex.HeroEnhance || eIndex == EQueueBarIndex.HeroEvolution || eIndex == EQueueBarIndex.PetEvolution) && (eIndex != EQueueBarIndex.Building || GUIManager.Instance.BuildingData.QueueBuildType != (byte) 2) && (long) Mathf.Clamp((float) (this.queueBarData[(int) (byte) eIndex].StartTime + (long) this.queueBarData[(int) (byte) eIndex].TotalTime - this.ServerTime), 0.0f, (float) this.queueBarData[(int) (byte) eIndex].TotalTime) <= (long) this.FreeCompletePeriod)
          queueBarSpriteType1 = eTimerSpriteType.Free;
        return queueBarSpriteType1;
    }
  }

  private byte GetIdleType()
  {
    bool flag1 = this.queueBarData[0].bActive || !DataManager.Instance.MySysSetting.bShowBuildingIdle;
    bool flag2 = this.queueBarData[1].bActive || !DataManager.Instance.MySysSetting.bShowResearchingIdle;
    bool flag3 = GUIManager.Instance.BuildingData.GetBuildNumByID((ushort) 10) > (byte) 0;
    if (!flag1 && !flag2 && flag3)
      return 3;
    if (!flag1)
      return 1;
    return !flag2 && flag3 ? (byte) 2 : (byte) 0;
  }

  private void SetIdleData()
  {
    int index = 17;
    QueueBarData queueBarData = this.queueBarData[index];
    byte idleType = this.GetIdleType();
    if (idleType != (byte) 0)
    {
      queueBarData.bActive = true;
      queueBarData.StartTime = (long) idleType;
    }
    else
    {
      queueBarData.bActive = false;
      queueBarData.StartTime = 0L;
    }
    this.queueBarData[index] = queueBarData;
  }

  public bool IsNewbie()
  {
    return GUIManager.Instance.BuildingData.GetBuildData((ushort) 8, (ushort) 0).Level < (byte) 6;
  }

  public void updateBattleData()
  {
    ushort LevelID = DataManager.StageDataController.currentPointID;
    byte num1 = (byte) DataManager.StageDataController.GetcurrentPointLevelID(out LevelID, (ushort) 0);
    DataManager.Instance.battleInfo.StageID = LevelID;
    byte num2;
    DataManager.Instance.battleInfo.StageKind = num2 = (byte) ((uint) num1 + 1U);
  }

  public bool FindItemComposite(ushort _equipID, int _needQuantity = 1)
  {
    ushort curItemQuantity1 = this.GetCurItemQuantity(_equipID, (byte) 0);
    Equip recordByKey = DataManager.Instance.EquipTable.GetRecordByKey(_equipID);
    if ((int) curItemQuantity1 >= _needQuantity)
      return true;
    if (recordByKey.SyntheticParts == null || recordByKey.SyntheticParts[0].SyntheticItem == (ushort) 0 || recordByKey.EquipKind == (byte) 4)
      return false;
    bool itemComposite = true;
    for (int index1 = 0; index1 < recordByKey.SyntheticParts.Length; ++index1)
    {
      int num = 0;
      if (recordByKey.SyntheticParts[index1].SyntheticItem != (ushort) 0)
      {
        ushort curItemQuantity2 = this.GetCurItemQuantity(recordByKey.SyntheticParts[index1].SyntheticItem, (byte) 0);
        for (int index2 = 0; index2 < recordByKey.SyntheticParts.Length; ++index2)
        {
          if ((int) recordByKey.SyntheticParts[index1].SyntheticItem == (int) recordByKey.SyntheticParts[index2].SyntheticItem)
            num += (int) recordByKey.SyntheticParts[index1].SyntheticItemNum * _needQuantity;
        }
        if ((int) curItemQuantity2 < num)
        {
          itemComposite = this.FindItemComposite(recordByKey.SyntheticParts[index1].SyntheticItem, num * (int) recordByKey.SyntheticParts[index1].SyntheticItemNum);
          if (!itemComposite)
            break;
        }
      }
      else
        break;
    }
    return itemComposite;
  }

  public void RecvArmygroupInfo(MessagePacket MP)
  {
    this.SoldierTotal = 0L;
    for (int index = 0; index < 16; ++index)
    {
      this.RoleAttr.m_Soldier[index] = MP.ReadUInt();
      this.SoldierTotal += (long) this.RoleAttr.m_Soldier[index];
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void RecvTrainingInfo(MessagePacket MP)
  {
    this.SoldierKind = MP.ReadByte();
    this.SoldierRank = MP.ReadByte();
    this.SoldierTrainingQty = MP.ReadUInt();
    this.SoldierBeginTime = MP.ReadLong();
    this.SoldierNeedTime = MP.ReadUInt();
    if (this.SoldierBeginTime != 0L)
    {
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, true, this.SoldierBeginTime, this.SoldierNeedTime);
      DataManager.Instance.SetRecvQueueBarData(10);
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
  }

  public void SendFinishtraining()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.SoldierTrain))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHTRAINING;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvTraining(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        this.SoldierKind = MP.ReadByte();
        this.SoldierRank = MP.ReadByte();
        this.SoldierQuantity = MP.ReadUInt();
        for (int index = 0; index < 5; ++index)
          this.Resource[index].Stock = MP.ReadUInt();
        this.SoldierBeginTime = MP.ReadLong();
        this.SoldierNeedTime = MP.ReadUInt();
        DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, true, this.SoldierBeginTime, this.SoldierNeedTime);
        DataManager.Instance.SetRecvQueueBarData(10);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1);
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        if ((int) this.SoldierTrainingQty != (int) this.SoldierQuantity)
        {
          if (this.SoldierQuantity == 0U)
          {
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
          }
          else
          {
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.IntToFormat((long) this.SoldierTrainingQty);
            GUIManager.Instance.MsgStr.IntToFormat((long) this.SoldierQuantity);
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3854U));
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3971U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4026U));
          }
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
        AudioManager.Instance.PlayUISFX(UIKind.Soldiers);
        break;
      case 1:
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        break;
    }
  }

  public void RecvAddSoldier(MessagePacket MP)
  {
    int Index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.SoldierQuantity = MP.ReadUInt();
    this.RoleAttr.m_Soldier[Index] += this.SoldierQuantity;
    this.SoldierTotal += (long) this.SoldierQuantity;
    this.Resource[0].SetResource(MP.ReadUInt(), MP.ReadLong());
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (Index + 1));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 2);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte) Index);
    DataManager.FBMissionDataManager.CheckHUDMsg((byte) 11);
  }

  public void RecvCanceltraining(MessagePacket MP)
  {
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
  }

  public void RecvTroopdismiss(MessagePacket MP)
  {
    int Index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.SoldierQuantity = MP.ReadUInt();
    this.RoleAttr.m_Soldier[Index] -= this.SoldierQuantity;
    this.SoldierTotal -= (long) this.SoldierQuantity;
    this.Resource[0].SetResource(MP.ReadUInt(), MP.ReadLong());
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (Index + 1));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.IntToFormat((long) this.SoldierQuantity, bNumber: true);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(5789U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) byte.MaxValue);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte) Index);
  }

  public void RecvImmediately(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    int Index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.SoldierQuantity = MP.ReadUInt();
    this.RoleAttr.m_Soldier[Index] += this.SoldierQuantity;
    this.SoldierTotal += (long) this.SoldierQuantity;
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong());
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack_Soldier, 1);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GameManager.OnRefresh();
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (Index + 1));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 2);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte) Index);
    DataManager.FBMissionDataManager.CheckHUDMsg((byte) 11);
  }

  public void RecvFinishtraining(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    int Index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.SoldierQuantity = MP.ReadUInt();
    this.RoleAttr.m_Soldier[Index] += this.SoldierQuantity;
    this.SoldierTotal += (long) this.SoldierQuantity;
    this.Resource[0].SetResource(MP.ReadUInt(), MP.ReadLong());
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GameManager.OnRefresh();
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (Index + 1));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 2);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte) Index);
  }

  public void InitMarchData()
  {
    for (int index1 = 0; index1 < 8; ++index1)
    {
      this.MarchEventData[index1].Type = EMarchEventType.EMET_Standby;
      for (int index2 = 0; index2 < 5; ++index2)
        this.MarchEventData[index1].HeroID[index2] = (ushort) 0;
      for (int index3 = 0; index3 < 4; ++index3)
      {
        for (int index4 = 0; index4 < 4; ++index4)
          this.MarchEventData[index1].TroopData[index3][index4] = 0U;
      }
      this.MarchEventData[index1].Point.zoneID = (ushort) 0;
      this.MarchEventData[index1].Point.pointID = (byte) 0;
      for (int index5 = 0; index5 < 5; ++index5)
        this.MarchEventData[index1].ResourceGetCount[index5] = 0U;
      this.MarchEventData[index1].Crystal = 0U;
      this.MarchEventData[index1].MaxOverLoad = 0U;
      this.MarchEventData[index1].PointKind = POINT_KIND.PK_NONE;
      this.MarchEventData[index1].DesPointLevel = (byte) 1;
      this.MarchEventData[index1].DesPlayerName = string.Empty;
      this.MarchEventData[index1].bRallyHost = (byte) 0;
    }
    for (int index = 0; index < 8; ++index)
    {
      this.MarchEventTime[index].BeginTime = 0L;
      this.MarchEventTime[index].RequireTime = 0U;
      this.RallyCountDown[index].BeginTime = 0L;
      this.RallyCountDown[index].RequireTime = 0U;
      this.JoinedRallyDataType[index].MarchIndex = (byte) 0;
      this.JoinedRallyDataType[index].State = (byte) 0;
      this.JoinedRallyDataType[index].MarchEventTime.BeginTime = 0L;
      this.JoinedRallyDataType[index].MarchEventTime.RequireTime = 0U;
      this.JoinedRallyDataType[index].RallyPoint.zoneID = (ushort) 0;
      this.JoinedRallyDataType[index].RallyPoint.pointID = (byte) 0;
      if (this.MarchEventData[index].Type > EMarchEventType.EMET_RallyStanby)
        this.SetQueueBarData((EQueueBarIndex) (2 + index), false, this.MarchEventTime[index].BeginTime, this.MarchEventTime[index].RequireTime);
    }
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
  }

  public void RecvMarchData(MessagePacket MP)
  {
    this.MaxMarchEventNum = MP.ReadByte();
    byte num = MP.ReadByte();
    this.InitMarchData();
    for (int index1 = 0; index1 < (int) num; ++index1)
    {
      byte index2 = MP.ReadByte();
      if ((int) index2 >= this.MarchEventData.Length)
        return;
      this.MarchEventData[(int) index2].Type = (EMarchEventType) MP.ReadByte();
      for (int index3 = 0; index3 < 5; ++index3)
      {
        ushort index4 = MP.ReadUShort();
        this.MarchEventData[(int) index2].HeroID[index3] = index4;
        if (index4 != (ushort) 0)
          this.TempFightHeroID[(int) index4] = (byte) 1;
      }
      for (int index5 = 0; index5 < 4; ++index5)
      {
        for (int index6 = 0; index6 < 4; ++index6)
          this.MarchEventData[(int) index2].TroopData[index5][index6] = MP.ReadUInt();
      }
      this.MarchEventData[(int) index2].Point.zoneID = MP.ReadUShort();
      this.MarchEventData[(int) index2].Point.pointID = MP.ReadByte();
      for (int index7 = 0; index7 < 5; ++index7)
        this.MarchEventData[(int) index2].ResourceGetCount[index7] = MP.ReadUInt();
      this.MarchEventData[(int) index2].Crystal = MP.ReadUInt();
      this.MarchEventData[(int) index2].MaxOverLoad = MP.ReadUInt();
      this.MarchEventData[(int) index2].PointKind = (POINT_KIND) MP.ReadByte();
      this.MarchEventData[(int) index2].DesPointLevel = MP.ReadByte();
      this.MarchEventData[(int) index2].DesPlayerName = MP.ReadString(13);
      this.MarchEventTime[(int) index2].BeginTime = MP.ReadLong();
      this.MarchEventTime[(int) index2].RequireTime = MP.ReadUInt();
      if (this.MarchEventData[(int) index2].Type >= EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int) index2].Type != EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int) index2].Type != EMarchEventType.EMET_RallyAttack)
      {
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) index2), true, this.MarchEventTime[(int) index2].BeginTime, this.MarchEventTime[(int) index2].RequireTime);
        DataManager.Instance.SetRecvQueueBarData(2 + (int) index2);
      }
      this.MarchEventData[(int) index2].bRallyHost = MP.ReadByte();
    }
    this.SetFightHeroData();
    this.CheckTroolCount();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if ((bool) (UnityEngine.Object) menu)
      menu.m_GroundInfo.UpdateUI(0, 0);
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, byte.MaxValue);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 4);
  }

  public void RecvTroopMarch(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    byte Index = 0;
    switch (num)
    {
      case 0:
        Index = MP.ReadByte();
        if (Index >= (byte) 8)
          return;
        this.MarchEventData[(int) Index].Type = (EMarchEventType) MP.ReadByte();
        if (this.MarchEventData[(int) Index].Type >= EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int) Index].Type <= EMarchEventType.EMET_RallyAttack && this.MarchEventData[(int) Index].Type != EMarchEventType.EMET_GatherMarching && this.MarchEventData[(int) Index].Type != EMarchEventType.EMET_CampMarching)
          this.CancelShieldItemBuff();
        for (int index1 = 0; index1 < 5; ++index1)
        {
          ushort index2 = MP.ReadUShort();
          this.MarchEventData[(int) Index].HeroID[index1] = index2;
          if (index2 != (ushort) 0)
            this.TempFightHeroID[(int) index2] = (byte) 1;
        }
        for (int index3 = 0; index3 < 4; ++index3)
        {
          for (int index4 = 0; index4 < 4; ++index4)
          {
            this.MarchEventData[(int) Index].TroopData[index3][index4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index3 * 4 + index4] -= this.MarchEventData[(int) Index].TroopData[index3][index4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) Index].TroopData[index3][index4];
          }
        }
        this.MarchEventData[(int) Index].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) Index].Point.pointID = MP.ReadByte();
        this.MarchEventTime[(int) Index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) Index].RequireTime = MP.ReadUInt();
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), true, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
        this.MarchEventData[(int) Index].PointKind = (POINT_KIND) MP.ReadByte();
        this.MarchEventData[(int) Index].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) Index].DesPlayerName = MP.ReadString(13);
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) Index, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_GatherMarching)
        {
          AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.GATHER_ONCE);
          if (this.MarchEventData[(int) Index].PointKind == POINT_KIND.PK_WOOD)
            AFAdvanceManager.Instance.CheckGatherTimberUnbroken();
        }
        if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int) Index].PointKind == POINT_KIND.PK_CITY)
        {
          AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.ATTACK_OTHERTURF);
          break;
        }
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9769U), this.mStringTable.GetStringByID(4034U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 4:
      case 5:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(645U));
        break;
      case 6:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9772U), this.mStringTable.GetStringByID(4034U));
        break;
      case 8:
        ushort yolkIdbyMapId = DataManager.mapDataController.getYolkIDbyMapID(this.mMapId, DataManager.MapDataController.FocusKingdomID);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIdbyMapId, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8599U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
    }
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
    GUIManager.Instance.HideUILock(EUILock.Expedition);
  }

  public void RecvTroopReturn(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = (EMarchEventType) MP.ReadByte();
    if (this.MarchEventData[(int) index].Type == EMarchEventType.EMET_RallyReturn)
      GameConstants.MapIDToPointCode(this.RoleAttr.CapitalPoint, out this.MarchEventData[(int) index].Point.zoneID, out this.MarchEventData[(int) index].Point.pointID);
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index), false, 0L, 0U);
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 2 + (int) index);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
  }

  public void RecvTroopHome(MessagePacket MP)
  {
    byte Index = MP.ReadByte();
    if (Index >= (byte) 8)
      return;
    if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_AttackReturn || this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_AttackRetreat)
      GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7730U), (ushort) 14);
    if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_CampReturn)
    {
      if (this.MarchEventData[(int) Index].PointKind == POINT_KIND.PK_YOLK)
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9318U), (ushort) 14);
      else if (this.MarchEventData[(int) Index].bRallyHost == (byte) 1)
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9731U), (ushort) 14);
      else
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7731U), (ushort) 14);
    }
    if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_GatherReturn)
      GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7732U), (ushort) 14);
    if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_RallyReturn || this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_RallyRetreat)
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(494U), (ushort) 14);
    if (this.MarchEventData[(int) Index].Type == EMarchEventType.EMET_InfroceReturn)
      GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4849U), (ushort) 14);
    this.MarchEventData[(int) Index].bRallyHost = (byte) 0;
    this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_Standby;
    this.MarchEventData[(int) Index].Point.zoneID = (ushort) 2048;
    this.SoldierTotal = 0L;
    for (int index1 = 0; index1 < 4; ++index1)
    {
      for (int index2 = 0; index2 < 4; ++index2)
      {
        this.MarchEventData[(int) Index].TroopData[index1][index2] = MP.ReadUInt();
        this.RoleAttr.m_Soldier[index1 * 4 + index2] = this.MarchEventData[(int) Index].TroopData[index1][index2];
        this.SoldierTotal += (long) this.RoleAttr.m_Soldier[index1 * 4 + index2];
      }
      Array.Clear((Array) this.MarchEventData[(int) Index].TroopData[index1], 0, this.MarchEventData[(int) Index].TroopData[index1].Length);
    }
    for (int index = 0; index < 5; ++index)
    {
      this.MarchEventData[(int) Index].ResourceGetCount[index] = MP.ReadUInt();
      DataManager.instance.Resource[index].Stock = this.MarchEventData[(int) Index].ResourceGetCount[index];
    }
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), false, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) Index), false, 0L, 0U);
    for (int index3 = 0; index3 < 5; ++index3)
    {
      uint index4 = (uint) this.MarchEventData[(int) Index].HeroID[index3];
      if ((long) index4 < (long) this.TempFightHeroID.Length)
      {
        this.TempFightHeroID[(IntPtr) index4] = (byte) 0;
        this.MarchEventData[(int) Index].HeroID[index3] = (ushort) 0;
      }
    }
    this.CheckTroolCount();
    this.SetFightHeroData();
    DataManager.missionDataManager.CheckResourceCollect();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BattleHeroSelect, 2);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GameManager.OnRefresh(NetworkNews.Refresh_TroopHome);
    if (this.MarchEventData[(int) Index].PointKind != POINT_KIND.PK_YOLK)
      return;
    GUIManager.Instance.HideUILock(EUILock.Expedition);
  }

  public void RecvTroopCamping(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_Camp;
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_CAMP;
    this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
    this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7728U), (ushort) 13);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
  }

  public void RecvGatheringEvent(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_Gathering;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.MarchEventData[(int) index].MaxOverLoad = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7729U), (ushort) 13);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if (!(bool) (UnityEngine.Object) menu)
      return;
    menu.m_GroundInfo.UpdateUI(0, 0);
  }

  public void RecvTroopeliminate(MessagePacket MP)
  {
    ushort leaderId = DataManager.instance.GetLeaderID();
    byte Index = MP.ReadByte();
    if (Index >= (byte) 8)
      return;
    this.MarchEventData[(int) Index].bRallyHost = (byte) 0;
    this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_Standby;
    for (int index1 = 0; index1 < 5; ++index1)
    {
      ushort index2 = this.MarchEventData[(int) Index].HeroID[index1];
      if (index2 != (ushort) 0)
      {
        if ((int) index2 == (int) leaderId)
        {
          if (DataManager.Instance.beCaptured.nowCaptureStat == LoadCaptureState.None)
            this.TempFightHeroID[(int) index2] = (byte) 0;
        }
        else
          this.TempFightHeroID[(int) index2] = (byte) 0;
      }
      this.MarchEventData[(int) Index].HeroID[index1] = (ushort) 0;
    }
    for (int index = 0; index < 4; ++index)
      Array.Clear((Array) this.MarchEventData[(int) Index].TroopData[index], 0, this.MarchEventData[(int) Index].TroopData[index].Length);
    Vector2 pointCode = GameConstants.MapPosToPointCode(GameConstants.getTileMapPosbySpriteID(this.RoleAttr.CapitalPoint));
    this.MarchEventData[(int) Index].Point.zoneID = (ushort) pointCode.x;
    this.MarchEventData[(int) Index].Point.pointID = (byte) pointCode.y;
    for (int index = 0; index < 5; ++index)
      this.MarchEventData[(int) Index].ResourceGetCount[index] = 0U;
    this.MarchEventData[(int) Index].Crystal = 0U;
    this.MarchEventTime[(int) Index].BeginTime = 0L;
    this.MarchEventTime[(int) Index].RequireTime = 0U;
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), false, 0L, 0U);
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) Index), false, 0L, 0U);
    this.CheckTroolCount();
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 4);
  }

  public void TroopeTakeBack(int mapPointID, EMarchEventType marchType)
  {
    if (marchType >= EMarchEventType.EMET_AttackMarching || !GUIManager.Instance.ShowUILock(EUILock.Expedition))
      return;
    for (int data = 0; data < (int) this.MaxMarchEventNum; ++data)
    {
      if (this.MarchEventData[data].Type == marchType && GameConstants.PointCodeToMapID(this.MarchEventData[data].Point.zoneID, this.MarchEventData[data].Point.pointID) == mapPointID)
      {
        MessagePacket messagePacket = new MessagePacket((ushort) 1024);
        messagePacket.Protocol = Protocol._MSG_REQUEST_TROOPRETURN;
        messagePacket.AddSeqId();
        messagePacket.Add(data);
        messagePacket.Send();
        break;
      }
    }
  }

  public void TroopeTakeBack(uint lineTableID)
  {
    MapLine mapLine = DataManager.MapDataController.MapLineTable[(int) lineTableID];
    for (byte MarchEventID = 0; (int) MarchEventID < (int) this.MaxMarchEventNum; ++MarchEventID)
    {
      if (this.MarchEventData[(int) MarchEventID].Type > EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int) MarchEventID].Type < EMarchEventType.EMET_AttackReturn && this.MarchEventData[(int) MarchEventID].Type == (EMarchEventType) mapLine.lineFlag && (long) this.MarchEventTime[(int) MarchEventID].RequireTime == (long) mapLine.during && (this.MarchEventData[(int) MarchEventID].Type == EMarchEventType.EMET_RallyAttack || DataManager.CompareStr(mapLine.playerName, this.RoleAttr.Name) == 0))
      {
        this.TroopeTakeBack(MarchEventID);
        break;
      }
    }
  }

  public byte GetMarchInxByLineTableID(uint lineTableID)
  {
    byte inxByLineTableId = byte.MaxValue;
    MapLine mapLine = DataManager.MapDataController.MapLineTable[(int) lineTableID];
    for (byte index = 0; (int) index < (int) this.MaxMarchEventNum; ++index)
    {
      if (this.MarchEventData[(int) index].Type > EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int) index].Type <= EMarchEventType.EMET_HitMonsterRetreat && this.MarchEventData[(int) index].Type == (EMarchEventType) mapLine.lineFlag && this.MarchEventTime[(int) index].BeginTime == (long) mapLine.begin && (long) this.MarchEventTime[(int) index].RequireTime == (long) mapLine.during && (this.MarchEventData[(int) index].Type == EMarchEventType.EMET_RallyAttack || DataManager.CompareStr(mapLine.playerName, this.RoleAttr.Name) == 0))
      {
        inxByLineTableId = index;
        break;
      }
    }
    return inxByLineTableId;
  }

  public void TroopeTakeBack(byte MarchEventID)
  {
    GUIManager.Instance.UseOrSpend((ushort) 1001, this.mStringTable.GetStringByID(1505U), (ushort) MarchEventID, (ushort) 0, (ushort) 0, maxcount: (ushort) 0);
  }

  public void UpdateMarchEventTime(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
  }

  public void UpdateJoinedMarchEventTime(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.JoinedRallyDataType[(int) index].MarchEventTime.BeginTime = MP.ReadLong();
    this.JoinedRallyDataType[(int) index].MarchEventTime.RequireTime = MP.ReadUInt();
    this.MarchEventTime[(int) index].BeginTime = this.JoinedRallyDataType[(int) index].MarchEventTime.BeginTime;
    this.MarchEventTime[(int) index].RequireTime = this.JoinedRallyDataType[(int) index].MarchEventTime.RequireTime;
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_CITY;
    this.JoinedRallyDataType[(int) index].State = (byte) 2;
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RecvUpdateMarctEventData(MessagePacket MP)
  {
    byte Index = MP.ReadByte();
    if (Index >= (byte) 8)
      return;
    EUpdateTroopType eupdateTroopType = (EUpdateTroopType) MP.ReadByte();
    if (eupdateTroopType == EUpdateTroopType.EUTT_Hero)
    {
      for (int index = 0; index < 5; ++index)
        this.MarchEventData[(int) Index].HeroID[index] = MP.ReadUShort();
    }
    if (eupdateTroopType == EUpdateTroopType.EUTT_TroopNum)
    {
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
          this.MarchEventData[(int) Index].TroopData[index1][index2] = MP.ReadUInt();
      }
    }
    if (eupdateTroopType == EUpdateTroopType.EUTT_HeroAndTroop)
    {
      for (int index = 0; index < 5; ++index)
        this.MarchEventData[(int) Index].HeroID[index] = MP.ReadUShort();
      for (int index3 = 0; index3 < 4; ++index3)
      {
        for (int index4 = 0; index4 < 4; ++index4)
          this.MarchEventData[(int) Index].TroopData[index3][index4] = MP.ReadUInt();
      }
    }
    if (eupdateTroopType == EUpdateTroopType.EUTT_Point)
    {
      this.MarchEventData[(int) Index].Point.zoneID = MP.ReadUShort();
      this.MarchEventData[(int) Index].Point.pointID = MP.ReadByte();
    }
    this.CheckTroolCount();
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 1, (int) Index);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
  }

  public int getMapIDbyGroupID(byte groupID)
  {
    Vector2 zero1 = Vector2.zero;
    Vector2 zero2 = Vector2.zero;
    switch (groupID)
    {
      case 8:
        Vector2 tileMapPosbyMapId1 = GameConstants.getTileMapPosbyMapID(this.beCaptured.MapID);
        Vector2 tileMapPosbyMapId2 = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
        tileMapPosbyMapId1.x *= 2f;
        tileMapPosbyMapId2.x *= 2f;
        float num1 = Mathf.Max(0.0f, (float) (this.ServerTime - DataManager.Instance.beCaptured.StartActionTime));
        float num2 = DataManager.Instance.beCaptured.TotalTime != 0U ? num1 / (float) DataManager.Instance.beCaptured.TotalTime : 1f;
        Vector2 vector2_1 = tileMapPosbyMapId1 + (tileMapPosbyMapId2 - tileMapPosbyMapId1) * num2;
        vector2_1.x *= 0.5f;
        return GameConstants.TileMapPosToMapID((int) Mathf.Round(vector2_1.x), (int) Mathf.Round(vector2_1.y));
      case 9:
        int mapId = GameConstants.PointCodeToMapID(PetManager.Instance.m_PetMarchEventData.Point.zoneID, PetManager.Instance.m_PetMarchEventData.Point.pointID);
        Vector2 tileMapPosbyMapId3 = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
        Vector2 tileMapPosbyMapId4 = GameConstants.getTileMapPosbyMapID(mapId);
        tileMapPosbyMapId3.x *= 2f;
        tileMapPosbyMapId4.x *= 2f;
        float num3 = Mathf.Max(0.0f, (float) (this.ServerTime - PetManager.Instance.m_PetMarchEventData.MarchEventTime.BeginTime));
        float num4 = PetManager.Instance.m_PetMarchEventData.MarchEventTime.RequireTime != 0U ? num3 / (float) PetManager.Instance.m_PetMarchEventData.MarchEventTime.RequireTime : 1f;
        tileMapPosbyMapId3 += (tileMapPosbyMapId4 - tileMapPosbyMapId3) * num4;
        tileMapPosbyMapId3.x *= 0.5f;
        return GameConstants.TileMapPosToMapID((int) Mathf.Round(tileMapPosbyMapId3.x), (int) Mathf.Round(tileMapPosbyMapId3.y));
      default:
        Vector2 vector2_2;
        Vector2 vector2_3;
        if (this.MarchEventData[(int) groupID].Type == EMarchEventType.EMET_RallyAttack)
        {
          vector2_2 = GameConstants.getTileMapPosbyPointCode(this.JoinedRallyDataType[(int) groupID].RallyPoint.zoneID, this.JoinedRallyDataType[(int) groupID].RallyPoint.pointID);
          vector2_3 = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int) groupID].Point.zoneID, this.MarchEventData[(int) groupID].Point.pointID);
        }
        else if (this.MarchEventData[(int) groupID].Type < EMarchEventType.EMET_AttackReturn)
        {
          vector2_2 = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
          vector2_3 = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int) groupID].Point.zoneID, this.MarchEventData[(int) groupID].Point.pointID);
        }
        else
        {
          if (this.MarchEventData[(int) groupID].Type == EMarchEventType.EMET_RallyReturn)
            return this.RoleAttr.CapitalPoint;
          vector2_2 = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int) groupID].Point.zoneID, this.MarchEventData[(int) groupID].Point.pointID);
          vector2_3 = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
        }
        vector2_2.x *= 2f;
        vector2_3.x *= 2f;
        float num5 = Mathf.Max(0.0f, (float) (this.ServerTime - this.MarchEventTime[(int) groupID].BeginTime));
        float num6 = this.MarchEventTime[(int) groupID].RequireTime != 0U ? num5 / (float) this.MarchEventTime[(int) groupID].RequireTime : 1f;
        Vector2 vector2_4 = vector2_2 + (vector2_3 - vector2_2) * num6;
        vector2_4.x *= 0.5f;
        return GameConstants.TileMapPosToMapID((int) Mathf.Round(vector2_4.x), (int) Mathf.Round(vector2_4.y));
    }
  }

  public void MoveTo(ushort kingdomID, int mapPointID = -1)
  {
    ushort ItemID = 0;
    if ((int) kingdomID != (int) DataManager.mapDataController.OtherKingdomData.kingdomID)
    {
      bool flag1 = ActivityManager.Instance.IsInKvK(kingdomID);
      bool flag2 = ActivityManager.Instance.KOWData.EventState == EActivityState.EAS_Run && (int) kingdomID == (int) DataManager.mapDataController.FocusKingdomID && DataManager.mapDataController.FocusKingdomPeriod == KINGDOM_PERIOD.KP_WORLD_WAR;
      bool flag3 = ActivityManager.Instance.NobilityActivityData.EventState == EActivityState.EAS_Run && (int) kingdomID == (int) DataManager.mapDataController.FocusKingdomID && (int) kingdomID == (int) ActivityManager.Instance.KOWKingdomID;
      if ((int) kingdomID == (int) DataManager.mapDataController.kingdomData.kingdomID || flag1 || flag2 || flag3)
      {
        if ((int) kingdomID != (int) DataManager.mapDataController.kingdomData.kingdomID)
        {
          if (flag1)
          {
            if (DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK)
            {
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952U), (ushort) byte.MaxValue);
              return;
            }
            switch (ActivityManager.Instance.GetKvKState())
            {
              case EActivityState.EAS_HomeStart:
              case EActivityState.EAS_HomeEnd:
              case EActivityState.EAS_StartRanking:
                GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(985U), (ushort) byte.MaxValue);
                return;
            }
          }
          if (flag2)
          {
            if (mapPointID < 0)
            {
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952U), (ushort) byte.MaxValue);
              return;
            }
            if (GUIManager.Instance.BuildingData.GetBuildData((ushort) 8, (ushort) 0).Level < (byte) 25)
            {
              CString cstring = StringManager.Instance.StaticString1024();
              cstring.ClearString();
              cstring.IntToFormat(25L);
              cstring.AppendFormat(this.mStringTable.GetStringByID(9167U));
              GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
              return;
            }
            ItemID = GameConstants.WorldWarTeleportItemID;
          }
        }
        else if (DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_WORLD_WAR)
        {
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952U), (ushort) byte.MaxValue);
          return;
        }
        if (mapPointID < 0)
          ItemID = GameConstants.RandomTeleportItemID;
        else if ((int) ItemID != (int) GameConstants.WorldWarTeleportItemID)
          ItemID = GameConstants.AdvanceTeleportItemID;
      }
      else if (!flag1 && ((int) DataManager.mapDataController.OtherKingdomData.kingdomID == (int) DataManager.mapDataController.kingdomData.kingdomID || DataManager.mapDataController.OtherKingdomData.kingdomPeriod == KINGDOM_PERIOD.KP_WORLD_WAR) && DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && (int) kingdomID != (int) ActivityManager.Instance.KOWKingdomID)
      {
        if (this.IsNewbie())
        {
          ItemID = GameConstants.NewbieTeleportItemID;
          if (this.GetCurItemQuantity(ItemID, (byte) 0) <= (ushort) 0)
          {
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(615U), 0);
            return;
          }
        }
        else
        {
          UIImmigration.kingdomID = (int) kingdomID;
          UIImmigration.mapPointID = mapPointID;
          this.RequsetWorldTeleportItemCount();
          return;
        }
      }
      else
      {
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(953U), (ushort) byte.MaxValue);
        return;
      }
      for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
      {
        if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
          return;
        }
      }
      if (((int) ItemID == (int) GameConstants.WorldTeleportItemID || (int) ItemID == (int) GameConstants.NewbieTeleportItemID) && this.CheckResources((int) kingdomID | (int) ItemID << 16, mapPointID))
        return;
      if ((int) ItemID == (int) GameConstants.WorldTeleportItemID)
      {
        this.RequsetWorldTeleportItemCount();
        return;
      }
    }
    else
    {
      for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
      {
        if (this.MarchEventData[index].Type > EMarchEventType.EMET_RallyStanby)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(616U), 0);
          return;
        }
      }
      ItemID = !this.IsNewbie() || this.GetCurItemQuantity(GameConstants.NewbieTeleportItemID, (byte) 0) <= (ushort) 0 ? GameConstants.AdvanceTeleportItemID : GameConstants.NewbieTeleportItemID;
    }
    ushort zoneID = 0;
    byte pointID = 0;
    GameConstants.MapIDToPointCode(mapPointID, out zoneID, out pointID);
    Vector2 tileMapPosbyMapId = GameConstants.getTileMapPosbyMapID(mapPointID);
    CString cstring1 = StringManager.Instance.StaticString1024();
    cstring1.ClearString();
    if (GUIManager.Instance.IsArabic)
    {
      cstring1.StringToFormat(this.mStringTable.GetStringByID(4504U));
      cstring1.IntToFormat((long) kingdomID);
      if ((int) ItemID != (int) GameConstants.RandomTeleportItemID)
      {
        cstring1.StringToFormat(this.mStringTable.GetStringByID(4505U));
        cstring1.IntToFormat((long) tileMapPosbyMapId.x);
        cstring1.StringToFormat(this.mStringTable.GetStringByID(4506U));
        cstring1.IntToFormat((long) tileMapPosbyMapId.y);
        cstring1.AppendFormat("{1}{0} {3}{2} {5}{4}");
      }
      else
        cstring1.AppendFormat("{1}{0}");
    }
    else
    {
      cstring1.StringToFormat(this.mStringTable.GetStringByID(4504U));
      cstring1.IntToFormat((long) kingdomID);
      if ((int) ItemID != (int) GameConstants.RandomTeleportItemID)
      {
        cstring1.StringToFormat(this.mStringTable.GetStringByID(4505U));
        cstring1.IntToFormat((long) tileMapPosbyMapId.x);
        cstring1.StringToFormat(this.mStringTable.GetStringByID(4506U));
        cstring1.IntToFormat((long) tileMapPosbyMapId.y);
        cstring1.AppendFormat("{0}{1} {2}{3} {4}{5}");
      }
      else
        cstring1.AppendFormat("{0}{1}");
    }
    GUIManager.Instance.UseOrSpend(ItemID, this.mStringTable.GetStringByID(4512U), kingdomID, zoneID, (ushort) pointID, UseOrSpendType.UST_DIAMOND_DOUBLE_CHECK, SpecialStr: cstring1.ToString(), maxcount: (ushort) 0);
  }

  public bool CheckResources(int kingdomID, int mapPointID)
  {
    uint effectBaseVal = this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_RESOURCE_PROTCTION);
    uint x = GameConstants.appCeil((float) GUIManager.Instance.BuildingData.GetBuildLevelRequestData((ushort) 9, GUIManager.Instance.BuildingData.GetBuildData((ushort) 9, (ushort) 0).Level).Value1 * ((float) (10000U + effectBaseVal) / 10000f));
    bool flag = false;
    for (int index = 0; index < this.Resource.Length; ++index)
    {
      if (this.Resource[index].Stock > x)
      {
        flag = true;
        break;
      }
    }
    ushort num = (ushort) (kingdomID >> 16);
    if (flag)
    {
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.uLongToFormat((ulong) x);
      if ((int) num == (int) GameConstants.WorldTeleportItemID)
        cstring.AppendFormat(this.mStringTable.GetStringByID(959U));
      else
        cstring.AppendFormat(this.mStringTable.GetStringByID(945U));
      GUIManager.Instance.OpenOKCancelBox(11, this.mStringTable.GetStringByID(5893U), cstring.ToString(), kingdomID, mapPointID, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(4U));
      return true;
    }
    if ((int) num != (int) GameConstants.WorldTeleportItemID)
      return false;
    CString cstring1 = StringManager.Instance.StaticString1024();
    cstring1.ClearString();
    cstring1.Append(this.mStringTable.GetStringByID(958U));
    GUIManager.Instance.OpenOKCancelBox(11, this.mStringTable.GetStringByID(5893U), cstring1.ToString(), kingdomID, mapPointID, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(4U));
    return true;
  }

  public void RequsetWorldTeleportItemCount()
  {
    GUIManager.Instance.ShowUILock(EUILock.WorldTeleport);
    this.WorldTeleportItemCount = (ushort) 0;
    this.WorldTeleportRank = 0;
    MessagePacket messagePacket = (int) DataManager.MapDataController.FocusKingdomID == (int) DataManager.MapDataController.OtherKingdomData.kingdomID ? new MessagePacket((ushort) 1024) : MessagePacket.GetGuestMessagePack();
    messagePacket.Protocol = Protocol._MSG_REQUEST_WORLD_TELEPORT_ITEM;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RoleAttr.Power);
    messagePacket.Send();
  }

  public void RecvWorldTeleportItemCount(int rank, ushort count)
  {
    this.WorldTeleportRank = rank;
    if (this.WorldTeleportRank < 0)
    {
      this.WorldTeleportRank = 0;
      this.WorldTeleportItemCount = (ushort) 0;
      GUIManager.Instance.HideUILock(EUILock.WorldTeleport);
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(954U), (ushort) byte.MaxValue);
    }
    else
    {
      ++count;
      this.WorldTeleportItemCount = count;
      GUIManager.Instance.OpenMenu(EGUIWindow.UI_Immigration, bSecWindow: true);
      GUIManager.Instance.HideUILock(EUILock.WorldTeleport);
    }
  }

  public void SetSBTime(long time, CString tmpS)
  {
    tmpS.ClearString();
    if (GUIManager.Instance.IsArabic)
    {
      if (time >= 0L && time < 60L)
      {
        tmpS.IntToFormat(time);
        if (time > 1L)
          tmpS.StringToFormat(this.mStringTable.GetStringByID(446U));
        else
          tmpS.StringToFormat(this.mStringTable.GetStringByID(442U));
      }
      else if (time >= 60L && time < 3600L)
      {
        long x = time / 60L;
        tmpS.IntToFormat(x);
        if (x > 1L)
          tmpS.StringToFormat(this.mStringTable.GetStringByID(447U));
        else
          tmpS.StringToFormat(this.mStringTable.GetStringByID(443U));
      }
      else if (time >= 3600L && time < 86400L)
      {
        long x = time / 3600L;
        tmpS.IntToFormat(x);
        if (x > 1L)
          tmpS.StringToFormat(this.mStringTable.GetStringByID(448U));
        else
          tmpS.StringToFormat(this.mStringTable.GetStringByID(444U));
      }
      else if (time >= 86400L)
      {
        long x = time / 86400L;
        tmpS.IntToFormat(x);
        if (x > 1L)
          tmpS.StringToFormat(this.mStringTable.GetStringByID(449U));
        else
          tmpS.StringToFormat(this.mStringTable.GetStringByID(445U));
      }
      else
      {
        tmpS.IntToFormat(0L);
        tmpS.StringToFormat(this.mStringTable.GetStringByID(442U));
      }
      tmpS.AppendFormat("{0} {1}");
    }
    else if (time >= 0L && time < 60L)
    {
      tmpS.IntToFormat(time);
      if (time > 1L)
        tmpS.AppendFormat(this.mStringTable.GetStringByID(446U));
      else
        tmpS.AppendFormat(this.mStringTable.GetStringByID(442U));
    }
    else if (time >= 60L && time < 3600L)
    {
      long x = time / 60L;
      tmpS.IntToFormat(x);
      if (x > 1L)
        tmpS.AppendFormat(this.mStringTable.GetStringByID(447U));
      else
        tmpS.AppendFormat(this.mStringTable.GetStringByID(443U));
    }
    else if (time >= 3600L && time < 86400L)
    {
      long x = time / 3600L;
      tmpS.IntToFormat(x);
      if (x > 1L)
        tmpS.AppendFormat(this.mStringTable.GetStringByID(448U));
      else
        tmpS.AppendFormat(this.mStringTable.GetStringByID(444U));
    }
    else if (time >= 86400L)
    {
      long x = time / 86400L;
      tmpS.IntToFormat(x);
      if (x > 1L)
        tmpS.AppendFormat(this.mStringTable.GetStringByID(449U));
      else
        tmpS.AppendFormat(this.mStringTable.GetStringByID(445U));
    }
    else
    {
      tmpS.IntToFormat(0L);
      tmpS.AppendFormat(this.mStringTable.GetStringByID(442U));
    }
  }

  public static bool Save(string fileName, byte[] bytes)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/{1}", (object) Application.persistentDataPath, (object) fileName);
    string path = stringBuilder.ToString();
    if (bytes == null)
    {
      if (File.Exists(path))
        File.Delete(path);
      return true;
    }
    FileStream fileStream;
    try
    {
      fileStream = File.Create(path);
    }
    catch (Exception ex)
    {
      Debug.LogError((object) ex.Message);
      return false;
    }
    fileStream.Write(bytes, 0, bytes.Length);
    fileStream.Close();
    return true;
  }

  public static byte[] Load(string fileName)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/{1}", (object) Application.persistentDataPath, (object) fileName);
    string path = stringBuilder.ToString();
    return File.Exists(path) ? File.ReadAllBytes(path) : (byte[]) null;
  }

  private static byte[] ToByteArray<T>(T[] source) where T : struct
  {
    GCHandle gcHandle = GCHandle.Alloc((object) source, GCHandleType.Pinned);
    try
    {
      IntPtr source1 = gcHandle.AddrOfPinnedObject();
      int num = Marshal.SizeOf(typeof (T));
      byte[] destination = new byte[source.Length * num];
      Marshal.Copy(source1, destination, 0, destination.Length);
      return destination;
    }
    finally
    {
      if (gcHandle.IsAllocated)
        gcHandle.Free();
    }
  }

  private static T[] FromByteArray<T>(byte[] source) where T : struct
  {
    T[] objArray = new T[source.Length / Marshal.SizeOf(typeof (T))];
    GCHandle gcHandle = GCHandle.Alloc((object) objArray, GCHandleType.Pinned);
    try
    {
      IntPtr destination = gcHandle.AddrOfPinnedObject();
      Marshal.Copy(source, 0, destination, source.Length);
      return objArray;
    }
    finally
    {
      if (gcHandle.IsAllocated)
        gcHandle.Free();
    }
  }

  public static int CompareStr(CString StrA, CString StrB)
  {
    if (StrA == StrB)
      return 0;
    if (StrA == null)
      return -1;
    if (StrB == null || StrA.Length > StrB.Length)
      return 1;
    if (StrB.Length > StrA.Length)
      return -1;
    for (int index = 0; index < StrA.Length; ++index)
    {
      if ((int) StrA[index] > (int) StrB[index])
        return 1;
      if ((int) StrA[index] < (int) StrB[index])
        return -1;
    }
    return 0;
  }

  public static int CompareStr(string StrA, CString StrB)
  {
    if (StrA == null)
      return -1;
    if (StrB == null || StrA.Length > StrB.Length)
      return 1;
    if (StrB.Length > StrA.Length)
      return -1;
    for (int index = 0; index < StrA.Length; ++index)
    {
      if ((int) StrA[index] > (int) StrB[index])
        return 1;
      if ((int) StrA[index] < (int) StrB[index])
        return -1;
    }
    return 0;
  }

  public static int CompareStr(CString StrA, string StrB)
  {
    if (StrA == null)
      return -1;
    if (StrB == null || StrA.Length > StrB.Length)
      return 1;
    if (StrB.Length > StrA.Length)
      return -1;
    for (int index = 0; index < StrA.Length; ++index)
    {
      if ((int) StrA[index] > (int) StrB[index])
        return 1;
      if ((int) StrA[index] < (int) StrB[index])
        return -1;
    }
    return 0;
  }

  public void AddBlackList(CString PlayerName, ushort PlayerPicID)
  {
    int hashCode = PlayerName.GetHashCode(false);
    if (this.TalkData_BlackList.ContainsKey(PlayerName.GetHashCode(false)))
      return;
    BlackListDataType val = this.TalkData_BPool.spawn();
    if (val != null)
    {
      val.PlayerName.Length = 0;
      val.PlayerName.Append(PlayerName);
      val.PlayerPicID = PlayerPicID;
      this.TalkData_BlackList.Add(hashCode, val);
      this.SaveBlackList();
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.StringToFormat(PlayerName);
      cstring.AppendFormat(this.mStringTable.GetStringByID(8210U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    }
    else
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8239U), (ushort) byte.MaxValue);
  }

  public void RemoveBlackList(CString RemoveName)
  {
    int hashCode = RemoveName.GetHashCode(false);
    BlackListDataType t = this.TalkData_BlackList.Find(hashCode);
    if (t == null)
      return;
    CString cstring = StringManager.Instance.StaticString1024();
    cstring.StringToFormat(t.PlayerName);
    cstring.AppendFormat(this.mStringTable.GetStringByID(8211U));
    GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    this.TalkData_BPool.despawn(t);
    this.TalkData_BlackList.Remove(hashCode);
    this.SaveBlackList();
  }

  public void RemoveBlackList(int Key, int Index)
  {
    if (Index >= this.TalkData_BlackList.Length)
      return;
    CString cstring = StringManager.Instance.StaticString1024();
    cstring.StringToFormat(this.TalkData_BlackList.Values[Index].PlayerName);
    cstring.AppendFormat(this.mStringTable.GetStringByID(8211U));
    GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    this.TalkData_BPool.despawn(this.TalkData_BlackList.Values[Index]);
    this.TalkData_BlackList.Remove(Key);
    this.SaveBlackList();
  }

  public bool FindBlackList(CString PlayerName)
  {
    return this.TalkData_BlackList.ContainsKey(PlayerName.GetHashCode(false));
  }

  public void LoadBlackList()
  {
    this.ReSetBlackListData();
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}{2}", (object) AssetManager.persistentDataPath, (object) this.BlackListName, (object) this.RoleAttr.UserId);
    string path = stringBuilder.ToString();
    this.bNeedInitialEmojiSave = !File.Exists(path);
    using (FileStream input = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
    {
      if (input.Length <= 0L)
        return;
      using (BinaryReader binaryReader = new BinaryReader((Stream) input))
      {
        int num = binaryReader.ReadInt32();
        for (int index = 0; index < num && index < 100; ++index)
        {
          BlackListDataType val = this.TalkData_BPool.spawn();
          val.PlayerPicID = binaryReader.ReadUInt16();
          val.PlayerName.Length = 0;
          val.PlayerName.Append(binaryReader.ReadString());
          this.TalkData_BlackList.Add(val.PlayerName.GetHashCode(false), val);
        }
      }
    }
  }

  public void SaveBlackList()
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}{2}", (object) AssetManager.persistentDataPath, (object) this.BlackListName, (object) this.RoleAttr.UserId);
    using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate))
    {
      using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
      {
        binaryWriter.Write(this.TalkData_BlackList.Count);
        for (int index = 0; index < 100; ++index)
        {
          if (this.TalkData_BlackList.Values[index] != null)
          {
            binaryWriter.Write(this.TalkData_BlackList.Values[index].PlayerPicID);
            binaryWriter.Write(this.TalkData_BlackList.Values[index].PlayerName.ToString());
          }
        }
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BlackList, 0);
  }

  public void ReSetBlackListData()
  {
    for (int index = 0; index < 100; ++index)
    {
      if (this.TalkData_BlackList.Values[index] != null)
        this.TalkData_BPool.despawn(this.TalkData_BlackList.Values[index]);
    }
    this.TalkData_BlackList.Clear();
  }

  private void InitialTalkData()
  {
    this.TalkData_KPool = new ObjectPool<TalkDataType>(new TalkDataType(), 30);
    this.TalkData_APool = new ObjectPool<TalkDataType>(new TalkDataType(), 2000);
    this.TalkData_BPool = new ObjectPool<BlackListDataType>(new BlackListDataType(), 100);
    this.MessageBoard_Pool = new ObjectPool<MessageBoard>(new MessageBoard(), 20);
    this.ChatStr[0] = new CString(435);
    this.ChatStr[1] = new CString(435);
    this.ChatStrA[0] = new CString(435);
    this.ChatStrA[1] = new CString(435);
  }

  private TalkDataType SplitTalkData()
  {
    int index = 1000;
    if (index == this.unReadIndex)
      ++index;
    if (this.unReadIndex > index)
      --this.unReadIndex;
    this.TopID = this.TalkData_Alliance[0].TalkID;
    this.MiddleTopIndex = index - 1;
    this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
    TalkDataType talkDataType = this.TalkData_Alliance[index];
    this.TalkData_Alliance.RemoveAt(index);
    this.MiddleBottomIndex = this.MiddleTopIndex + 1;
    this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
    this.SendAskKind = 0;
    this.AskOldData = (byte) 2;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 4, 1);
    return talkDataType;
  }

  public TalkDataType SpawnTalkData(byte AlliOrKing)
  {
    switch (AlliOrKing)
    {
      case 0:
        TalkDataType talkDataType1 = this.TalkData_KPool.spawn();
        if (talkDataType1 == null)
        {
          talkDataType1 = this.TalkData_Kingdom[0];
          this.TalkData_Kingdom.RemoveAt(0);
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14);
        }
        talkDataType1.Initial();
        return talkDataType1;
      case 1:
        bool flag = false;
        TalkDataType talkDataType2 = this.TalkData_APool.spawn();
        if (talkDataType2 == null)
        {
          if (this.SendAskKind == 0)
          {
            if (this.MiddleTopIndex != -1 && this.MiddleBottomIndex == this.MiddleTopIndex)
            {
              talkDataType2 = this.SplitTalkData();
            }
            else
            {
              talkDataType2 = this.TalkData_Alliance[this.MiddleTopIndex];
              this.TalkData_Alliance.RemoveAt(this.MiddleTopIndex);
              if (this.MiddleTopIndex == 0)
              {
                int num = 1000;
                if (num == this.unReadIndex)
                  ++num;
                if (this.unReadIndex > num)
                  --this.unReadIndex;
                this.TopID = this.TalkData_Alliance[0].TalkID;
                this.MiddleTopIndex = num;
                this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
                this.MiddleBottomIndex = this.MiddleTopIndex + 1;
                this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
                this.SendAskKind = 0;
                this.AskOldData = (byte) 2;
                GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 4, 1);
                return talkDataType2;
              }
              --this.MiddleTopIndex;
              this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
              --this.MiddleBottomIndex;
              if (this.unReadIndex != -1)
                --this.unReadIndex;
              flag = true;
            }
          }
          else if (this.SendAskKind == 1)
          {
            talkDataType2 = this.TalkData_Alliance[0];
            this.TalkData_Alliance.RemoveAt(0);
            this.TopID = this.TalkData_Alliance[0].TalkID;
            --this.MiddleTopIndex;
            --this.MiddleBottomIndex;
            if (this.unReadIndex != -1)
              --this.unReadIndex;
            flag = true;
          }
          else if (this.SendAskKind == 2)
          {
            if (this.MiddleBottomIndex == 0)
            {
              talkDataType2 = this.SplitTalkData();
            }
            else
            {
              talkDataType2 = this.TalkData_Alliance[0];
              this.TalkData_Alliance.RemoveAt(0);
              this.TopID = this.TalkData_Alliance[0].TalkID;
              --this.MiddleTopIndex;
              --this.MiddleBottomIndex;
              if (this.unReadIndex != -1)
                --this.unReadIndex;
              flag = true;
            }
          }
          else
          {
            talkDataType2 = this.TalkData_Alliance[0];
            this.TalkData_Alliance.RemoveAt(0);
            this.TopID = this.TalkData_Alliance[0].TalkID;
            --this.MiddleTopIndex;
            --this.MiddleBottomIndex;
            if (this.unReadIndex != -1)
              --this.unReadIndex;
            flag = true;
          }
        }
        if (flag)
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14, 1);
        talkDataType2.Initial();
        return talkDataType2;
      default:
        return (TalkDataType) null;
    }
  }

  public void DeSpawnTalkData(byte AlliOrKing, TalkDataType tmpTalk)
  {
    if (AlliOrKing == (byte) 0)
    {
      this.TalkData_KPool.despawn(tmpTalk);
    }
    else
    {
      if (AlliOrKing != (byte) 1)
        return;
      this.TalkData_APool.despawn(tmpTalk);
    }
  }

  public void SendAskData(byte channel, byte prev, int kind = -1, long DataID = 0, long DataTime = 0)
  {
    if (NewbieManager.HasFlag)
      return;
    if (channel == (byte) 0)
    {
      if (this.bRecvKingdom != (byte) 0)
        return;
      this.bRecvKingdom = (byte) 1;
      this.bSendKingdom = (byte) 1;
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_VIEWCHAT;
      messagePacket.AddSeqId();
      messagePacket.Add(channel);
      messagePacket.Add(prev);
      if (this.ServerVersionMajor != (byte) 0)
      {
        if (kind == -1)
          messagePacket.Add(byte.MaxValue);
        else
          messagePacket.Add((byte) kind);
      }
      messagePacket.Send();
    }
    else
    {
      MessagePacket messagePacket = new MessagePacket((ushort) 1024);
      messagePacket.Protocol = Protocol._MSG_REQUEST_VIEWCHAT;
      messagePacket.AddSeqId();
      messagePacket.Add(channel);
      messagePacket.Add(prev);
      if (this.ServerVersionMajor != (byte) 0)
      {
        if (kind == -1)
          messagePacket.Add(byte.MaxValue);
        else
          messagePacket.Add((byte) kind);
      }
      messagePacket.Add(DataID);
      messagePacket.Add(DataTime);
      messagePacket.Send();
    }
  }

  public void AddSystemMessage(CString tmp, byte TalkKind = 4, long DataIndex = -1)
  {
    this.SystemMessageCString.Length = 0;
    this.SystemMessageCString.Append(tmp);
    if (TalkKind != (byte) 6 && TalkKind != (byte) 7)
    {
      TalkDataType talkDataType = this.SpawnTalkData((byte) 0);
      talkDataType.TalkKind = TalkKind;
      talkDataType.FuncKind = (byte) 200;
      talkDataType.MainText.Append(this.SystemMessageCString);
      talkDataType.TalkTime = this.ServerTime;
      if (TalkKind == (byte) 5)
        talkDataType.PlayerPicID = DataManager.MapDataController.kingdomData.kingdomID;
      this.TalkData_Kingdom.Add(talkDataType);
    }
    if (TalkKind != (byte) 8)
    {
      if (this.RoleAlliance.Id != 0U)
      {
        bool flag = (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Chat) != (UnityEngine.Object) null;
        if (flag && this.NowChannel == (byte) 0 || !flag)
        {
          if (this.bClearUnread)
          {
            this.bClearUnread = false;
            this.RemoveUnRead();
          }
          if (this.unReadCount == 0)
          {
            TalkDataType talkDataType = this.SpawnTalkData((byte) 1);
            talkDataType.TalkKind = (byte) 1;
            if (this.TalkData_Alliance.Count > 0)
            {
              talkDataType.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
              talkDataType.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
            }
            this.unReadIndex = this.TalkData_Alliance.Count;
            this.TalkData_Alliance.Add(talkDataType);
          }
          this.bShowUnreadCount = true;
          ++this.unReadCount;
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 7);
          GUIManager.Instance.UpdateChatBox(8, 1);
        }
        TalkDataType talkDataType1 = this.SpawnTalkData((byte) 1);
        talkDataType1.TalkKind = TalkKind;
        talkDataType1.FuncKind = (byte) 200;
        talkDataType1.MainText.Append(this.SystemMessageCString);
        if (this.TalkData_Alliance.Count > 0)
        {
          talkDataType1.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
          talkDataType1.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
        }
        else
        {
          this.MiddleBottomID = 0L;
          this.MiddleBottomIndex = 0;
        }
        talkDataType1.TalkTime = this.ServerTime;
        switch (TalkKind)
        {
          case 5:
            talkDataType1.PlayerPicID = DataManager.MapDataController.kingdomData.kingdomID;
            break;
          case 6:
            talkDataType1.NPCID = DataIndex;
            break;
        }
        this.TalkData_Alliance.Add(talkDataType1);
      }
      else if (GUIManager.Instance.ChannelIndex == (byte) 1)
        GUIManager.Instance.UpdateChatBox(6);
    }
    GUIManager.Instance.UpdateChatBox(0);
    if (TalkKind == (byte) 6 || TalkKind == (byte) 7)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, 1);
    else if (TalkKind == (byte) 8)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1);
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, 2);
  }

  private void CleartmpChatNickName()
  {
    for (int index = 0; index < 10; ++index)
    {
      this.tmpChatAllyRank[index] = (byte) 0;
      this.tmpChatNickName[index].Length = 0;
      this.tmpChatKingdom[index] = (ushort) 0;
      this.tmpChatWTitleID[index] = (ushort) 0;
      this.tmpChatNTitleID[index] = (ushort) 0;
      this.tmpbCheckDirtyWord[index] = (byte) 0;
    }
  }

  public unsafe void RecvChatNickName(MessagePacket MP)
  {
    this.CleartmpChatNickName();
    int num1 = (int) MP.ReadByte();
    ushort num2 = MP.ReadUShort();
    for (int index1 = 0; index1 < (int) num2; ++index1)
    {
      if (index1 >= 10)
        return;
      this.tmpChatAllyRank[index1] = MP.ReadByte();
      byte VSize = MP.ReadByte();
      MP.ReadStringPlus((int) VSize, this.tmpChatNickName[index1]);
      if (this.tmpChatNickName[index1].Length > 0)
      {
        string str = this.tmpChatNickName[index1].ToString();
        char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
        for (int index2 = 0; index2 < this.tmpChatNickName[index1].Length; ++index2)
        {
          if (!this.isNotEmojiCharacter(this.tmpChatNickName[index1][index2]))
            chPtr[index2] = ' ';
        }
        str = (string) null;
      }
    }
    for (int index = 0; index < (int) num2; ++index)
    {
      if (index >= 10)
        return;
      this.tmpChatKingdom[index] = MP.ReadUShort();
    }
    for (int index = 0; index < (int) num2; ++index)
    {
      if (index >= 10)
        return;
      this.tmpChatWTitleID[index] = MP.ReadUShort();
    }
    for (int index = 0; index < (int) num2; ++index)
    {
      if (index >= 10)
        return;
      this.tmpbCheckDirtyWord[index] = MP.ReadByte();
    }
    for (int index = 0; index < (int) num2 && index < 10; ++index)
      this.tmpChatNTitleID[index] = MP.ReadUShort();
  }

  public unsafe void RecvChatMessage(MessagePacket MP)
  {
    byte num1 = 0;
    byte num2 = MP.ReadByte();
    if (this.ServerVersionMajor != (byte) 0)
    {
      int num3 = (int) MP.ReadByte();
    }
    switch (num2)
    {
      case 0:
      case 1:
        ushort num4 = MP.ReadUShort();
        for (int index1 = 0; index1 < (int) num4; ++index1)
        {
          long num5 = MP.ReadLong();
          long num6 = MP.ReadLong();
          long num7 = MP.ReadLong();
          byte AlliOrKing = MP.ReadByte();
          bool flag1 = (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Chat) != (UnityEngine.Object) null;
          if (AlliOrKing == (byte) 1 && num2 == (byte) 0 && (flag1 && this.NowChannel == (byte) 0 || !flag1))
          {
            if (this.bClearUnread)
            {
              this.bClearUnread = false;
              this.RemoveUnRead();
            }
            if (this.unReadCount == 0)
            {
              TalkDataType talkDataType = this.SpawnTalkData(AlliOrKing);
              talkDataType.TalkKind = (byte) 1;
              if (this.TalkData_Alliance.Count > 0)
              {
                talkDataType.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
                talkDataType.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
              }
              this.unReadIndex = this.TalkData_Alliance.Count;
              this.TalkData_Alliance.Add(talkDataType);
            }
            this.bShowUnreadCount = true;
            ++this.unReadCount;
            GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 7);
            GUIManager.Instance.UpdateChatBox(8, 1);
          }
          TalkDataType talkDataType1 = this.SpawnTalkData(AlliOrKing);
          talkDataType1.TalkTime = num5;
          talkDataType1.PlayID = num6;
          talkDataType1.TalkID = num7;
          byte num8 = MP.ReadByte();
          talkDataType1.FuncKind = num8;
          talkDataType1.PlayerPicID = MP.ReadUShort();
          MP.ReadStringPlus(13, talkDataType1.PlayerName);
          talkDataType1.VIPRank = MP.ReadByte();
          MP.ReadStringPlus(3, talkDataType1.TitleName);
          talkDataType1.SpecialBlockID = MP.ReadByte();
          talkDataType1.TitleID = MP.ReadByte();
          if (this.ServerVersionMajor != (byte) 0)
            talkDataType1.bHaveArabic = MP.ReadByte();
          ushort VSize = MP.ReadUShort();
          if (num8 == (byte) 108)
          {
            talkDataType1.TalkKind = (byte) 3;
            if ((int) DataManager.MapDataController.kingdomData.kingdomID != (int) talkDataType1.PlayerPicID)
              GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: talkDataType1.PlayerPicID);
            else
              GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: (ushort) 0);
            ushort KingdomID = MP.ReadUShort();
            CString cstring1 = StringManager.Instance.StaticString1024();
            CString cstring2 = StringManager.Instance.StaticString1024();
            MP.ReadStringPlus(3, cstring1);
            MP.ReadStringPlus(13, cstring2);
            CString cstring3 = StringManager.Instance.StaticString1024();
            if ((int) DataManager.MapDataController.kingdomData.kingdomID != (int) KingdomID)
              GameConstants.FormatRoleName(cstring3, cstring2, cstring1, bCheckedNickname: (byte) 0, KingdomID: KingdomID);
            else
              GameConstants.FormatRoleName(cstring3, cstring2, cstring1, bCheckedNickname: (byte) 0, KingdomID: (ushort) 0);
            talkDataType1.MainText.StringToFormat(talkDataType1.ShowName);
            talkDataType1.MainText.StringToFormat(cstring3);
            talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(7798U));
          }
          else
          {
            if (index1 < 10)
            {
              talkDataType1.AllyRank = this.tmpChatAllyRank[index1];
              talkDataType1.NickNameText.Append(this.tmpChatNickName[index1]);
              talkDataType1.KingdomID = this.tmpChatKingdom[index1];
              talkDataType1.WTitleID = this.tmpChatWTitleID[index1];
              talkDataType1.bCheckDirtyWord = this.tmpbCheckDirtyWord[index1];
              talkDataType1.NTitleID = this.tmpChatNTitleID[index1];
            }
            if (num8 == (byte) 109)
            {
              talkDataType1.TalkKind = (byte) 0;
              talkDataType1.EmojiKey = MP.ReadUShort();
              int num9 = (int) MP.ReadUShort();
              if (talkDataType1.PlayerName.Length > 0)
              {
                if (AlliOrKing == (byte) 0 && talkDataType1.KingdomID != (ushort) 0 && (int) DataManager.MapDataController.kingdomData.kingdomID != (int) talkDataType1.KingdomID)
                  GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: talkDataType1.KingdomID);
                else
                  GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: (ushort) 0);
              }
              else
                talkDataType1.ShowName.Append("NoName");
              if (this.FindBlackList(talkDataType1.PlayerName))
              {
                switch (AlliOrKing)
                {
                  case 0:
                    this.TalkData_KPool.despawn(talkDataType1);
                    continue;
                  case 1:
                    this.TalkData_APool.despawn(talkDataType1);
                    continue;
                  default:
                    continue;
                }
              }
              else
                this.CheckText(talkDataType1);
            }
            else
            {
              MP.ReadStringPlus((int) VSize, talkDataType1.OriginalText);
              string str = talkDataType1.OriginalText.ToString();
              char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
              for (int index2 = 0; index2 < talkDataType1.OriginalText.Length; ++index2)
              {
                if (!this.isNotEmojiCharacter(talkDataType1.OriginalText[index2]))
                  chPtr[index2] = ' ';
              }
              str = (string) null;
              if (num8 > (byte) 100)
              {
                talkDataType1.TalkKind = (byte) 3;
                switch (num8)
                {
                  case 101:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(841U));
                    break;
                  case 102:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(842U));
                    break;
                  case 103:
                    talkDataType1.MainText.IntToFormat((long) talkDataType1.PlayerPicID);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(843U));
                    break;
                  case 104:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.StringToFormat(talkDataType1.OriginalText);
                    talkDataType1.MainText.IntToFormat((long) talkDataType1.PlayerPicID);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(844U));
                    break;
                  case 105:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(845U));
                    break;
                  case 106:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(846U));
                    break;
                  case 107:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(9534U));
                    break;
                  case 111:
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(16094U));
                    break;
                  case 112:
                    talkDataType1.TalkKind = (byte) 9;
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.StringToFormat(this.mStringTable.GetStringByID((uint) talkDataType1.PlayerPicID));
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID((uint) talkDataType1.WTitleID));
                    break;
                  case 113:
                    talkDataType1.TalkKind = (byte) 10;
                    CString tmpS = StringManager.Instance.StaticString1024();
                    ushort kingdomId = talkDataType1.KingdomID;
                    ushort ntitleId = talkDataType1.NTitleID;
                    Equip recordByKey = this.EquipTable.GetRecordByKey(kingdomId);
                    tmpS.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.EquipName));
                    if (ntitleId > (ushort) 1)
                    {
                      tmpS.IntToFormat((long) ntitleId);
                      tmpS.AppendFormat("{0}x{1}");
                    }
                    else
                      tmpS.AppendFormat("{0}");
                    talkDataType1.MainText.StringToFormat(talkDataType1.OriginalText);
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.StringToFormat(this.mStringTable.GetStringByID((uint) talkDataType1.PlayerPicID));
                    talkDataType1.MainText.StringToFormat(tmpS);
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID((uint) talkDataType1.WTitleID));
                    break;
                  case 114:
                    talkDataType1.TalkKind = (byte) 11;
                    talkDataType1.MainText.StringToFormat(talkDataType1.PlayerName);
                    talkDataType1.MainText.StringToFormat(this.mStringTable.GetStringByID((uint) talkDataType1.PlayerPicID));
                    talkDataType1.MainText.AppendFormat(this.mStringTable.GetStringByID(16100U));
                    break;
                }
              }
              else
              {
                if (talkDataType1.PlayerName.Length > 0)
                {
                  if (AlliOrKing == (byte) 0 && talkDataType1.KingdomID != (ushort) 0 && (int) DataManager.MapDataController.kingdomData.kingdomID != (int) talkDataType1.KingdomID)
                    GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: talkDataType1.KingdomID);
                  else
                    GameConstants.FormatRoleName(talkDataType1.ShowName, talkDataType1.PlayerName, talkDataType1.TitleName, bCheckedNickname: (byte) 0, KingdomID: (ushort) 0);
                }
                else
                  talkDataType1.ShowName.Append("NoName");
                if (this.FindBlackList(talkDataType1.PlayerName))
                {
                  switch (AlliOrKing)
                  {
                    case 0:
                      this.TalkData_KPool.despawn(talkDataType1);
                      continue;
                    case 1:
                      this.TalkData_APool.despawn(talkDataType1);
                      continue;
                    default:
                      continue;
                  }
                }
                else
                {
                  if (talkDataType1.bCheckDirtyWord != (byte) 0)
                    talkDataType1.MainText.CheckBannedWord();
                  this.CheckText(talkDataType1);
                }
              }
            }
          }
          bool flag2 = false;
          switch (AlliOrKing)
          {
            case 0:
              this.KindomRecvType = num2;
              if (num2 == (byte) 0 || this.TalkData_Kingdom.Count == 0)
              {
                this.TalkData_Kingdom.Add(talkDataType1);
                GUIManager.Instance.SetbNeedTranslate(talkDataType1);
                flag2 = true;
              }
              else if (num2 == (byte) 1)
              {
                KingdomTalkDataComparer talkDataComparer = new KingdomTalkDataComparer();
                int num10 = this.TalkData_Kingdom.BinarySearch(talkDataType1, (IComparer<TalkDataType>) talkDataComparer);
                if (num10 < 0)
                {
                  this.TalkData_Kingdom.Insert(~num10, talkDataType1);
                  GUIManager.Instance.SetbNeedTranslate(talkDataType1);
                  flag2 = true;
                }
              }
              if (flag2)
              {
                GUIManager.Instance.UpdateChatBox(0);
                break;
              }
              this.TalkData_KPool.despawn(talkDataType1);
              break;
            case 1:
              switch (num2)
              {
                case 0:
                  this.TalkData_Alliance.Add(talkDataType1);
                  GUIManager.Instance.SetbNeedTranslate(talkDataType1);
                  flag2 = true;
                  if (this.MiddleBottomIndex == -1)
                  {
                    this.MiddleBottomIndex = this.TalkData_Alliance.Count - 1;
                    this.MiddleBottomID = talkDataType1.TalkID;
                  }
                  else if (this.MiddleBottomID == 0L)
                    this.MiddleBottomID = talkDataType1.TalkID;
                  GUIManager.Instance.UpdateChatBox(0);
                  break;
                case 1:
                  bool flag3 = false;
                  if (this.SendAskKind != -1)
                  {
                    TalkDataComparer talkDataComparer = new TalkDataComparer();
                    int num11 = this.tmpAllianc.BinarySearch(talkDataType1, (IComparer<TalkDataType>) talkDataComparer);
                    if (num11 < 0)
                    {
                      this.tmpAllianc.Insert(~num11, talkDataType1);
                      flag3 = true;
                    }
                    if (this.tmpAllianc.Count == 10)
                    {
                      this.OldMessageComplete();
                      this.SendAskKind = -1;
                    }
                  }
                  if (!flag3)
                  {
                    this.TalkData_APool.despawn(talkDataType1);
                    break;
                  }
                  break;
                default:
                  this.TalkData_APool.despawn(talkDataType1);
                  break;
              }
              break;
          }
          if (flag2)
            GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, (int) AlliOrKing);
          this.KindomRecvType = (byte) 0;
        }
        this.CleartmpChatNickName();
        break;
      case 2:
        this.OldMessageComplete();
        this.SendAskKind = -1;
        break;
      case 3:
        this.SendAskKind = -1;
        if (this.AskOldData == (byte) 1)
        {
          this.AskOldData = (byte) 3;
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 8, (int) num1);
          break;
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 2, (int) num1);
        break;
      case 4:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904U), (ushort) byte.MaxValue);
        break;
    }
  }

  private void OldMessageComplete()
  {
    if (this.tmpAllianc.Count <= 0)
      return;
    this.ThisTimeCounts = 0;
    bool flag1 = false;
    GUIManager instance = GUIManager.Instance;
    if (this.SendAskKind == 0)
    {
      for (int index = this.tmpAllianc.Count - 1; index >= 0; --index)
      {
        if (this.tmpAllianc[index].TalkID < this.TopID)
        {
          this.TalkData_Alliance.Insert(0, this.tmpAllianc[index]);
          instance.SetbNeedTranslate(this.tmpAllianc[index]);
          this.TopID = this.tmpAllianc[index].TalkID;
          ++this.LastTimeIndex;
          ++this.MiddleTopIndex;
          if (this.MiddleBottomIndex != -1)
            ++this.MiddleBottomIndex;
          if (this.unReadIndex != -1)
            ++this.unReadIndex;
          if (!this.CheckHideTalk(this.tmpAllianc[index]))
            ++this.ThisTimeCounts;
        }
        else
          this.TalkData_APool.despawn(this.tmpAllianc[index]);
      }
      flag1 = true;
    }
    else if (this.SendAskKind == 1)
    {
      bool flag2 = false;
      for (int index = 0; index < this.tmpAllianc.Count; ++index)
      {
        if (this.MiddleBottomIndex != -1 && this.tmpAllianc[index].TalkID >= this.MiddleBottomID)
        {
          if (!flag2)
          {
            this.MiddleTopID = this.MiddleBottomID;
            this.MiddleTopIndex = this.MiddleBottomIndex;
            flag2 = true;
          }
          this.TalkData_APool.despawn(this.tmpAllianc[index]);
        }
        else
        {
          this.TalkData_Alliance.Insert(this.MiddleTopIndex + 1, this.tmpAllianc[index]);
          instance.SetbNeedTranslate(this.tmpAllianc[index]);
          this.MiddleTopID = this.tmpAllianc[index].TalkID;
          ++this.MiddleTopIndex;
          if (this.MiddleBottomIndex != -1)
            ++this.MiddleBottomIndex;
          if (this.unReadIndex != -1)
            ++this.unReadIndex;
          if (!this.CheckHideTalk(this.tmpAllianc[index]))
            ++this.ThisTimeCounts;
        }
      }
      flag1 = true;
    }
    else if (this.SendAskKind == 2)
    {
      bool flag3 = false;
      for (int index = this.tmpAllianc.Count - 1; index >= 0; --index)
      {
        if (this.tmpAllianc[index].TalkID <= this.MiddleTopID)
        {
          if (!flag3)
          {
            this.MiddleBottomID = this.MiddleTopID;
            this.MiddleBottomIndex = this.MiddleTopIndex;
            flag3 = true;
          }
          this.TalkData_APool.despawn(this.tmpAllianc[index]);
        }
        else
        {
          this.TalkData_Alliance.Insert(this.MiddleBottomIndex, this.tmpAllianc[index]);
          instance.SetbNeedTranslate(this.tmpAllianc[index]);
          this.MiddleBottomID = this.tmpAllianc[index].TalkID;
          if (this.unReadIndex != -1)
            ++this.unReadIndex;
          if (!this.CheckHideTalk(this.tmpAllianc[index]))
            ++this.ThisTimeCounts;
        }
      }
      flag1 = true;
    }
    else if (this.SendAskKind == 3)
    {
      this.RemoveUnRead();
      for (int index = this.TalkData_Alliance.Count - 1; index >= 0; --index)
      {
        this.TalkData_APool.despawn(this.TalkData_Alliance[index]);
        this.TalkData_Alliance.RemoveAt(index);
      }
      this.TopIndex = 0;
      this.LastTimeIndex = this.MiddleTopIndex = -1;
      this.TopID = this.MiddleTopID = 0L;
      for (int index = 0; index < this.tmpAllianc.Count; ++index)
      {
        this.TalkData_Alliance.Add(this.tmpAllianc[index]);
        instance.SetbNeedTranslate(this.tmpAllianc[index]);
      }
      this.MiddleBottomID = this.tmpAllianc[0].TalkID;
      this.MiddleBottomIndex = 0;
      flag1 = true;
    }
    else if (this.SendAskKind == 4)
    {
      this.AskOldData = (byte) 2;
      bool flag4 = false;
      for (int index = this.tmpAllianc.Count - 1; index >= 0; --index)
      {
        if (this.MiddleBottomIndex != -1 && this.tmpAllianc[index].TalkID >= this.MiddleBottomID)
        {
          if (!flag4)
          {
            this.MiddleTopID = this.MiddleBottomID;
            this.MiddleTopIndex = this.MiddleBottomIndex;
            flag4 = true;
          }
          this.TalkData_APool.despawn(this.tmpAllianc[index]);
        }
        else
        {
          if (!this.CheckHideTalk(this.tmpAllianc[index]))
            ++this.ThisTimeCounts;
          this.TalkData_Alliance.Insert(0, this.tmpAllianc[index]);
          instance.SetbNeedTranslate(this.tmpAllianc[index]);
          if (this.MiddleTopIndex != -1)
            ++this.MiddleTopIndex;
          if (this.MiddleBottomIndex != -1)
            ++this.MiddleBottomIndex;
          if (this.unReadIndex != -1)
            ++this.unReadIndex;
        }
      }
      if (this.ThisTimeCounts > 0)
      {
        TalkDataType talkDataType = this.SpawnTalkData((byte) 1);
        talkDataType.TalkKind = (byte) 2;
        talkDataType.TalkID = this.TalkData_Alliance[0].TalkID;
        talkDataType.TalkTime = this.TalkData_Alliance[0].TalkTime;
        this.TalkData_Alliance.Insert(0, talkDataType);
        this.LastTimeIndex = 0;
        this.TopID = this.TalkData_Alliance[0].TalkID;
        ++this.ThisTimeCounts;
        if (this.MiddleTopIndex != -1)
          ++this.MiddleTopIndex;
        if (this.MiddleBottomIndex != -1)
          ++this.MiddleBottomIndex;
        if (this.unReadIndex != -1)
          ++this.unReadIndex;
        if (!flag4)
        {
          this.MiddleTopID = this.TalkData_Alliance[this.tmpAllianc.Count].TalkID;
          this.MiddleTopIndex = this.tmpAllianc.Count;
        }
        flag1 = true;
      }
      else
      {
        this.MiddleTopID = 0L;
        this.MiddleTopIndex = -1;
        this.AskOldData = (byte) 3;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 8);
      }
    }
    else if (this.SendAskKind == 5)
    {
      if (this.tmpAllianc.Count == 0)
        return;
      int num = -1;
      for (int index = 0; index < this.tmpAllianc.Count; ++index)
      {
        if (this.TalkData_Alliance.Count > 0 && this.tmpAllianc[index].TalkID == this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID)
        {
          num = index;
          break;
        }
      }
      if (num != -1)
      {
        for (int index = 0; index < this.tmpAllianc.Count; ++index)
        {
          if (index <= num)
          {
            this.TalkData_APool.despawn(this.tmpAllianc[index]);
          }
          else
          {
            this.TalkData_Alliance.Add(this.tmpAllianc[index]);
            instance.SetbNeedTranslate(this.tmpAllianc[index]);
          }
        }
      }
      else
      {
        this.RemoveUnRead();
        if (this.MiddleBottomIndex != -1 && this.MiddleBottomIndex == this.MiddleTopIndex)
        {
          this.MiddleTopIndex = this.TalkData_Alliance.Count - 1;
          this.MiddleTopID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
          for (int index = 0; index < this.tmpAllianc.Count; ++index)
          {
            this.TalkData_Alliance.Add(this.tmpAllianc[index]);
            instance.SetbNeedTranslate(this.tmpAllianc[index]);
          }
          this.MiddleBottomIndex = this.MiddleTopIndex + 1;
          this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
        }
        else if (this.TopIndex != -1)
        {
          for (int index = this.TalkData_Alliance.Count - 1; index >= this.MiddleBottomIndex && index >= 0; --index)
          {
            this.TalkData_APool.despawn(this.TalkData_Alliance[index]);
            this.TalkData_Alliance.RemoveAt(index);
          }
          for (int index = 0; index < this.tmpAllianc.Count; ++index)
          {
            this.TalkData_Alliance.Add(this.tmpAllianc[index]);
            instance.SetbNeedTranslate(this.tmpAllianc[index]);
          }
          this.MiddleBottomIndex = this.MiddleTopIndex + 1;
          this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
        }
        else
        {
          for (int index = this.TalkData_Alliance.Count - 1; index >= 0; --index)
          {
            this.TalkData_APool.despawn(this.TalkData_Alliance[index]);
            this.TalkData_Alliance.RemoveAt(index);
          }
          this.TopIndex = 0;
          this.LastTimeIndex = this.MiddleTopIndex = -1;
          this.TopID = this.MiddleTopID = 0L;
          for (int index = 0; index < this.tmpAllianc.Count; ++index)
          {
            this.TalkData_Alliance.Add(this.tmpAllianc[index]);
            instance.SetbNeedTranslate(this.tmpAllianc[index]);
          }
          this.MiddleBottomID = this.tmpAllianc[0].TalkID;
          this.MiddleBottomIndex = 0;
        }
      }
      flag1 = true;
    }
    if (flag1)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 3, this.SendAskKind);
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14, 1);
    if (this.SendAskKind >= 3 && this.SendAskKind <= 5)
      GUIManager.Instance.UpdateChatBox(0);
    this.tmpAllianc.Clear();
  }

  public void RemoveUnRead()
  {
    if (this.unReadIndex != -1 && this.unReadIndex < this.TalkData_Alliance.Count)
    {
      this.TalkData_APool.despawn(this.TalkData_Alliance[this.unReadIndex]);
      this.TalkData_Alliance.RemoveAt(this.unReadIndex);
    }
    this.unReadCount = 0;
    this.unReadIndex = -1;
    GUIManager.Instance.UpdateChatBox(8);
  }

  public void InitialChat()
  {
    this.bRecvKingdom = (byte) 0;
    this.bSendKingdom = (byte) 0;
    this.unReadIndex = -1;
    this.unReadCount = 0;
    this.NowChannel = (byte) 0;
    this.SendAskKind = -1;
    this.NowKingdomIndex = -1;
    this.NowKingdomPos = -1f;
    this.NowAlliancePage = -1;
    this.NowAllianceIndex1 = -1;
    this.NowAllianceIndex2 = -1;
    this.NowAlliancePos1 = -1f;
    this.NowAlliancePos2 = -1f;
    this.bShowUnreadCount = true;
    this.bClearUnread = false;
    this.AskAllianceTime = 0L;
    this.LastTime = 0L;
    this.AskOldData = (byte) 0;
    this.TopID = 0L;
    this.MiddleTopID = 0L;
    this.MiddleBottomID = 0L;
    this.TopIndex = 0;
    this.MiddleTopIndex = -1;
    this.MiddleBottomIndex = -1;
    this.LastTimeIndex = -1;
    for (int index = this.TalkData_Kingdom.Count - 1; index >= 0; --index)
      this.TalkData_KPool.despawn(this.TalkData_Kingdom[index]);
    this.TalkData_Kingdom.Clear();
    for (int index = this.TalkData_Alliance.Count - 1; index >= 0; --index)
      this.TalkData_APool.despawn(this.TalkData_Alliance[index]);
    this.TalkData_Alliance.Clear();
    this.Height_Alliance.Clear();
    GUIManager.Instance.UpdateChatBox(8);
  }

  public void ClearTalkAlliance()
  {
    this.unReadIndex = -1;
    this.unReadCount = 0;
    this.SendAskKind = -1;
    this.AskAllianceTime = 0L;
    this.LastTime = 0L;
    this.AskOldData = (byte) 0;
    this.TopID = 0L;
    this.MiddleTopID = 0L;
    this.MiddleBottomID = 0L;
    this.TopIndex = 0;
    this.MiddleTopIndex = -1;
    this.MiddleBottomIndex = -1;
    this.LastTimeIndex = -1;
    this.NowAlliancePage = -1;
    this.NowAllianceIndex1 = -1;
    this.NowAllianceIndex2 = -1;
    this.NowAlliancePos1 = -1f;
    this.NowAlliancePos2 = -1f;
    this.bShowUnreadCount = true;
    this.bClearUnread = false;
    for (int index = this.TalkData_Alliance.Count - 1; index >= 0; --index)
      this.TalkData_APool.despawn(this.TalkData_Alliance[index]);
    this.TalkData_Alliance.Clear();
    this.Height_Alliance.Clear();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 6);
    if (this.ChatStrA[0] != null)
      this.ChatStrA[0].Length = 0;
    if (this.ChatStrA[1] != null)
      this.ChatStrA[1].Length = 0;
    GUIManager.Instance.UpdateChatBox(0);
    GUIManager.Instance.UpdateChatBox(8);
    GUIManager.Instance.UpdateChatBox(9);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9);
  }

  public void ClearAllHeight()
  {
    for (int index = 0; index < this.TalkData_Alliance.Count; ++index)
    {
      this.TalkData_Alliance[index].TotalHeight = 0.0f;
      this.TalkData_Alliance[index].TotalHeightT = 0.0f;
    }
    for (int index = 0; index < this.TalkData_Kingdom.Count; ++index)
    {
      this.TalkData_Kingdom[index].TotalHeight = 0.0f;
      this.TalkData_Kingdom[index].TotalHeightT = 0.0f;
    }
  }

  public bool CheckHideTalk(TalkDataType tmpTalk)
  {
    return tmpTalk.TalkTime < this.RoleAlliance.JoinTime && (tmpTalk.FuncKind == (byte) 101 || tmpTalk.FuncKind == (byte) 102 || tmpTalk.FuncKind == (byte) 105 || tmpTalk.FuncKind == (byte) 111);
  }

  private void CheckText(TalkDataType tmpTalk)
  {
    tmpTalk.MainText.Append(tmpTalk.OriginalText);
    CString mainText = tmpTalk.MainText;
    int StartIndex = -1;
    int num1 = -1;
    bool flag = true;
    byte num2 = 0;
    int num3 = 0;
    int num4 = 0;
    int num5 = 0;
    int length = mainText.Length;
    int index1 = mainText.Length - 1;
    while (index1 >= 0 && (StartIndex == -1 || num1 == -1))
    {
      char ch1 = mainText[index1];
      --index1;
      if (index1 >= 0)
      {
        if (mainText[index1] == ':' && ch1 == 'Y')
        {
          flag = true;
          num1 = index1 + 2;
          --index1;
          if (index1 >= 0)
          {
            char ch2 = mainText[index1];
            if (ch2 >= '0' && ch2 <= '9')
            {
              num3 = 0;
              byte y1 = 0;
              do
              {
                num3 += ((int) ch2 - 48) * (int) Math.Pow(10.0, (double) y1);
                ++y1;
                --index1;
                if (index1 >= 0)
                {
                  ch2 = mainText[index1];
                  switch (ch2)
                  {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      continue;
                    default:
                      goto label_9;
                  }
                }
                else
                  break;
              }
              while (num3 < (int) ushort.MaxValue);
label_9:
              --index1;
              if (index1 >= 0)
              {
                if (ch2 == ' ')
                {
                  char ch3 = mainText[index1];
                  --index1;
                  if (index1 >= 0)
                  {
                    if (ch3 == 'X' && mainText[index1] == ':')
                    {
                      --index1;
                      if (index1 >= 0)
                      {
                        char ch4 = mainText[index1];
                        if (ch4 >= '0' && ch4 <= '9')
                        {
                          num4 = 0;
                          byte y2 = 0;
                          do
                          {
                            num4 += ((int) ch4 - 48) * (int) Math.Pow(10.0, (double) y2);
                            ++y2;
                            --index1;
                            if (index1 >= 0)
                            {
                              ch4 = mainText[index1];
                              switch (ch4)
                              {
                                case '0':
                                case '1':
                                case '2':
                                case '3':
                                case '4':
                                case '5':
                                case '6':
                                case '7':
                                case '8':
                                case '9':
                                  continue;
                                default:
                                  goto label_19;
                              }
                            }
                            else
                              break;
                          }
                          while (num4 < (int) ushort.MaxValue);
label_19:
                          --index1;
                          if (index1 >= 0)
                          {
                            if (ch4 == ' ')
                            {
                              char ch5 = mainText[index1];
                              --index1;
                              if (index1 >= 0)
                              {
                                if (ch5 == 'K' && mainText[index1] == ':')
                                {
                                  --index1;
                                  if (index1 >= 0)
                                  {
                                    char ch6 = mainText[index1];
                                    if (ch6 >= '0' && ch6 <= '9')
                                    {
                                      num5 = 0;
                                      byte y3 = 0;
                                      do
                                      {
                                        num5 += ((int) ch6 - 48) * (int) Math.Pow(10.0, (double) y3);
                                        ++y3;
                                        --index1;
                                        if (index1 >= 0)
                                        {
                                          ch6 = mainText[index1];
                                          switch (ch6)
                                          {
                                            case '0':
                                            case '1':
                                            case '2':
                                            case '3':
                                            case '4':
                                            case '5':
                                            case '6':
                                            case '7':
                                            case '8':
                                            case '9':
                                              continue;
                                            default:
                                              goto label_29;
                                          }
                                        }
                                        else
                                          break;
                                      }
                                      while (num5 < (int) ushort.MaxValue);
label_29:
                                      StartIndex = index1 + 1;
                                    }
                                  }
                                  else
                                    break;
                                }
                              }
                              else
                                break;
                            }
                          }
                          else
                            break;
                        }
                      }
                      else
                        break;
                    }
                  }
                  else
                    break;
                }
              }
              else
                break;
            }
          }
          else
            break;
        }
      }
      else
        break;
    }
    if (StartIndex == -1 || num1 == -1)
    {
      StartIndex = -1;
      num1 = -1;
    }
    int index2 = mainText.Length - 1;
    while (index2 >= 0 && (StartIndex == -1 || num1 == -1))
    {
      char ch7 = mainText[index2];
      --index2;
      if (index2 >= 0)
      {
        if (mainText[index2] == ':' && ch7 == 'K')
        {
          flag = true;
          num1 = index2 + 2;
          --index2;
          if (index2 >= 0)
          {
            char ch8 = mainText[index2];
            if (ch8 >= '0' && ch8 <= '9')
            {
              num5 = 0;
              byte y4 = 0;
              do
              {
                num5 += ((int) ch8 - 48) * (int) Math.Pow(10.0, (double) y4);
                ++y4;
                --index2;
                if (index2 >= 0)
                {
                  ch8 = mainText[index2];
                  switch (ch8)
                  {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      continue;
                    default:
                      goto label_42;
                  }
                }
                else
                  break;
              }
              while (num5 < (int) ushort.MaxValue);
label_42:
              --index2;
              if (index2 >= 0)
              {
                if (ch8 == ' ')
                {
                  char ch9 = mainText[index2];
                  --index2;
                  if (index2 >= 0)
                  {
                    if (ch9 == 'X' && mainText[index2] == ':')
                    {
                      --index2;
                      if (index2 >= 0)
                      {
                        char ch10 = mainText[index2];
                        if (ch10 >= '0' && ch10 <= '9')
                        {
                          num4 = 0;
                          byte y5 = 0;
                          do
                          {
                            num4 += ((int) ch10 - 48) * (int) Math.Pow(10.0, (double) y5);
                            ++y5;
                            --index2;
                            if (index2 >= 0)
                            {
                              ch10 = mainText[index2];
                              switch (ch10)
                              {
                                case '0':
                                case '1':
                                case '2':
                                case '3':
                                case '4':
                                case '5':
                                case '6':
                                case '7':
                                case '8':
                                case '9':
                                  continue;
                                default:
                                  goto label_52;
                              }
                            }
                            else
                              break;
                          }
                          while (num4 < (int) ushort.MaxValue);
label_52:
                          --index2;
                          if (index2 >= 0)
                          {
                            if (ch10 == ' ')
                            {
                              char ch11 = mainText[index2];
                              --index2;
                              if (index2 >= 0)
                              {
                                if (ch11 == 'Y' && mainText[index2] == ':')
                                {
                                  --index2;
                                  if (index2 >= 0)
                                  {
                                    char ch12 = mainText[index2];
                                    if (ch12 >= '0' && ch12 <= '9')
                                    {
                                      num3 = 0;
                                      byte y6 = 0;
                                      do
                                      {
                                        num3 += ((int) ch12 - 48) * (int) Math.Pow(10.0, (double) y6);
                                        ++y6;
                                        --index2;
                                        if (index2 >= 0)
                                        {
                                          ch12 = mainText[index2];
                                          switch (ch12)
                                          {
                                            case '0':
                                            case '1':
                                            case '2':
                                            case '3':
                                            case '4':
                                            case '5':
                                            case '6':
                                            case '7':
                                            case '8':
                                            case '9':
                                              continue;
                                            default:
                                              goto label_62;
                                          }
                                        }
                                        else
                                          break;
                                      }
                                      while (num3 < (int) ushort.MaxValue);
label_62:
                                      StartIndex = index2 + 1;
                                    }
                                  }
                                  else
                                    break;
                                }
                              }
                              else
                                break;
                            }
                          }
                          else
                            break;
                        }
                      }
                      else
                        break;
                    }
                  }
                  else
                    break;
                }
              }
              else
                break;
            }
          }
          else
            break;
        }
      }
      else
        break;
    }
    if (StartIndex == -1 || num1 == -1)
    {
      StartIndex = -1;
      num1 = -1;
    }
    int index3 = 0;
    while (index3 < length && (StartIndex == -1 || num1 == -1))
    {
      char ch13 = mainText[index3];
      ++index3;
      if (index3 != length)
      {
        if (mainText[index3] == ':')
        {
          int num6 = index3;
          switch (ch13)
          {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
              flag = false;
              int index4 = index3 - 1;
              char ch14;
              do
              {
                --index4;
                if (index4 >= 0)
                  ch14 = mainText[index4];
                else
                  break;
              }
              while (ch14 >= '0' && ch14 <= '9');
              int index5 = index4 + 1;
              char ch15 = mainText[index5];
              StartIndex = index5;
              num5 = 0;
              num2 = (byte) 1;
              do
              {
                num5 = num5 * 10 + (int) ch15 - 48;
                ++index5;
                if (index5 != length)
                  ch15 = mainText[index5];
                else
                  break;
              }
              while (ch15 >= '0' && ch15 <= '9' && num5 < (int) ushort.MaxValue);
              if (ch15 == ':')
              {
                index3 = index5 + 1;
                if (index3 < length)
                {
                  char ch16 = mainText[index3];
                  switch (ch16)
                  {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      num4 = 0;
                      ++num2;
                      do
                      {
                        num4 = num4 * 10 + (int) ch16 - 48;
                        ++index3;
                        if (index3 != length)
                          ch16 = mainText[index3];
                        else
                          break;
                      }
                      while (ch16 >= '0' && ch16 <= '9' && num4 < (int) ushort.MaxValue);
                      if (ch16 == ':')
                      {
                        ++index3;
                        if (index3 < length)
                        {
                          char ch17 = mainText[index3];
                          switch (ch17)
                          {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                            case '8':
                            case '9':
                              num3 = 0;
                              ++num2;
                              do
                              {
                                num3 = num3 * 10 + (int) ch17 - 48;
                                ++index3;
                                if (index3 != length)
                                {
                                  ch17 = mainText[index3];
                                  switch (ch17)
                                  {
                                    case '0':
                                    case '1':
                                    case '2':
                                    case '3':
                                    case '4':
                                    case '5':
                                    case '6':
                                    case '7':
                                    case '8':
                                    case '9':
                                      continue;
                                    default:
                                      goto label_116;
                                  }
                                }
                                else
                                  break;
                              }
                              while (num3 < (int) ushort.MaxValue);
                              break;
                          }
                        }
                        else
                          goto label_121;
                      }
label_116:
                      if (num2 > (byte) 1)
                      {
                        num1 = index3;
                        continue;
                      }
                      continue;
                    default:
                      continue;
                  }
                }
                else
                  goto label_121;
              }
              else
              {
                StartIndex = -1;
                index3 = num6;
                continue;
              }
            case 'K':
              flag = true;
              StartIndex = index3 - 1;
              ++index3;
              if (index3 < length)
              {
                char ch18 = mainText[index3];
                if (ch18 >= '0' && ch18 <= '9')
                {
                  num5 = 0;
                  do
                  {
                    num5 = num5 * 10 + (int) ch18 - 48;
                    ++index3;
                    if (index3 != length)
                    {
                      ch18 = mainText[index3];
                      switch (ch18)
                      {
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                          continue;
                        default:
                          goto label_76;
                      }
                    }
                    else
                      break;
                  }
                  while (num5 < (int) ushort.MaxValue);
label_76:
                  ++index3;
                  if (index3 < length)
                  {
                    if (ch18 == ' ')
                    {
                      char ch19 = mainText[index3];
                      ++index3;
                      if (index3 < length)
                      {
                        if (ch19 == 'X' && mainText[index3] == ':')
                        {
                          ++index3;
                          if (index3 < length)
                          {
                            char ch20 = mainText[index3];
                            if (ch20 >= '0' && ch20 <= '9')
                            {
                              num4 = 0;
                              do
                              {
                                num4 = num4 * 10 + (int) ch20 - 48;
                                ++index3;
                                if (index3 != length)
                                {
                                  ch20 = mainText[index3];
                                  switch (ch20)
                                  {
                                    case '0':
                                    case '1':
                                    case '2':
                                    case '3':
                                    case '4':
                                    case '5':
                                    case '6':
                                    case '7':
                                    case '8':
                                    case '9':
                                      continue;
                                    default:
                                      goto label_86;
                                  }
                                }
                                else
                                  break;
                              }
                              while (num4 < (int) ushort.MaxValue);
label_86:
                              ++index3;
                              if (index3 < length)
                              {
                                if (ch20 == ' ')
                                {
                                  char ch21 = mainText[index3];
                                  ++index3;
                                  if (index3 < length)
                                  {
                                    if (ch21 == 'Y' && mainText[index3] == ':')
                                    {
                                      ++index3;
                                      if (index3 < length)
                                      {
                                        char ch22 = mainText[index3];
                                        if (ch22 >= '0' && ch22 <= '9')
                                        {
                                          num3 = 0;
                                          do
                                          {
                                            num3 = num3 * 10 + (int) ch22 - 48;
                                            ++index3;
                                            if (index3 != length)
                                            {
                                              ch22 = mainText[index3];
                                              switch (ch22)
                                              {
                                                case '0':
                                                case '1':
                                                case '2':
                                                case '3':
                                                case '4':
                                                case '5':
                                                case '6':
                                                case '7':
                                                case '8':
                                                case '9':
                                                  continue;
                                                default:
                                                  goto label_96;
                                              }
                                            }
                                            else
                                              break;
                                          }
                                          while (num3 < (int) ushort.MaxValue);
label_96:
                                          num1 = index3;
                                          continue;
                                        }
                                        continue;
                                      }
                                      goto label_121;
                                    }
                                    else
                                      continue;
                                  }
                                  else
                                    goto label_121;
                                }
                                else
                                  continue;
                              }
                              else
                                goto label_121;
                            }
                            else
                              continue;
                          }
                          else
                            goto label_121;
                        }
                        else
                          continue;
                      }
                      else
                        goto label_121;
                    }
                    else
                      continue;
                  }
                  else
                    goto label_121;
                }
                else
                  continue;
              }
              else
                goto label_121;
            default:
              continue;
          }
        }
      }
      else
        break;
    }
label_121:
    if (StartIndex == -1 || num1 == -1)
      return;
    if (flag)
    {
      tmpTalk.King = num5;
      tmpTalk.LocX = num4;
      tmpTalk.LocY = num3;
    }
    else
    {
      switch (num2)
      {
        case 2:
          tmpTalk.LocX = num5;
          tmpTalk.LocY = num4;
          break;
        case 3:
          tmpTalk.King = num5;
          tmpTalk.LocX = num4;
          tmpTalk.LocY = num3;
          break;
      }
    }
    if ((tmpTalk.King == -1 || tmpTalk.King != -1 && DataManager.MapDataController.CheckKingdomID((ushort) tmpTalk.King)) && tmpTalk.LocX < 512 && tmpTalk.LocY < 1024)
    {
      tmpTalk.bHasLoc = true;
      tmpTalk.BeginIndex = StartIndex;
      tmpTalk.EndIndex = num1;
      mainText.Insert(StartIndex, this.ColorL);
      mainText.Insert(num1 + this.ColorL.Length, this.ColorR);
    }
    else
    {
      tmpTalk.King = -1;
      tmpTalk.LocX = -1;
      tmpTalk.LocY = -1;
    }
  }

  private int FindCharInString(char cChar, CString tmpStr, int StartIndex = 0)
  {
    for (int index = StartIndex; index < tmpStr.Length; ++index)
    {
      if ((int) tmpStr[index] == (int) cChar)
        return index;
    }
    return -1;
  }

  public MessageBoard SpawnMessageBoardData()
  {
    MessageBoard messageBoard = this.MessageBoard_Pool.spawn();
    if (messageBoard == null)
    {
      messageBoard = this.MessageBoardList[0];
      this.MessageBoardList.RemoveAt(0);
    }
    messageBoard.Initial();
    return messageBoard;
  }

  public void DeSpawnMessageBoardData(MessageBoard tmpBM) => this.MessageBoard_Pool.despawn(tmpBM);

  public void ClearMessageBoard()
  {
    for (int index = this.MessageBoardList.Count - 1; index >= 0; --index)
    {
      this.MessageBoard_Pool.despawn(this.MessageBoardList[index]);
      this.MessageBoardList.RemoveAt(index);
    }
  }

  public void AskMessageBoard(uint AllianceID)
  {
    if ((int) this.SendAllianceID != (int) AllianceID)
    {
      this.SendAllianceID = AllianceID;
      this.SendMessageID = 0L;
      this.ClearMessageBoard();
    }
    this.FindBlack = (byte) 0;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_VIEWALLY;
    messagePacket.AddSeqId();
    messagePacket.Add(this.SendAllianceID);
    messagePacket.Add(this.SendMessageID);
    messagePacket.Send();
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if ((bool) (UnityEngine.Object) menu)
      menu.OpenMenu(EGUIWindow.UI_MessageBoard, 1);
    GUIManager.Instance.ShowUILock(EUILock.MessageBoard);
  }

  public unsafe void Recv_MessageBoard(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    if (num1 == (byte) 0 || num1 == (byte) 1 || num1 == (byte) 2)
    {
      if (num1 != (byte) 2)
      {
        ushort num2 = MP.ReadUShort();
        for (int index1 = 0; index1 < (int) num2; ++index1)
        {
          MessageBoard messageBoard = this.SpawnMessageBoardData();
          messageBoard.MessageID = MP.ReadLong();
          if ((int) this.RoleAlliance.Id == (int) this.SendAllianceID && this.RoleAlliance.ChatId < messageBoard.MessageID)
            this.RoleAlliance.ChatId = messageBoard.MessageID;
          bool flag;
          if (this.SendMessageID < messageBoard.MessageID)
          {
            this.SendMessageID = messageBoard.MessageID;
            flag = true;
          }
          else
            flag = false;
          messageBoard.MessageTime = MP.ReadLong();
          messageBoard.AllianceOrRole = MP.ReadByte();
          messageBoard.PicID = MP.ReadUShort();
          MP.ReadStringPlus(13, messageBoard.NameStr);
          MP.ReadStringPlus(20, messageBoard.AllianceNameStr);
          MP.ReadStringPlus(3, messageBoard.AllianceTagStr);
          if (this.ServerVersionMajor != (byte) 0)
            messageBoard.bHaveArabic = MP.ReadByte();
          ushort VSize = MP.ReadUShort();
          MP.ReadStringPlus((int) VSize, messageBoard.MessageStr);
          string str = messageBoard.MessageStr.ToString();
          char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
          for (int index2 = 0; index2 < messageBoard.MessageStr.Length; ++index2)
          {
            if (!this.isNotEmojiCharacter(messageBoard.MessageStr[index2]))
              chPtr[index2] = ' ';
          }
          str = (string) null;
          if (this.FindBlackList(messageBoard.NameStr))
          {
            this.DeSpawnMessageBoardData(messageBoard);
            if (flag)
              ++this.FindBlack;
          }
          else
          {
            this.MessageBoardList.Add(messageBoard);
            switch (num1)
            {
              case 0:
                if (DataManager.CompareStr(messageBoard.NameStr, this.RoleAttr.Name) == 0)
                {
                  messageBoard.bSelfMessage = true;
                  continue;
                }
                GUIManager.Instance.MB_SetbNeedTranslate(messageBoard);
                continue;
              case 1:
                if (DataManager.CompareStr(messageBoard.NameStr, this.RoleAttr.Name) == 0)
                {
                  messageBoard.bSelfMessage = true;
                  continue;
                }
                GUIManager.Instance.MB_SetbNeedTranslate(messageBoard);
                continue;
              default:
                continue;
            }
          }
        }
      }
      if (num1 == (byte) 2 && this.FindBlack > (byte) 0)
      {
        CString cstring = StringManager.Instance.StaticString1024();
        cstring.IntToFormat((long) this.FindBlack);
        cstring.AppendFormat(this.mStringTable.GetStringByID(9721U));
        GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
      }
      if (num1 == (byte) 0)
      {
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 1);
      }
      else if (num1 == (byte) 2)
      {
        if ((int) this.RoleAlliance.Id == (int) this.SendAllianceID && this.RoleAlliance.ChatId < this.RoleAlliance.ChatMax)
          this.RoleAlliance.ChatId = this.RoleAlliance.ChatMax;
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 2);
      }
    }
    else if (num1 == (byte) 3)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 3);
    else if (num1 == (byte) 4)
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904U), (ushort) byte.MaxValue);
    else if (num1 == (byte) 5)
    {
      Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
      if ((bool) (UnityEngine.Object) menu && (bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_MessageBoard))
        menu.CloseMenu();
    }
    if (num1 == (byte) 1)
      return;
    GUIManager.Instance.HideUILock(EUILock.MessageBoard);
  }

  public void Recv_DeleteMsg(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.MessageBoard);
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 0:
      case 2:
        uint num2 = MP.ReadUInt();
        long num3 = MP.ReadLong();
        if ((int) num2 == (int) this.SendAllianceID && num3 != 0L)
        {
          for (int index = 0; index < this.MessageBoardList.Count; ++index)
          {
            if (this.MessageBoardList[index].MessageID == num3)
            {
              this.MessageBoardList[index].TotalHeight = 0.0f;
              if (this.MessageBoardList[index].AllianceOrRole == (byte) 0)
                this.MessageBoardList[index].AllianceOrRole = (byte) 2;
              else if (this.MessageBoardList[index].AllianceOrRole == (byte) 1)
                this.MessageBoardList[index].AllianceOrRole = (byte) 3;
            }
          }
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 7);
        }
        if (num1 != (byte) 0)
          break;
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10073U), (ushort) byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10074U), (ushort) byte.MaxValue);
        break;
    }
  }

  public void LoadEmojiSave()
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}{2}", (object) AssetManager.persistentDataPath, (object) this.EmojiSaveName, (object) this.RoleAttr.UserId);
    string path = stringBuilder.ToString();
    bool flag = false;
    using (FileStream input = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
    {
      if (input.Length > 0L)
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input))
          this.EmojiSave = binaryReader.ReadBytes(64);
      }
      else
      {
        this.EmojiSave = new byte[64];
        if (this.EmojiSave == null)
          return;
        if (this.bNeedInitialEmojiSave)
        {
          flag = true;
          int tableCount = DataManager.MapDataController.EmoteTable.TableCount;
          for (int Index = 0; Index < tableCount; ++Index)
          {
            Emote recordByIndex = DataManager.MapDataController.EmoteTable.GetRecordByIndex(Index);
            if (recordByIndex.EmojiIndex > (ushort) 1 && recordByIndex.EmojiIndex <= (ushort) 512 && recordByIndex.FirstShow <= (byte) 0)
            {
              int num1 = (int) recordByIndex.EmojiIndex - 1;
              byte num2 = (byte) (1 << num1 % 8);
              this.EmojiSave[num1 / 8] |= num2;
            }
          }
        }
      }
    }
    if (!flag)
      return;
    this.SaveEmojiSave();
  }

  public void SaveEmojiSave()
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}{2}", (object) AssetManager.persistentDataPath, (object) this.EmojiSaveName, (object) this.RoleAttr.UserId);
    using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate))
    {
      using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
        binaryWriter.Write(this.EmojiSave, 0, 64);
    }
  }

  public bool CheckEmojiSave(ushort Index)
  {
    if (this.EmojiSave == null || Index == (ushort) 0 || Index > (ushort) 512)
      return false;
    if (Index == (ushort) 1)
      return true;
    int num1 = (int) Index - 1;
    byte num2 = (byte) (1 << num1 % 8);
    return ((int) this.EmojiSave[num1 / 8] & (int) num2) != 0;
  }

  public void SetEmojiSave(ushort Index)
  {
    if (this.EmojiSave == null || Index <= (ushort) 1 || Index > (ushort) 512)
      return;
    int num1 = (int) Index - 1;
    byte num2 = (byte) (1 << num1 % 8);
    int index = num1 / 8;
    if (((int) this.EmojiSave[index] & (int) num2) != 0)
      return;
    this.EmojiSave[index] |= num2;
    this.SaveEmojiSave();
    if (this.EmojiOnGICount <= 0)
      return;
    --this.EmojiOnGICount;
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if ((bool) (UnityEngine.Object) menu)
      menu.m_GroundInfo.SetExclamationmark(this.CheckShowOnGroundInfo());
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 16);
  }

  public bool CheckShowOnGroundInfo()
  {
    if (this.EmojiOnGICount == -1)
    {
      this.EmojiOnGICount = 0;
      int tableCount = DataManager.MapDataController.EmoteTable.TableCount;
      for (int Index = 0; Index < tableCount; ++Index)
      {
        Emote recordByIndex = DataManager.MapDataController.EmoteTable.GetRecordByIndex(Index);
        if (!this.CheckEmojiSave(recordByIndex.EmojiIndex) && !GUIManager.Instance.HasEmotionPck(recordByIndex.EmojiIndex))
          ++this.EmojiOnGICount;
      }
    }
    return this.EmojiOnGICount > 0;
  }

  public void RecvSynthesis(MessagePacket MP)
  {
    MP.ReadByte();
    DataManager.Instance.Resource[4].Stock = MP.ReadUInt();
    for (int index = 0; index < 6; ++index)
      this.SetCurItemQuantity(MP.ReadUShort(), MP.ReadUShort(), (byte) 0, 0L);
    GUIManager.Instance.HideUILock(EUILock.Synthesis);
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Synthesis, 0);
    AudioManager.Instance.PlayUISFX(UIKind.EquipFoundry);
  }

  public void SendSynthesis(ushort ItemID)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Synthesis))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SYNITEM;
    messagePacket.AddSeqId();
    messagePacket.Add(ItemID);
    messagePacket.Send();
  }

  private void UpdateFreeCompleteTime()
  {
    VIP_DataTbl recordByIndex = this.VIPLevelTable.GetRecordByIndex(0);
    for (int Index = 0; Index < this.VIPLevelTable.TableCount; ++Index)
    {
      recordByIndex = this.VIPLevelTable.GetRecordByIndex(Index);
      if (this.RoleAttr.VipPoint < recordByIndex.VIPPoint)
      {
        this.FreeCompletePeriod = (ushort) ((uint) recordByIndex.QuickCompleteMin * 60U);
        return;
      }
    }
    this.FreeCompletePeriod = (ushort) ((uint) recordByIndex.QuickCompleteMin * 60U);
  }

  public ushort GetFreeCompleteTime() => this.FreeCompletePeriod;

  public string GetLanguageStr(byte LanguageStr)
  {
    return LanguageStr > (byte) 0 ? this.mStringTable.GetStringByID(4650U + (uint) LanguageStr) : this.mStringTable.GetStringByID(4651U);
  }

  public string GetLanguageStr(ushort LanguageStr)
  {
    return LanguageStr > (ushort) 0 ? this.mStringTable.GetStringByID(4650U + (uint) LanguageStr) : this.mStringTable.GetStringByID(4651U);
  }

  public bool CheckUseItem(ushort ItemID, ushort TargetID = 0, ushort Parameter1 = 0, ushort Parameter2 = 0)
  {
    Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
    if ((int) recordByKey.EquipKey != (int) ItemID)
      return false;
    switch ((byte) ((uint) recordByKey.EquipKind - 1U))
    {
      case 5:
        if (recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 4)
        {
          if ((int) this.RoleAttr.Morale + (int) recordByKey.PropertiesInfo[0].PropertiesValue > 999)
          {
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(809U), (ushort) byte.MaxValue);
            return false;
          }
          byte useMoraleItemTimes = this.RoleAttr.TodayUseMoraleItemTimes;
          byte moraleBanner = this.VIPLevelTable.GetRecordByKey((ushort) this.RoleAttr.VIPLevel).moraleBanner;
          GUIManager instance = GUIManager.Instance;
          if ((int) useMoraleItemTimes < (int) moraleBanner)
            return true;
          instance.MsgStr.Length = 0;
          instance.MsgStr.IntToFormat((long) moraleBanner);
          instance.MsgStr.IntToFormat((long) moraleBanner);
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8584U));
          instance.OpenOKCancelBox(8, this.mStringTable.GetStringByID(5811U), instance.MsgStr.ToString(), 73072640, YesText: this.mStringTable.GetStringByID(4507U), NoText: this.mStringTable.GetStringByID(617U));
          return false;
        }
        if (TargetID > (ushort) 0)
          return true;
        GUIManager.Instance.m_ItemInfo.m_ItemBtn.HIID = ItemID;
        Door menu1 = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if ((UnityEngine.Object) menu1 != (UnityEngine.Object) null)
        {
          if (recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 5 || recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 6)
          {
            if (PetManager.Instance.PetDataCount <= (ushort) 0)
            {
              GUIManager.Instance.UpdateUI(EGUIWindow.UI_PetBag, 0);
              break;
            }
            menu1.OpenMenu(EGUIWindow.UI_HeroUse, 1, (int) Parameter1);
            break;
          }
          menu1.OpenMenu(EGUIWindow.UI_HeroUse);
          break;
        }
        break;
      case 9:
        switch ((byte) recordByKey.PropertiesInfo[0].Propertieskey)
        {
          case 1:
            return this.MarchEventData[(int) TargetID].Type > EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int) TargetID].Type < EMarchEventType.EMET_AttackReturn;
          case 2:
            if ((int) TargetID == (int) DataManager.mapDataController.OtherKingdomData.kingdomID || (int) TargetID == (int) DataManager.mapDataController.kingdomData.kingdomID || DataManager.mapDataController.FocusKingdomPeriod != KINGDOM_PERIOD.KP_WORLD_WAR && (int) TargetID != (int) DataManager.mapDataController.FocusKingdomID && ActivityManager.Instance.KOWData.EventState != EActivityState.EAS_Run)
              return false;
            for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
            {
              if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
              {
                GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
                return false;
              }
            }
            return true;
          case 3:
            if ((int) TargetID != (int) DataManager.mapDataController.OtherKingdomData.kingdomID)
            {
              if (DataManager.mapDataController.kingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && (int) TargetID != (int) DataManager.mapDataController.kingdomData.kingdomID)
                return false;
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
                  return false;
                }
              }
            }
            else
            {
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type > EMarchEventType.EMET_InforceStanby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(616U));
                  return false;
                }
              }
            }
            return true;
          case 4:
            if ((int) TargetID != (int) DataManager.mapDataController.OtherKingdomData.kingdomID)
            {
              if (DataManager.mapDataController.kingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && (!ActivityManager.Instance.IsNobilityWarRunning(true) || ActivityManager.Instance.FederalActKingdomWonderID == (byte) 0 || (int) ActivityManager.Instance.FederalActKingdomWonderID != (int) ActivityManager.Instance.FederalHomeKingdomWonderID || (int) ActivityManager.Instance.FederalActKingdomWonderID != (int) ActivityManager.Instance.FederalFightingWonderID) && (int) TargetID != (int) DataManager.mapDataController.kingdomData.kingdomID)
                return false;
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
                  return false;
                }
              }
            }
            else
            {
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type > EMarchEventType.EMET_InforceStanby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(616U));
                  return false;
                }
              }
            }
            return true;
          case 5:
            if ((int) TargetID != (int) DataManager.mapDataController.OtherKingdomData.kingdomID)
            {
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
                  return false;
                }
              }
            }
            else
            {
              for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
              {
                if (this.MarchEventData[index].Type > EMarchEventType.EMET_InforceStanby)
                {
                  GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(616U));
                  return false;
                }
              }
            }
            return true;
          case 6:
            this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 12, Para: (long) ItemID);
            break;
          case 7:
            if (this.RoleAlliance.Id != 0U && this.RoleAlliance.Rank == AllianceRank.RANK5)
            {
              this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 20, Para: (long) ItemID);
              break;
            }
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753U), (ushort) byte.MaxValue);
            break;
          case 8:
            if (this.NoUseTalent != (byte) 1 || Parameter1 != (ushort) 0)
              return true;
            GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(1511U), (ushort) byte.MaxValue);
            return false;
          case 20:
          case 21:
          case 24:
          case 25:
          case 29:
          case 36:
          case 37:
          case 41:
          case 42:
          case 43:
          case 44:
            return true;
          case 26:
            if (this.RoleAttr.BookmarkLimit < (ushort) 100)
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(642U), (ushort) byte.MaxValue);
            return false;
          case 27:
            if (this.RoleAttr.LordEquipBagSize < (byte) 200)
              return true;
            GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7528U), (ushort) byte.MaxValue);
            return false;
          case 28:
            if (this.RoleAlliance.Id != 0U && this.RoleAlliance.Rank == AllianceRank.RANK5)
            {
              this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 3, Para: (long) ItemID);
              break;
            }
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753U), (ushort) byte.MaxValue);
            break;
          case 30:
            if ((int) this.RoleAttr.MonsterPoint != (int) this.GetMaxMonsterPoint())
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(888U), (ushort) byte.MaxValue);
            return false;
          case 31:
          case 32:
            return true;
          case 33:
            if (this.RoleAttr.Level != (byte) 60)
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(897U), (ushort) byte.MaxValue);
            return false;
          case 34:
            if (LandWalkerManager.IsBattleFire())
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1579U), (ushort) byte.MaxValue);
            return false;
          case 35:
            if (this.RoleAttr.Name.ToString().Substring(0, 3) == "ID.")
            {
              GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8055U), (ushort) byte.MaxValue);
              break;
            }
            this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 10, Para: (long) ItemID);
            break;
          case 38:
            for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
            {
              if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
              {
                GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(687U), 0);
                return false;
              }
            }
            return true;
          case 40:
            if (this.RoleAttr.ScardStar < 100000000U)
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9641U), (ushort) byte.MaxValue);
            return false;
          case 49:
            if ((ulong) this.PetResource.Stock + (ulong) recordByKey.PropertiesInfo[1].Propertieskey * (ulong) recordByKey.PropertiesInfo[1].PropertiesValue <= (ulong) uint.MaxValue)
              return true;
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14683U), (ushort) byte.MaxValue);
            return false;
        }
        break;
      case 10:
        if ((int) recordByKey.PropertiesInfo[0].Propertieskey > this.Resource.Length || recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 7)
          return true;
        ulong num = 0;
        if ((int) recordByKey.PropertiesInfo[0].Propertieskey <= this.Resource.Length)
          num = (ulong) this.Resource[(int) recordByKey.PropertiesInfo[0].Propertieskey - 1].Stock + (ulong) recordByKey.PropertiesInfo[1].Propertieskey * (ulong) recordByKey.PropertiesInfo[1].PropertiesValue;
        if (num <= (ulong) uint.MaxValue)
          return true;
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(820U), (ushort) byte.MaxValue);
        return false;
      case 11:
        if ((byte) recordByKey.PropertiesInfo[0].Propertieskey != (byte) 1 || (int) TargetID < this.QueueIndexbyUesItemTarget.Length && this.QueueIndexbyUesItemTarget[(int) TargetID] < EQueueBarIndex.MAX && this.queueBarData[(int) (byte) this.QueueIndexbyUesItemTarget[(int) TargetID]].bActive || (int) TargetID == this.MarchEventData.Length)
          return true;
        break;
      case 12:
        if (recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 1)
        {
          if ((int) this.RoleAttr.VIPLevel != (int) this.RoleAttr.VIPLevelMax)
            return true;
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7726U), (ushort) 24);
          return false;
        }
        break;
      case 13:
        if (recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 1)
        {
          Door menu2 = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
          if ((UnityEngine.Object) menu2 == (UnityEngine.Object) null)
            return false;
          if (menu2.GetTerrain(DataManager.mapDataController.OtherKingdomData.kingdomID, (uint) this.RoleAttr.CapitalPoint) != MAP_TERRAIN_KIND.MTK_FOREST)
            return true;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(853U));
          return false;
        }
        if (recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 2)
          return true;
        break;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 28:
        return true;
    }
    return false;
  }

  public bool UseItemNote(ushort itemID, ushort targetID = 0, ushort Parameter1 = 0, ushort Parameter2 = 0)
  {
    if ((itemID >= (ushort) 1006 || itemID <= (ushort) 1001) && (int) itemID != (int) GameConstants.WorldTeleportItemID)
      return false;
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    MAP_TERRAIN_KIND mapTerrainKind = MAP_TERRAIN_KIND.MTK_PRAIRIE;
    if ((UnityEngine.Object) menu != (UnityEngine.Object) null)
      mapTerrainKind = menu.GetTerrain(targetID, (uint) GameConstants.PointCodeToMapID(Parameter1, (byte) Parameter2));
    if (((int) itemID == (int) GameConstants.NewbieTeleportItemID || (int) itemID == (int) GameConstants.WorldTeleportItemID) && (int) targetID != (int) DataManager.mapDataController.OtherKingdomData.kingdomID)
    {
      if (mapTerrainKind == MAP_TERRAIN_KIND.MTK_FOREST && this.m_BuffListOpenIcon == (byte) 1)
        GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(715U), (int) itemID << 16 | (int) targetID, (int) Parameter1 << 16 | (int) Parameter2, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(617U));
      else if ((int) itemID == (int) GameConstants.NewbieTeleportItemID)
        GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(686U), (int) itemID << 16 | (int) targetID, (int) Parameter1 << 16 | (int) Parameter2, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(617U));
      else
        GUIManager.Instance.OK((int) itemID << 16 | (int) targetID, (int) Parameter1 << 16 | (int) Parameter2);
    }
    else
    {
      if ((int) itemID == (int) GameConstants.RandomTeleportItemID && targetID == (ushort) 0)
        targetID = DataManager.mapDataController.OtherKingdomData.kingdomID;
      if (mapTerrainKind == MAP_TERRAIN_KIND.MTK_FOREST && this.m_BuffListOpenIcon == (byte) 1)
        GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(715U), (int) itemID << 16 | (int) targetID, (int) Parameter1 << 16 | (int) Parameter2, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(617U));
      else
        GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(618U), (int) itemID << 16 | (int) targetID, (int) Parameter1 << 16 | (int) Parameter2, this.mStringTable.GetStringByID(3U), this.mStringTable.GetStringByID(617U));
    }
    return true;
  }

  public void UseItem(
    ushort ItemID,
    ushort Quantity = 1,
    ushort TargetID = 0,
    ushort Parameter1 = 0,
    ushort Parameter2 = 0,
    uint Parameter3 = 0,
    string Name = "",
    bool check = true)
  {
    if (!check || this.CheckUseItem(ItemID, TargetID, Parameter1, Parameter2))
      this.SendUseItem(ItemID, Quantity, TargetID, Parameter1, Parameter2, Parameter3, Name);
    else
      GUIManager.Instance.bContinuousUse = false;
  }

  public void SetBuyAndUse(byte value) => this.BuyAndUse = value;

  public bool sendBuyItem(
    byte Type,
    ushort Key,
    ushort ItemID,
    bool BuyAndUse = false,
    GUIWindow win = null,
    int arg1 = 0,
    int arg2 = 0,
    uint Parameter3 = 0,
    string name = "",
    bool check = true,
    ushort Qty = 1)
  {
    this.BuyAndUse = !BuyAndUse ? (byte) 0 : (byte) 1;
    StoreTbl recordByKey = this.StoreData.GetRecordByKey(Key);
    switch (Type)
    {
      case 1:
        if (recordByKey.Price > this.RoleAttr.Diamond)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3966U), this.mStringTable.GetStringByID(646U), 4, this.mStringTable.GetStringByID(4507U), arg1, arg2, true);
          return false;
        }
        break;
      case 2:
        if (recordByKey.AlliancePoint > this.RoleAlliance.Money)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(648U), this.mStringTable.GetStringByID(649U), this.mStringTable.GetStringByID(650U));
          return false;
        }
        break;
    }
    ushort num1 = (ushort) (arg1 & (int) ushort.MaxValue);
    ushort num2 = (ushort) (arg2 >> 16);
    ushort num3 = (ushort) (arg2 & (int) ushort.MaxValue);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    if (BuyAndUse)
    {
      if ((!check || this.CheckUseItem(ItemID, num1, num2, num3)) && GUIManager.Instance.ShowUILock(EUILock.BuyItem))
      {
        messagePacket.Protocol = Protocol._MSG_REQUEST_BUYANDUSEITEM;
        messagePacket.AddSeqId();
        messagePacket.Add(Type);
        messagePacket.Add(Key);
        messagePacket.Add(ItemID);
        messagePacket.Add(num1);
        messagePacket.Add(num2);
        messagePacket.Add(num3);
        if ((int) ItemID == (int) GameConstants.TalentSaveItemID)
        {
          messagePacket.Add((uint) this.TalentSaveZero);
          messagePacket.Add(Encoding.UTF8.GetBytes(this.SaveTalentData[0].TagName.ToString()), len: (int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
          for (byte index = 0; (int) index < (int) num3; ++index)
          {
            messagePacket.Add(this.TalentSaveQueue[(int) index].TalentID);
            messagePacket.Add(this.TalentSaveQueue[(int) index].AddLevel);
          }
        }
        else if (ItemID == (ushort) 1253)
        {
          messagePacket.Add(Parameter3);
          messagePacket.Add(name, Encoding.UTF8.GetByteCount(name));
        }
        else if ((int) ItemID == (int) GameConstants.LESaveItemID)
        {
          messagePacket.Add(Parameter3);
          messagePacket.Add(Encoding.UTF8.GetBytes(UILordEquipSetEdit.showingSet.Name.ToString()), len: (int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
          for (byte index = 0; (int) index < UILordEquipSetEdit.showingSet.SerialNO.Length; ++index)
            messagePacket.Add(UILordEquipSetEdit.showingSet.SerialNO[(int) index]);
        }
        else
          messagePacket.Add(Parameter3);
        messagePacket.Send();
      }
    }
    else if (GUIManager.Instance.ShowUILock(EUILock.BuyItem))
    {
      messagePacket.Protocol = Protocol._MSG_REQUEST_BUYITEM;
      messagePacket.AddSeqId();
      messagePacket.Add(Type);
      messagePacket.Add(Key);
      messagePacket.Add(ItemID);
      messagePacket.Add(Qty);
      messagePacket.Send();
    }
    return true;
  }

  public void sendBuySendItem(byte Type, ushort Key, ushort ItemID, CString Name, ushort Qty = 1)
  {
    StoreTbl recordByKey = this.StoreData.GetRecordByKey(Key);
    switch (Type)
    {
      case 1:
        if (recordByKey.Price * (uint) Qty > this.RoleAttr.Diamond)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3966U), this.mStringTable.GetStringByID(646U), 4, this.mStringTable.GetStringByID(4507U), bCloseIDSet: true);
          return;
        }
        break;
      case 2:
        if (recordByKey.AlliancePoint * (uint) Qty > this.RoleAlliance.Money)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(648U), this.mStringTable.GetStringByID(649U), this.mStringTable.GetStringByID(650U));
          return;
        }
        break;
    }
    if (!GUIManager.Instance.ShowUILock(EUILock.BuyItem))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_GIFT;
    messagePacket.AddSeqId();
    messagePacket.Add(Type);
    messagePacket.Add(Key);
    messagePacket.Add(ItemID);
    messagePacket.Add(Name.ToString(), 13);
    messagePacket.Add(Qty);
    messagePacket.Send();
  }

  public void RecvBuyItem(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    byte num1 = MP.ReadByte();
    int num2 = (int) MP.ReadUShort();
    ushort num3 = MP.ReadUShort();
    ushort Quantity = MP.ReadUShort();
    bool flag = false;
    if (this.GetCurItemQuantity(num3, (byte) 0) == (ushort) 0)
      flag = true;
    this.SetCurItemQuantity(num3, Quantity, (byte) 0, 0L);
    if (num1 == (byte) 1)
      GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), num3, eSpentCredits.eItem);
    else
      this.RoleAlliance.Money = MP.ReadUInt();
    if (flag && ((int) this.bagitemDataComparer.SortType & 2) > 0)
      this.bagitemDataComparer.SortType = (byte) 1;
    GUIManager.Instance.HideUILock(EUILock.BuyItem);
    GameManager.OnRefresh();
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 65536, (int) num3);
    if (this.BuyAndUse != (byte) 0)
      return;
    AudioManager.Instance.PlayUISFX(UIKind.ItemUse);
  }

  public void RecvBuySendItem(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.BuyItem);
    byte x = MP.ReadByte();
    if (x > (byte) 0)
    {
      switch (x)
      {
        case 6:
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(154U), (ushort) byte.MaxValue);
          break;
        case 7:
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
          break;
        case 9:
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12801U), (ushort) byte.MaxValue);
          break;
        case 10:
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12802U), (ushort) byte.MaxValue);
          break;
        case 11:
          GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(16027U), (ushort) byte.MaxValue);
          break;
        case 12:
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 65540);
          break;
        default:
          CString cstring = StringManager.Instance.StaticString1024();
          cstring.IntToFormat((long) x);
          cstring.AppendFormat(this.mStringTable.GetStringByID(9698U));
          GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
          break;
      }
    }
    else
    {
      if (MP.ReadByte() == (byte) 1)
      {
        this.RoleAttr.Diamond = MP.ReadUInt();
        GameManager.OnRefresh();
      }
      else
      {
        this.RoleAlliance.Money = MP.ReadUInt();
        GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
      }
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9091U), (ushort) byte.MaxValue);
    }
  }

  public void RecvBuySendItemReserved(MessagePacket MP)
  {
    GUIManager instance = GUIManager.Instance;
    ushort num = MP.ReadUShort();
    this.SetCurItemQuantity(num, MP.ReadUShort(), (byte) 0, 0L);
    instance.MsgStr.ClearString();
    instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) this.EquipTable.GetRecordByKey(num).EquipName));
    instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7014U));
    instance.AddHUDMessage(instance.MsgStr.ToString(), (ushort) 28);
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
  }

  public void RecvUpdateItem(MessagePacket MP)
  {
    ushort num1 = MP.ReadUShort();
    ushort Quantity = MP.ReadUShort();
    byte num2 = MP.ReadByte();
    int x = (int) Quantity - (int) this.GetCurItemQuantity(num1, num2);
    this.SetCurItemQuantity(num1, Quantity, num2, MP.ReadLong());
    byte num3 = MP.ReadByte();
    if (num2 > (byte) 0)
    {
      this.ReflashMaterialItem = (byte) 1;
      this.UpdateLoadItemNotify();
    }
    if (num3 > (byte) 0)
    {
      Equip recordByKey = this.EquipTable.GetRecordByKey(num1);
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.Append(this.mStringTable.GetStringByID(840U));
      if (num2 != (byte) 0)
      {
        cstring.StringToFormat(MallManager.Instance.GetItemRankName(num2));
        cstring.AppendFormat(this.mStringTable.GetStringByID(7739U));
      }
      CString nameStr = StringManager.Instance.StaticString1024();
      UIItemInfo.SetNameProperties((UIText) null, (UIText) null, nameStr, (CString) null, ref recordByKey);
      cstring.Append(nameStr);
      if (x > 1)
      {
        cstring.IntToFormat((long) x);
        cstring.AppendFormat("x{0}");
      }
      GUIManager instance = GUIManager.Instance;
      if (num3 == (byte) 1)
        instance.AddHUDMessage(cstring.ToString(), (ushort) 35, false);
      instance.mStartV2 = num3 != (byte) 2 ? (num3 != (byte) 3 ? new Vector2(instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f) : new Vector2(instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, (float) ((double) instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2.0 - 70.0))) : new Vector2((float) ((double) instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2.0 + 310.0), (float) ((double) instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2.0 + 184.5));
      instance.m_SpeciallyEffect.mItemlist.Add(new PlayerProfileEquip()
      {
        ItemID = num1,
        color = num2
      });
      if (instance.m_SpeciallyEffect.mItemlist.Count >= 3)
      {
        Array.Clear((Array) instance.SE_Kind, 0, instance.SE_Kind.Length);
        Array.Clear((Array) instance.SE_ItemID, 0, instance.SE_ItemID.Length);
        Array.Clear((Array) instance.SE_Item_L_Color, 0, instance.SE_Item_L_Color.Length);
        for (int index = 0; index < 3; ++index)
        {
          if (instance.m_SpeciallyEffect.mItemlist[index].ItemID != (ushort) 0)
          {
            instance.SE_ItemID[index] = instance.m_SpeciallyEffect.mItemlist[index].ItemID;
            instance.SE_Item_L_Color[index] = instance.m_SpeciallyEffect.mItemlist[index].color;
          }
        }
        instance.m_SpeciallyEffect.AddIconShow(instance.mStartV2, instance.SE_Kind, instance.SE_ItemID);
        for (int index = 0; index < 3; ++index)
          instance.m_SpeciallyEffect.mItemlist.RemoveAt(0);
      }
      instance.m_SpeciallyEffect.m_ItemNextTime = 0.75f;
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    PetManager.Instance.CheckNewPetBook(num1);
  }

  public void ResetAllianceMemberData()
  {
    this.m_RecvDataIdx = 0;
    this.m_IsAllianceMemberDataFinish = (byte) 0;
    this.m_RemoveIndex = -1;
    Array.Clear((Array) this.AllianceMember, 0, this.AllianceMember.Length);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0);
  }

  public void RecvAllianceMember(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    byte num3 = MP.ReadByte();
    if (num1 != (byte) 0 && num1 != (byte) 2)
      return;
    switch (num1)
    {
      case 0:
        if (this.m_IsAllianceMemberDataFinish == (byte) 1)
          this.m_RecvDataIdx = 0;
        for (int index = 0; index < (int) num3 && this.m_RecvDataIdx < this.AllianceMember.Length; ++index)
        {
          this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong();
          this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort();
          this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13);
          this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank) MP.ReadByte();
          this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong();
          this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong();
          this.AllianceMember[this.m_RecvDataIdx].LogoutTime = MP.ReadLong();
          ++this.m_RecvDataIdx;
        }
        break;
      case 2:
        for (int index1 = 0; index1 < (int) num3; ++index1)
        {
          AllianceMemberClientDataType memberClientDataType = new AllianceMemberClientDataType();
          memberClientDataType.UserId = MP.ReadLong();
          memberClientDataType.Head = MP.ReadUShort();
          memberClientDataType.Name = MP.ReadString(13);
          memberClientDataType.Rank = (AllianceRank) MP.ReadByte();
          memberClientDataType.Power = MP.ReadULong();
          memberClientDataType.TroopKillNum = MP.ReadULong();
          memberClientDataType.LogoutTime = MP.ReadLong();
          for (int index2 = 0; index2 < this.AllianceMember.Length; ++index2)
          {
            if (this.AllianceMember[index2].UserId == memberClientDataType.UserId)
            {
              this.AllianceMember[index2] = memberClientDataType;
              break;
            }
          }
        }
        break;
    }
    this.m_IsAllianceMemberDataFinish = num2;
    if (num2 != (byte) 1)
      return;
    this.m_RecvDataIdx = 0;
  }

  public unsafe void RecvAllianceMemberNickName(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    byte num3 = MP.ReadByte();
    if (num1 != (byte) 0 && num1 != (byte) 2)
      return;
    switch (num1)
    {
      case 0:
        if (this.m_IsAllianceMemberDataFinish == (byte) 1)
          this.m_RecvDataIdx = 0;
        for (int index1 = 0; index1 < (int) num3 && this.m_RecvDataIdx < this.AllianceMember.Length; ++index1)
        {
          this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong();
          this.AllianceMember[this.m_RecvDataIdx].NickName = MP.ReadString(41);
          string str = this.AllianceMember[this.m_RecvDataIdx].NickName;
          char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
          for (int index2 = 0; index2 < this.AllianceMember[this.m_RecvDataIdx].NickName.Length; ++index2)
          {
            if (!this.isNotEmojiCharacter(this.AllianceMember[this.m_RecvDataIdx].NickName[index2]))
              chPtr[index2] = ' ';
          }
          str = (string) null;
          ++this.m_RecvDataIdx;
        }
        break;
      case 2:
        string empty = string.Empty;
        for (int index3 = 0; index3 < (int) num3; ++index3)
        {
          long num4 = MP.ReadLong();
          string str1 = MP.ReadString(41);
          string str2 = str1;
          char* chPtr = (char*) ((IntPtr) str2 + RuntimeHelpers.OffsetToStringData);
          for (int index4 = 0; index4 < str1.Length; ++index4)
          {
            if (!this.isNotEmojiCharacter(str1[index4]))
              chPtr[index4] = ' ';
          }
          str2 = (string) null;
          for (int index5 = 0; index5 < this.AllianceMember.Length; ++index5)
          {
            if (this.AllianceMember[index5].UserId == num4)
            {
              this.AllianceMember[index5].NickName = str1;
              break;
            }
          }
        }
        break;
    }
    this.m_IsAllianceMemberDataFinish = num2;
    if (num2 != (byte) 1)
      return;
    Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, (IComparer<AllianceMemberClientDataType>) this.allianceMemberComparer);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 0);
  }

  public void RecvAllianceApplyMember(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    byte num3 = MP.ReadByte();
    if (num1 != (byte) 0)
      return;
    if (this.m_IsAllianceMemberDataFinish == (byte) 1)
      this.m_RecvDataIdx = 0;
    for (int index = 0; index < (int) num3 && this.m_RecvDataIdx < this.AllianceMember.Length; ++index)
    {
      this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong();
      this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort();
      this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13);
      this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank) MP.ReadByte();
      this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong();
      this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong();
      ++this.m_RecvDataIdx;
    }
    this.m_IsAllianceMemberDataFinish = num2;
    if (this.m_IsAllianceMemberDataFinish != (byte) 1)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0);
  }

  public void RecvAllianceApplyResult(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    MP.ReadUInt();
    byte num2 = MP.ReadByte();
    long num3 = MP.ReadLong();
    switch (num1)
    {
      case 0:
        string tmpS = (string) null;
        for (int index = 0; index < this.AllianceMember.Length && index < this.m_RecvDataIdx; ++index)
        {
          if (this.AllianceMember[index].UserId == num3)
          {
            tmpS = this.AllianceMember[index].Name;
            break;
          }
        }
        if (tmpS != null)
        {
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 1);
          CString cstring = StringManager.Instance.StaticString1024();
          cstring.ClearString();
          if (num2 == (byte) 1)
          {
            cstring.StringToFormat(tmpS);
            cstring.AppendFormat(DataManager.instance.mStringTable.GetStringByID(601U));
            GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
            break;
          }
          cstring.StringToFormat(tmpS);
          cstring.AppendFormat(DataManager.instance.mStringTable.GetStringByID(600U));
          GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
          break;
        }
        break;
      case 4:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4719U), (ushort) byte.MaxValue);
        break;
      case 5:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        break;
      case 7:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Alliance_List);
    this.m_RemoveIndex = -1;
  }

  public void SendAllianceMember()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_MEMBERINFO;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void SendAllianceApplyMember()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_APPLYLIST;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void SendAllianceApplyResult(byte DealType, long userID)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_DEALAPPLY;
    messagePacket.AddSeqId();
    messagePacket.Add(DealType);
    messagePacket.Add(userID);
    messagePacket.Send();
  }

  public void SendAlliancePublicInfo(uint A_ID, string Tag, byte mType = 0)
  {
    if (A_ID <= 0U && !(Tag != string.Empty) || !GUIManager.Instance.ShowUILock(EUILock.Alliance_Manage))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_PUBLICINFO;
    messagePacket.AddSeqId();
    messagePacket.Add(A_ID);
    messagePacket.Add(mType);
    messagePacket.Add(Tag, 3);
    messagePacket.Send();
  }

  public void SendAllinceInvite(string mSendName)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Alliance_Manage))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_INVITE;
    messagePacket.AddSeqId();
    messagePacket.Add(mSendName, 13);
    messagePacket.Send();
  }

  public void RecvAllianceQuit(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    switch (MP.ReadByte())
    {
      case 1:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(604U), this.mStringTable.GetStringByID(519U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(612U), this.mStringTable.GetStringByID(519U));
        break;
      case 3:
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2);
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(740U), this.mStringTable.GetStringByID(512U), GUIManager.Instance.FindMenu(EGUIWindow.UI_SummonMonster));
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
        break;
    }
    this.RoleAlliance.Id = 0U;
    this.RoleAlliance.Applicant = (byte) 0;
    this.RoleAlliance.GiftNum = (ushort) 0;
    this.RoleAlliance.ChatMax = 0L;
    this.RoleAlliance.ChatId = 0L;
    this.RoleAlliance.GiftLv = (byte) 1;
    this.RoleAlliance.PackPoint = 0U;
    this.RoleAlliance.PackItemID = (ushort) 0;
    this.RoleAlliance.KingdomID = (ushort) 0;
    this.RoleAlliance.GiftExp = 0U;
    this.RoleAlliance.AMRank = (byte) 0;
    this.mListGift.Clear();
    this.mShowListIdx.Clear();
    this.mShowListUnOpenIdx = (ushort) 0;
    this.RoleAlliance.Tag.ClearString();
    this.bSendtoGetGift = true;
    this.SendAllianceID = 0U;
    this.SendMessageID = 0L;
    MobilizationManager.Instance.bFirstOpen = true;
    if (MobilizationManager.Instance.mMissionID != (ushort) 0)
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.Mobilization, false, 0L, 0U);
    MobilizationManager.Instance.mMissionID = (ushort) 0;
    MobilizationManager.Instance.CompleteScore = 0U;
    MobilizationManager.Instance.AMScore = 0U;
    MobilizationManager.Instance.AMCompleteDegree = (byte) 0;
    ActivityManager.Instance.CheckAMShowHint();
    ActivityManager.Instance.SetAllianceSummon_Score(0U);
    ActivityManager.Instance.ClearAllianceSummonData();
    ActivityManager.Instance.AW_NowAllianceEnterWar = (byte) 0;
    ActivityManager.Instance.AW_Rank = (byte) 0;
    ActivityManager.Instance.AW_MemberCount = (byte) 0;
    ActivityManager.Instance.AllianceWarMgr.Clear();
    ActivityManager.Instance.AllianceWarData.bAskRankPrize = false;
    ActivityManager.Instance.UpDateAllianceWarTop();
    ActivityManager.Instance.CheckAWShowHint();
    UIAllianceWar_Rank.isDataReady = false;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWar_Rank, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_AlliWarSchedule, 2);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
    DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 7, (ushort) this.RoleAlliance.Id);
    this.ClearTalkAlliance();
    this.mHelpDataList.Clear();
    DataManager.Instance.bNeedSortQueueBarData = true;
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mission, 8);
    ActivityManager.Instance.KvKActivityData[1].EventScore = 0UL;
    ActivityManager.Instance.KvKActivityData[3].EventScore = 0UL;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 5);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 2, 208);
    this.EmptyWarHall();
    this.EmptyRallyDetail();
    this.WarhallProtocol = (ushort) 0;
    this.DelRallyUIStack();
    this.m_Wonders.Clear();
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
    DataManager.msgBuffer[0] = (byte) 53;
    GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 10);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
    ActivityManager.Instance.AllianceSummon_SummonData.SummonPoint = (byte) 0;
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterID = (ushort) 0;
    ActivityManager.Instance.AllianceSummon_SummonData.MonsterEndTime = 0L;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, 3);
    GUIManager.Instance.UpdateUI(EGUIWindow.UIDonation, 5);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarBattle, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 10);
    ActivityGiftManager.Instance.cleanQuitAlliance();
  }

  public void RecvAllianceSlogan(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Header = MP.ReadString(20);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Management, 4);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(605U), (ushort) byte.MaxValue);
  }

  public void RecvAllianceNeedApply(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Approval = MP.ReadByte();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Management, 2);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
  }

  public void RecvAllianceModifyEmblem(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Emblem = MP.ReadUShort();
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eAllianceModifyEmblem);
    GameManager.OnRefresh();
    GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_Badge, 1);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(611U), (ushort) byte.MaxValue);
  }

  public void RecvAllianceModifyLanguage(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Language = MP.ReadByte();
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 4);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(608U), (ushort) byte.MaxValue);
  }

  public unsafe void RecvAllianceModifyBulletin(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Bullet = MP.ReadString(900);
    string str = this.RoleAlliance.Bullet;
    char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
    for (int index = 0; index < this.RoleAlliance.Bullet.Length; ++index)
    {
      if (!this.isNotEmojiCharacter(this.RoleAlliance.Bullet[index]))
        chPtr[index] = ' ';
    }
    str = (string) null;
    this.RoleAlliance.BulletinFlag = MP.ReadByte();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 1);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(606U), (ushort) byte.MaxValue);
  }

  public unsafe void RecvAllianceModifyBrief(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.RoleAlliance.Notice = MP.ReadString(1300);
    string str = this.RoleAlliance.Notice;
    char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
    for (int index = 0; index < this.RoleAlliance.Notice.Length; ++index)
    {
      if (!this.isNotEmojiCharacter(this.RoleAlliance.Notice[index]))
        chPtr[index] = ' ';
    }
    str = (string) null;
    this.RoleAlliance.NoticeinFlag = MP.ReadByte();
    GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 3);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(607U), (ushort) byte.MaxValue);
  }

  public unsafe void RecvAlliancePublicInfo(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        this.AllianceView.Id = MP.ReadUInt();
        int num = (int) MP.ReadByte();
        this.AllianceView.Leader = MP.ReadString(13);
        this.AllianceView.Tag = MP.ReadString(3);
        this.AllianceView.Name = MP.ReadString(20);
        this.AllianceView.Notice = MP.ReadString(1300);
        string str = this.AllianceView.Notice;
        char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
        for (int index = 0; index < this.AllianceView.Notice.Length; ++index)
        {
          if (!this.isNotEmojiCharacter(this.AllianceView.Notice[index]))
            chPtr[index] = ' ';
        }
        str = (string) null;
        this.AllianceView.Header = MP.ReadString(20);
        this.AllianceView.Emblem = MP.ReadUShort();
        this.AllianceView.Language = MP.ReadByte();
        this.AllianceView.Approval = MP.ReadByte();
        this.AllianceView.Member = MP.ReadByte();
        this.AllianceView.Power = MP.ReadULong();
        this.AllianceView.GiftLv = MP.ReadByte();
        this.AllianceView.KingdomID = MP.ReadUShort();
        this.AllianceView.NoticeFlag = MP.ReadByte();
        GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 1);
        GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
        break;
      case 1:
        GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 6);
        GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
        GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7084U), (ushort) byte.MaxValue);
        break;
    }
  }

  public void SendAllianceModifyRank(long UserId, AllianceRank Rank)
  {
    if (Rank == AllianceRank.NULL || UserId == 0L || !GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_MODIFY_RANK;
    messagePacket.AddSeqId();
    messagePacket.Add(UserId);
    messagePacket.Add((byte) Rank);
    messagePacket.Send();
  }

  public void SendAllianceQuitMember(long UserId)
  {
    if (UserId == 0L || !GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_QUITMEMBER;
    messagePacket.AddSeqId();
    messagePacket.Add(UserId);
    messagePacket.Send();
  }

  public void RecvAllianceModifyRank(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    long num2 = MP.ReadLong();
    AllianceRank allianceRank = (AllianceRank) MP.ReadByte();
    switch (num1)
    {
      case 0:
        for (int index = 0; index < this.AllianceMember.Length; ++index)
        {
          if (this.AllianceMember[index].UserId == num2)
          {
            this.AllianceMember[index].Rank = allianceRank;
            break;
          }
        }
        Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, (IComparer<AllianceMemberClientDataType>) this.allianceMemberComparer);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0);
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(741U), (ushort) byte.MaxValue);
        break;
      case 5:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Alliance_List);
  }

  public void RecvAllianceQuitMember(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    long num2 = MP.ReadLong();
    switch (num1)
    {
      case 0:
        for (int index = 0; index < this.AllianceMember.Length; ++index)
        {
          if (this.AllianceMember[index].UserId == num2)
          {
            this.AllianceMember[index].UserId = 0L;
            this.AllianceMember[index].LogoutTime = 0L;
            this.AllianceMember[index].TroopKillNum = 0UL;
            this.AllianceMember[index].Power = 0UL;
            this.AllianceMember[index].Head = (ushort) 0;
            this.AllianceMember[index].Rank = AllianceRank.NULL;
            this.AllianceMember[index].Name = (string) null;
            break;
          }
        }
        this.m_RemoveIndex = -1;
        break;
      case 5:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Alliance_List);
  }

  public void RecvAllianceNeedHelp(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    for (int index = 0; index < (int) num2; ++index)
    {
      AllianceHelpRecordCMsgDataType recordCmsgDataType;
      recordCmsgDataType.AllianceHelpRecordSN = MP.ReadUInt();
      recordCmsgDataType.Head = MP.ReadUShort();
      recordCmsgDataType.Rank = (AllianceRank) MP.ReadByte();
      recordCmsgDataType.PlayerName = MP.ReadString(13);
      recordCmsgDataType.HelpKind = (EAllianceHelpKind) MP.ReadByte();
      recordCmsgDataType.EventID = MP.ReadUShort();
      recordCmsgDataType.EventDataLv = MP.ReadByte();
      recordCmsgDataType.AlreadyHelperNum = MP.ReadByte();
      recordCmsgDataType.HelpMax = MP.ReadByte();
      this.mHelpDataList.Add(recordCmsgDataType);
    }
    if (num1 != (byte) 1)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
  }

  public void SendAllianceHelp(byte mType)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Alliance_Help))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_HELP;
    messagePacket.AddSeqId();
    messagePacket.Add(mType);
    messagePacket.Send();
  }

  public void RecvAllianceHelp(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    int index = Mathf.Clamp((int) MP.ReadByte(), 0, this.mPlayHelpDataType.Length - 1);
    this.mPlayHelpDataType[index].Kind = (byte) 2;
    this.mPlayHelpDataType[index].EventID = MP.ReadUShort();
    this.mPlayHelpDataType[index].EventDataLv = MP.ReadByte();
    this.mPlayHelpDataType[index].HelpMax = MP.ReadByte();
    if (DataManager.Instance.OpenBuildingWindowUpdateNoClose == (byte) 1)
      GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
    else
      GameConstants.GetBytes((ushort) 1, DataManager.msgBuffer, 0);
    if (index == 0)
    {
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 1);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
    }
    else
      GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(762U), (ushort) 9);
    DataManager.Instance.bNeedSortQueueBarData = true;
    GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
    DataManager.Instance.OpenBuildingWindowUpdateNoClose = (byte) 0;
  }

  public void RecvAllianceSomebodyNeedHelp(MessagePacket MP)
  {
    AllianceHelpRecordCMsgDataType recordCmsgDataType;
    recordCmsgDataType.AllianceHelpRecordSN = MP.ReadUInt();
    recordCmsgDataType.Head = MP.ReadUShort();
    recordCmsgDataType.Rank = (AllianceRank) MP.ReadByte();
    recordCmsgDataType.PlayerName = MP.ReadString(13);
    recordCmsgDataType.HelpKind = (EAllianceHelpKind) MP.ReadByte();
    recordCmsgDataType.EventID = MP.ReadUShort();
    recordCmsgDataType.EventDataLv = MP.ReadByte();
    recordCmsgDataType.AlreadyHelperNum = MP.ReadByte();
    recordCmsgDataType.HelpMax = MP.ReadByte();
    this.mHelpDataList.Add(recordCmsgDataType);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
  }

  public void SendAllianceHelpSomebody()
  {
  }

  public void RecvAllianceHelpSomebody(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        uint getAllianceMoney = this.DailyHelpGetAllianceMoney;
        this.DailyHelpGetAllianceMoney = MP.ReadUInt();
        this.RoleAlliance.Money = MP.ReadUInt();
        ushort num = MP.ReadUShort();
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(763U), (ushort) 9);
        GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 6);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3);
        AFAdvanceManager.Instance.CheckGuildHelpUnbroken();
        if (getAllianceMoney >= this.DailyHelpGetAllianceMoney)
          break;
        AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
        if (num > (ushort) 1)
        {
          int index1 = 0;
          Array.Clear((Array) GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
          Array.Clear((Array) GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
          if (num > (ushort) 5)
            num = (ushort) 5;
          for (int index2 = 0; index2 < (int) num; ++index2)
          {
            GUIManager.Instance.SE_Kind[index1] = this.AllianceMoneyBonusRate <= (ushort) 100 ? SpeciallyEffect_Kind.Alliance_Speed_Money : SpeciallyEffect_Kind.Alliance_Speed_Money2;
            ++index1;
          }
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID);
          break;
        }
        if (this.AllianceMoneyBonusRate > (ushort) 100)
        {
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Alliance_Speed_Money2, ItemID: (ushort) 0, EndTime: 2f);
          break;
        }
        GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Alliance_Speed_Money, ItemID: (ushort) 0, EndTime: 2f);
        break;
      case 2:
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3);
        GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
        break;
    }
  }

  public void SendAllianceStepDown(long UserId)
  {
    if (UserId == 0L || !GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_STEPDOWN;
    messagePacket.AddSeqId();
    messagePacket.Add(UserId);
    messagePacket.Send();
  }

  public void RecvAllianceStepDown(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        this.m_TempDemiseStr.ClearString();
        StringManager.Instance.StringToFormat(this.m_DemiseName);
        this.m_TempDemiseStr.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(603U));
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2);
        GUIManager.Instance.OpenMessageBox(DataManager.Instance.mStringTable.GetStringByID(602U), this.m_TempDemiseStr.ToString(), DataManager.Instance.mStringTable.GetStringByID(4797U));
        break;
      case 3:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4792U), (ushort) byte.MaxValue);
        break;
      case 4:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        break;
      case 5:
        GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9366U), (ushort) byte.MaxValue);
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Alliance_List);
  }

  public void SendAllianceOthorMemberInfo(uint allianceID)
  {
    if (allianceID == 0U || !GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_OTHER_MEMBERINFO;
    messagePacket.AddSeqId();
    messagePacket.Add(allianceID);
    messagePacket.Send();
  }

  public void RecvAllianceOthorMemberInfo(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    MP.ReadUInt();
    byte num2 = MP.ReadByte();
    byte num3 = MP.ReadByte();
    switch (num1)
    {
      case 0:
        if (this.m_IsAllianceMemberDataFinish == (byte) 1)
          this.m_RecvDataIdx = 0;
        for (int index = 0; index < (int) num3 && this.m_RecvDataIdx < this.AllianceMember.Length; ++index)
        {
          this.AllianceMember[this.m_RecvDataIdx].UserId = 0L;
          this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort();
          this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13);
          this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank) MP.ReadByte();
          this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong();
          this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong();
          ++this.m_RecvDataIdx;
        }
        this.m_IsAllianceMemberDataFinish = num2;
        if (num2 != (byte) 1)
          break;
        Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, (IComparer<AllianceMemberClientDataType>) this.allianceMemberComparer);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 1);
        GUIManager.Instance.HideUILock(EUILock.Alliance_List);
        break;
      case 1:
        GUIManager.Instance.HideUILock(EUILock.Alliance_List);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 5);
        break;
    }
  }

  public void RecvHospitalInfo(MessagePacket MP)
  {
    this.HospitalTotal = 0U;
    for (int index = 0; index < 16; ++index)
    {
      this.mSoldier_Hospital[index] = MP.ReadUInt();
      this.HospitalTotal += this.mSoldier_Hospital[index];
    }
    this.TreatmentQty = 0U;
    for (int index = 0; index < 16; ++index)
    {
      this.mTreatmentSoldier[index] = MP.ReadUInt();
      this.TreatmentQty += this.mTreatmentSoldier[index];
    }
    long StartTime = MP.ReadLong();
    uint TotalTime = MP.ReadUInt();
    if (StartTime == 0L)
      return;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, true, StartTime, TotalTime);
    DataManager.Instance.SetRecvQueueBarData(13);
  }

  public void RecvHealingtroop(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        for (int index = 0; index < 5; ++index)
          this.Resource[index].Stock = MP.ReadUInt();
        this.TreatmentQty = 0U;
        for (int index = 0; index < 16; ++index)
        {
          this.mTreatmentSoldier[index] = MP.ReadUInt();
          this.TreatmentQty += this.mTreatmentSoldier[index];
        }
        DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, true, MP.ReadLong(), MP.ReadUInt());
        DataManager.Instance.SetRecvQueueBarData(13);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 2);
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        GUIManager.Instance.HideUILock(EUILock.Hospital);
        if ((int) this.TreatmentQuantity == (int) this.TreatmentQty)
          break;
        if (this.TreatmentQty == 0U)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
          break;
        }
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.TreatmentQuantity);
        GUIManager.Instance.MsgStr.IntToFormat((long) this.TreatmentQty);
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3881U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4030U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4031U));
        break;
      case 1:
        GUIManager.Instance.HideUILock(EUILock.Hospital);
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
        GUIManager.Instance.HideUILock(EUILock.Hospital);
        break;
    }
  }

  public void RecvHealingcomplete(MessagePacket MP)
  {
    this.SoldierTotal = 0L;
    for (int index = 0; index < 16; ++index)
    {
      this.RoleAttr.m_Soldier[index] = MP.ReadUInt();
      this.SoldierTotal += (long) this.RoleAttr.m_Soldier[index];
      this.mSoldier_Hospital[index] -= this.mTreatmentSoldier[index];
      this.HospitalTotal -= this.mTreatmentSoldier[index];
    }
    this.Resource[0].SetResource(MP.ReadUInt(), MP.ReadLong());
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat((long) this.TreatmentQty);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 3);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void RecvCancelealing(MessagePacket MP)
  {
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
  }

  public void RecvInstanthealing(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eInstanthealing);
    long soldierTotal = this.SoldierTotal;
    this.SoldierTotal = 0L;
    for (int index = 0; index < 16; ++index)
    {
      uint num = MP.ReadUInt();
      this.mSoldier_Hospital[index] = this.mSoldier_Hospital[index] - (num - this.RoleAttr.m_Soldier[index]);
      this.HospitalTotal -= num - this.RoleAttr.m_Soldier[index];
      this.RoleAttr.m_Soldier[index] = num;
      this.SoldierTotal += (long) num;
    }
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong());
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GameManager.OnRefresh();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat(this.SoldierTotal - soldierTotal);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 3);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void SendFinishhealing()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Hospital))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHHEALING;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvFinishhealing(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    long soldierTotal = this.SoldierTotal;
    this.SoldierTotal = 0L;
    for (int index = 0; index < 16; ++index)
    {
      uint num = MP.ReadUInt();
      this.mSoldier_Hospital[index] = this.mSoldier_Hospital[index] - (num - this.RoleAttr.m_Soldier[index]);
      this.HospitalTotal -= num - this.RoleAttr.m_Soldier[index];
      this.RoleAttr.m_Soldier[index] = num;
      this.SoldierTotal += (long) num;
    }
    this.Resource[0].SetResource(MP.ReadUInt(), MP.ReadLong());
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GameManager.OnRefresh();
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat(this.SoldierTotal - soldierTotal);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 3);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void RecvBeingattack(MessagePacket MP)
  {
    this.SoldierTotal = 0L;
    this.HospitalTotal = 0U;
    for (int index = 0; index < 16; ++index)
    {
      this.RoleAttr.m_Soldier[index] = MP.ReadUInt();
      this.SoldierTotal += (long) this.RoleAttr.m_Soldier[index];
    }
    for (int index = 0; index < 16; ++index)
    {
      this.mSoldier_Hospital[index] = MP.ReadUInt();
      this.HospitalTotal += this.mSoldier_Hospital[index];
    }
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong());
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void RecvGiveUpHealing(MessagePacket MP)
  {
    int index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    uint x = MP.ReadUInt();
    this.mSoldier_Hospital[index] -= x;
    this.HospitalTotal -= x;
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 1));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.IntToFormat((long) x, bNumber: true);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(5789U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) byte.MaxValue);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void RecvUpdate_Injure(MessagePacket MP)
  {
    this.HospitalTotal = 0U;
    for (int index = 0; index < 16; ++index)
    {
      this.mSoldier_Hospital[index] = MP.ReadUInt();
      this.HospitalTotal += this.mSoldier_Hospital[index];
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void SendExitBattle()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.ExitHeroBattle))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_LEAVEBATTLE;
    messagePacket.AddSeqId();
    messagePacket.Add(this.BattleSeqID);
    messagePacket.Send();
  }

  public bool IsSameAlliance(CString tag)
  {
    return this.RoleAlliance.Id != 0U && tag.Length > 2 && (int) this.RoleAlliance.Tag[0] == (int) tag[0] && (int) this.RoleAlliance.Tag[1] == (int) tag[1] && (int) this.RoleAlliance.Tag[2] == (int) tag[2];
  }

  public bool IsMapIdMine(ushort in_zoneID, byte in_point)
  {
    int mapId = GameConstants.PointCodeToMapID(in_zoneID, in_point);
    bool flag1 = false;
    bool flag2 = true;
    if (this.RoleAttr.CapitalPoint == mapId)
    {
      flag1 = true;
      flag2 = false;
    }
    else if (DataManager.MapDataController.ZoneUpdateInfo[(int) in_zoneID & 1023].zoneState < (byte) 8)
    {
      int tableId = (int) DataManager.MapDataController.LayoutMapInfo[mapId].tableID;
      if (DataManager.MapDataController.IsResources((uint) mapId))
      {
        flag1 = DataManager.CompareStr(DataManager.MapDataController.ResourcesPointTable[tableId].playerName, DataManager.Instance.RoleAttr.Name) == 0;
        flag2 = false;
      }
      else if (DataManager.MapDataController.IsCityOrCamp((uint) mapId))
      {
        flag1 = DataManager.CompareStr(DataManager.MapDataController.PlayerPointTable[tableId].playerName, DataManager.Instance.RoleAttr.Name) == 0;
        flag2 = false;
      }
    }
    if (flag2)
    {
      for (int index = 0; index < (int) this.MaxMarchEventNum; ++index)
      {
        if ((this.MarchEventData[index].Type == EMarchEventType.EMET_Camp || this.MarchEventData[index].Type == EMarchEventType.EMET_Gathering) && GameConstants.PointCodeToMapID(this.MarchEventData[index].Point.zoneID, this.MarchEventData[index].Point.pointID) == mapId)
        {
          flag1 = true;
          break;
        }
      }
    }
    return flag1;
  }

  public ulong GetPowerByType(EPowerbyKind kind)
  {
    ulong powerByType = 0;
    switch (kind)
    {
      case EPowerbyKind.TroopPower:
        long soldierTotal = this.SoldierTotal;
        uint[] numArray = new uint[16];
        for (int index = 0; index < this.RoleAttr.m_Soldier.Length; ++index)
          numArray[index] = this.RoleAttr.m_Soldier[index];
        for (int index1 = 0; index1 < this.MarchEventData.Length; ++index1)
        {
          if (this.MarchEventData[index1].Type != EMarchEventType.EMET_Standby)
          {
            int num = 0;
            for (int index2 = 0; index2 < this.MarchEventData[index1].TroopData.Length; ++index2)
            {
              for (int index3 = 0; index3 < this.MarchEventData[index1].TroopData[index2].Length; ++index3)
              {
                numArray[num++] += this.MarchEventData[index1].TroopData[index2][index3];
                soldierTotal += (long) this.MarchEventData[index1].TroopData[index2][index3];
              }
            }
          }
        }
        uint[] hideTroopData = HideArmyManager.Instance.GetHideTroopData();
        for (int index = 0; index < hideTroopData.Length; ++index)
        {
          numArray[index] += hideTroopData[index];
          soldierTotal += (long) hideTroopData[index];
        }
        for (int index = 0; index < this.RoleAttr.m_Soldier.Length; ++index)
        {
          SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 1));
          powerByType += (ulong) numArray[index] * (ulong) recordByKey.Strength;
        }
        break;
      case EPowerbyKind.TrapPower:
        for (int index = 0; index < this.mTrapQty.Length; ++index)
        {
          if (this.mTrapQty[index] != 0U)
          {
            SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 17));
            powerByType += (ulong) (this.mTrapQty[index] * (uint) recordByKey.Strength);
          }
        }
        break;
      case EPowerbyKind.BuildingPower:
        RoleBuildingData[] allBuildsData = GUIManager.Instance.BuildingData.AllBuildsData;
        for (int index = 0; index < allBuildsData.Length; ++index)
        {
          if (allBuildsData[index].BuildID != (ushort) 0)
          {
            BuildLevelRequest levelRequestData = GUIManager.Instance.BuildingData.GetBuildLevelRequestData(allBuildsData[index].BuildID, allBuildsData[index].Level);
            powerByType += (ulong) levelRequestData.Strength;
          }
        }
        break;
      case EPowerbyKind.TechPower:
        for (ushort index = 0; (int) index < this.AllTechData.Length; ++index)
        {
          byte Level1 = (byte) ((uint) this.AllTechData[(int) index] & 15U);
          TechLevelTbl Data;
          if (this.GetTechLevelupData(out Data, (ushort) ((int) index * 2 + 1), Level1))
            powerByType += (ulong) Data.Strength;
          byte Level2 = (byte) ((uint) this.AllTechData[(int) index] >> 4);
          if (this.GetTechLevelupData(out Data, (ushort) ((int) index * 2 + 2), Level2))
            powerByType += (ulong) Data.Strength;
        }
        break;
      case EPowerbyKind.LordPower:
        LevelUp recordByKey1 = this.LevelUpTable.GetRecordByKey((ushort) this.RoleAttr.Level);
        powerByType += (ulong) recordByKey1.AddForce;
        break;
      case EPowerbyKind.MissionPower:
        for (ushort Index = 0; (int) Index < DataManager.MissionDataManager.ManorAimTable.TableCount; ++Index)
        {
          ManorAimTbl recordByIndex = DataManager.MissionDataManager.ManorAimTable.GetRecordByIndex((int) Index);
          if (DataManager.MissionDataManager.CheckBoolMark(recordByIndex.ID))
            powerByType += (ulong) recordByIndex.Force;
        }
        break;
      case EPowerbyKind.HeroPower:
        for (int index = 0; index < this.curHeroData.Keys.Length; ++index)
        {
          if (this.curHeroData.Keys[index] != 0U)
          {
            CurHeroData heroData = this.curHeroData[this.curHeroData.Keys[index]];
            powerByType += GameConstants.GetHeroPower(heroData);
          }
        }
        break;
      case EPowerbyKind.PetPower:
        powerByType += PetManager.Instance.CalTotalPetPower();
        break;
    }
    return powerByType;
  }

  public void InitTechTreeData()
  {
    int mapCount = (int) this.TechKindData.MapCount;
    this.TechnologyLayoutTypeStart = new ushort[mapCount];
    this.TechnologyLayoutTypeCount = new byte[mapCount];
    this.sortTechKindIndex = new byte[mapCount];
    for (byte index = 0; (int) index < this.TechKindData.TableCount; ++index)
      this.sortTechKindIndex[(int) index] = index;
    Array.Sort<byte>(this.sortTechKindIndex, 0, this.TechKindData.TableCount, (IComparer<byte>) this.TechKindComparer);
    Array.Clear((Array) this.TechnologyLayoutTypeStart, 0, this.TechnologyLayoutTypeStart.Length);
    Array.Clear((Array) this.TechnologyLayoutTypeCount, 0, this.TechnologyLayoutTypeCount.Length);
    ushort index1 = 0;
    byte num1 = 0;
    for (ushort Index = 0; (int) Index < this.TechTreeLayout.TableCount; ++Index)
    {
      ushort index2 = (ushort) (byte) ((uint) this.TechTreeLayout.GetRecordByIndex((int) Index).Kind - 1U);
      if ((int) index1 != (int) index2)
      {
        this.TechnologyLayoutTypeCount[(int) index1] = num1;
        num1 = (byte) 1;
        this.TechnologyLayoutTypeStart[(int) index2] = Index;
        index1 = index2;
      }
      else
        ++num1;
    }
    if ((int) index1 < this.TechnologyLayoutTypeCount.Length)
      this.TechnologyLayoutTypeCount[(int) index1] = num1;
    this.TechKindLevelMax = new ushort[this.TechData.TableCount + 1];
    this.TechLevelupExSearchTable = new uint[this.TechData.TableCount + 1];
    this.AllTechData = new byte[150];
    Array.Clear((Array) this.TechKindLevelMax, 0, this.TechKindLevelMax.Length);
    ushort num2 = 0;
    for (ushort Index = 0; (int) Index < this.TechData.TableCount; ++Index)
    {
      TechDataTbl recordByIndex = this.TechData.GetRecordByIndex((int) Index);
      num2 += (ushort) recordByIndex.LevelMax;
      this.TechKindLevelMax[(int) recordByIndex.TechID] = num2;
    }
    byte num3 = 0;
    ushort index3 = 0;
    for (int Index = 0; Index < this.TechLevelEx.TableCount; ++Index)
    {
      ushort techId = this.TechLevelEx.GetRecordByIndex(Index).TechID;
      if ((int) techId != (int) index3)
      {
        this.TechLevelupExSearchTable[(int) index3] = (uint) (Index - (int) num3 << 16) | (uint) num3;
        index3 = techId;
        num3 = (byte) 1;
      }
      else
        ++num3;
    }
    this.TechLevelupExSearchTable[(int) index3] = (uint) (this.TechLevelEx.TableCount - (int) num3 << 16) | (uint) num3;
  }

  public byte GetTechLevel(ushort TechID)
  {
    if (TechID == (ushort) 0 || TechID > (ushort) 1000)
      return 0;
    int index = (int) TechID - 1 >> 1;
    return ((int) TechID - 1 & 1) == 0 ? (byte) ((uint) this.AllTechData[index] & 15U) : (byte) ((uint) this.AllTechData[index] >> 4);
  }

  public void SetTechLevel(ushort TechID, byte newLv)
  {
    if (TechID == (ushort) 0)
      return;
    int index = (int) TechID - 1 >> 1;
    if (this.AllTechData.Length <= index)
      return;
    if (((int) TechID - 1 & 1) == 0)
      this.AllTechData[index] = (byte) (((uint) this.AllTechData[index] & 240U) + (uint) newLv);
    else
      this.AllTechData[index] = (byte) (((int) this.AllTechData[index] & 15) + ((int) newLv << 4));
  }

  public bool GetTechLevelupData(out TechLevelTbl Data, ushort TechID, byte Level)
  {
    if (TechID > (ushort) 1000 || TechID == (ushort) 0)
    {
      Data = this.TechLevel.GetRecordByIndex(0);
      return false;
    }
    if ((int) TechID - 1 >= this.TechKindLevelMax.Length)
    {
      Data = this.TechLevel.GetRecordByIndex(0);
      return false;
    }
    ushort num = this.TechKindLevelMax[(int) TechID - 1];
    Data = this.TechLevel.GetRecordByIndex((int) num + (int) Level - 1);
    return (int) Data.TechID == (int) TechID && (int) Data.Level == (int) Level;
  }

  public bool GetTechLevelupDataEx(out TechLevelExTbl Data, ushort TechID, byte Level)
  {
    if (TechID > (ushort) 1000 || TechID == (ushort) 0 || Level == (byte) 0 || (int) TechID >= this.TechLevelupExSearchTable.Length || this.TechLevelupExSearchTable[(int) TechID] == 0U)
    {
      Data = new TechLevelExTbl();
    }
    else
    {
      uint num1 = this.TechLevelupExSearchTable[(int) TechID] >> 16;
      uint num2 = this.TechLevelupExSearchTable[(int) TechID] & (uint) ushort.MaxValue;
      if ((uint) Level > num2)
      {
        Data = new TechLevelExTbl();
      }
      else
      {
        Data = this.TechLevelEx.GetRecordByIndex((int) num1 + (int) Level - 1);
        return true;
      }
    }
    return false;
  }

  public unsafe byte CheckTechState(ushort TechID)
  {
    byte num = 0;
    if (TechID == (ushort) 0 || TechID > (ushort) 1000)
      return num;
    if (this.GetTechLevel(TechID) > (byte) 0)
      num |= (byte) 2;
    TechDataTbl recordByKey = this.TechData.GetRecordByKey(TechID);
    if ((int) recordByKey.TechID == (int) TechID && (int) recordByKey.LevelMax == (int) this.GetTechLevel(TechID))
      return (byte) ((uint) num | 64U);
    TechLevelTbl Data;
    if (!this.GetTechLevelupData(out Data, TechID, (byte) ((uint) this.GetTechLevel(TechID) + 1U)))
      return 1;
    if (recordByKey.Locked == (byte) 1)
      return (byte) ((uint) (byte) ((uint) num | 1U) | 32U);
    if ((int) GUIManager.Instance.BuildingData.GetBuildData((ushort) 10, (ushort) 0).Level < (int) Data.ResearchLevel)
      return (byte) ((uint) (byte) ((uint) num | 1U) | 4U);
    if (!this.CheckTechKind((ushort) recordByKey.Kind))
      return (byte) ((uint) num | 1U);
    // ISSUE: untyped stack allocation
    ushort* numPtr1 = (ushort*) __untypedstackalloc((int) checked (4U * 2U));
    // ISSUE: untyped stack allocation
    byte* numPtr2 = (byte*) __untypedstackalloc((int) checked (4U * 1U));
    *numPtr1 = Data.RequireTechID1;
    numPtr1[1] = Data.RequireTechID2;
    numPtr1[2] = Data.RequireTechID3;
    numPtr1[3] = Data.RequireTechID4;
    *numPtr2 = Data.RequireTechLv1;
    numPtr2[1] = Data.RequireTechLv2;
    numPtr2[2] = Data.RequireTechLv3;
    numPtr2[3] = Data.RequireTechLv4;
    for (byte index = 0; index < (byte) 4; ++index)
    {
      if (numPtr1[index] != (ushort) 0 && (int) this.GetTechLevel(numPtr1[index]) < (int) numPtr2[index])
        return (byte) ((uint) (byte) ((uint) num | 1U) | 8U);
    }
    return num;
  }

  public bool CheckTechKind(ref TechKindTbl techkindData, CString msg = null)
  {
    if (techkindData.ConditionalType != (byte) 1 || (int) DataManager.StageDataController.StageRecord[2] >= (int) techkindData.Parm)
      return true;
    if (msg != null)
    {
      msg.ClearString();
      msg.StringToFormat(this.mStringTable.GetStringByID(7200U + (uint) techkindData.Parm));
      msg.AppendFormat(this.mStringTable.GetStringByID(5044U));
    }
    return false;
  }

  public bool CheckTechKind(ushort KindId, CString msg = null)
  {
    TechKindTbl recordByKey = DataManager.Instance.TechKindData.GetRecordByKey(KindId);
    return this.CheckTechKind(ref recordByKey, msg);
  }

  public void GetTechTreeDataRange(byte Kind, out ushort Start, out ushort Count)
  {
    if (Kind == (byte) 0)
    {
      Start = Count = (ushort) 0;
    }
    else
    {
      Start = this.TechnologyLayoutTypeStart[(int) Kind - 1];
      Count = (ushort) (short) this.TechnologyLayoutTypeCount[(int) Kind - 1];
    }
  }

  public void RecvTechnologyInfo(MessagePacket MP)
  {
    this.ResearchTech = MP.ReadUShort();
    int num = (int) MP.ReadByte();
    long StartTime = MP.ReadLong();
    uint TotalTime = MP.ReadUInt();
    if (StartTime > 0L)
    {
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, StartTime, TotalTime);
      DataManager.Instance.SetRecvQueueBarData(1);
    }
    else
      this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0U);
    MP.ReadBlock(this.AllTechData, 0, 150);
    this.TechnologySendFinish = (byte) 0;
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
    DataManager.missionDataManager.SetCompleteWhileLogin(eMissionKind.Tech);
  }

  public void RecvTechnologyResearch(MessagePacket MP)
  {
    byte x = MP.ReadByte();
    if (x == (byte) 0)
    {
      this.ResearchTech = MP.ReadUShort();
      int num = (int) MP.ReadByte();
      long StartTime = MP.ReadLong();
      uint TotalTime = MP.ReadUInt();
      for (byte index = 0; (int) index < this.Resource.Length; ++index)
        this.Resource[(int) index].Stock = MP.ReadUInt();
      this.PetResource.Stock = MP.ReadUInt();
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, StartTime, TotalTime);
      DataManager.Instance.SetRecvQueueBarData(1);
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
      GameManager.OnRefresh(NetworkNews.Refresh_PetResource);
      GameConstants.GetBytes((ushort) 1, DataManager.msgBuffer, 0);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
      AudioManager.Instance.PlayUISFX(UIKind.Research);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
    }
    else
    {
      uint ID = 0;
      switch ((int) x - 1)
      {
        case 0:
          ID = 5017U;
          break;
        case 1:
          ID = 7343U;
          break;
        case 4:
          ID = 3942U;
          break;
        case 5:
          ID = 7520U;
          break;
        default:
          CString cstring = StringManager.Instance.StaticString1024();
          cstring.IntToFormat((long) x);
          cstring.AppendFormat(this.mStringTable.GetStringByID(5045U));
          GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
          break;
      }
      if (ID > 0U)
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(ID), (ushort) byte.MaxValue);
    }
    GUIManager.Instance.HideUILock(EUILock.Research);
  }

  public void RecvTechnologyCompleteFree(MessagePacket MP)
  {
    byte x = MP.ReadByte();
    if (x == (byte) 0)
    {
      ushort num1 = MP.ReadUShort();
      byte num2 = MP.ReadByte();
      this.SetTechLevel(num1, num2);
      this.ResearchTech = (ushort) 0;
      for (byte index = 0; (int) index < this.Resource.Length; ++index)
        this.Resource[(int) index].Stock = MP.ReadUInt();
      this.ShowTechnologyHUD(num1);
      DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num1, (ushort) num2);
      this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0U);
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
      if (DataManager.Instance.OpenBuildingWindowUpdateNoClose == (byte) 1)
        GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
      else
        GameConstants.GetBytes((ushort) 1, DataManager.msgBuffer, 0);
      GameConstants.GetBytes((ushort) 1, DataManager.msgBuffer, 0);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
      GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
      this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
      DataManager.Instance.OpenBuildingWindowUpdateNoClose = (byte) 0;
      this.UpdateSaveTalent_Point();
      if (num1 == (ushort) 120)
        NewbieManager.CheckTroopMemory();
    }
    else
    {
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.IntToFormat((long) x);
      cstring.AppendFormat(this.mStringTable.GetStringByID(5045U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    }
    GUIManager.Instance.HideUILock(EUILock.Research);
  }

  public void RecvTechnologyResearchCancel(MessagePacket MP)
  {
    byte x = MP.ReadByte();
    if (x == (byte) 0)
    {
      int num1 = (int) MP.ReadUShort();
      int num2 = (int) MP.ReadByte();
      GameConstants.GetBytes((ushort) 1, DataManager.msgBuffer, 0);
      this.CheckResearchTech = this.ResearchTech;
      this.ResearchTech = (ushort) 0;
      for (byte index = 0; (int) index < this.Resource.Length; ++index)
        this.Resource[(int) index].Stock = MP.ReadUInt();
      this.PetResource.Stock = MP.ReadUInt();
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0U);
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
      GameManager.OnRefresh(NetworkNews.Refresh_PetResource);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
      GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
      this.CheckResearchTech = (ushort) 0;
    }
    else
    {
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.IntToFormat((long) x);
      cstring.AppendFormat(this.mStringTable.GetStringByID(5045U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    }
    GUIManager.Instance.HideUILock(EUILock.Research);
  }

  public void RecvTechnologyComplete(MessagePacket MP)
  {
    ushort num1 = MP.ReadUShort();
    byte num2 = MP.ReadByte();
    byte num3 = 1;
    if ((int) this.GetTechLevel(num1) == (int) num2)
      num3 = (byte) 0;
    this.SetTechLevel(num1, num2);
    this.CheckResearchTech = this.ResearchTech;
    this.ResearchTech = (ushort) 0;
    byte num4 = 0;
    if (num3 == (byte) 1)
    {
      this.ShowTechnologyHUD(num1);
      DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num1, (ushort) num2);
    }
    this.TechnologySendFinish = (byte) 0;
    this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0U);
    GameConstants.GetBytes((ushort) num4, DataManager.msgBuffer, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
    GUIManager.Instance.HideUILock(EUILock.Research);
    GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
    this.CheckResearchTech = (ushort) 0;
    this.UpdateSaveTalent_Point();
    if (num1 != (ushort) 120)
      return;
    NewbieManager.CheckTroopMemory();
  }

  public void RecvTechnologyCompleteImmediate(MessagePacket MP)
  {
    byte x = MP.ReadByte();
    if (x <= (byte) 1)
    {
      byte num1 = 2;
      if (this.TechnologySendFinish == (byte) 1)
        num1 = (byte) 0;
      ushort num2 = MP.ReadUShort();
      byte num3 = MP.ReadByte();
      this.SetTechLevel(num2, num3);
      GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eTechnology);
      if (x == (byte) 0)
      {
        for (byte index = 0; (int) index < this.Resource.Length; ++index)
          this.Resource[(int) index].Stock = MP.ReadUInt();
        this.PetResource.Stock = MP.ReadUInt();
      }
      this.ShowTechnologyHUD(num2);
      DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num2, (ushort) num3);
      GameManager.OnRefresh();
      GameManager.OnRefresh(NetworkNews.Refresh_Resource);
      GameManager.OnRefresh(NetworkNews.Refresh_PetResource);
      GameConstants.GetBytes((ushort) num1, DataManager.msgBuffer, 0);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
      GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
      this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
      this.UpdateSaveTalent_Point();
      if (num2 == (ushort) 120)
        NewbieManager.CheckTroopMemory();
    }
    else if (x == (byte) 3)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7343U), (ushort) byte.MaxValue);
    }
    else
    {
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.IntToFormat((long) x);
      cstring.AppendFormat(this.mStringTable.GetStringByID(5045U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    }
    GUIManager.Instance.HideUILock(EUILock.Research);
  }

  public void ShowTechnologyHUD(ushort TechID)
  {
    TechDataTbl recordByKey = this.TechData.GetRecordByKey(TechID);
    CString cstring = StringManager.Instance.StaticString1024();
    cstring.IntToFormat((long) this.GetTechLevel(TechID));
    cstring.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.TechName));
    cstring.AppendFormat(this.mStringTable.GetStringByID(5031U));
    GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) 12);
    if (((int) this.GetTechLevel((ushort) 11) | (int) this.GetTechLevel((ushort) 12) | (int) this.GetTechLevel((ushort) 13)) <= 0)
      return;
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void sendTechnologyResearchStart(ushort TechID)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Research))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_START;
    messagePacket.AddSeqId();
    messagePacket.Add(TechID);
    messagePacket.Add((int) this.GetTechLevel(TechID) + 1);
    messagePacket.Send();
  }

  public void sendTechnologyCompleteFree()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Research))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_FREE;
    messagePacket.AddSeqId();
    messagePacket.Add(this.ResearchTech);
    messagePacket.Add((int) this.GetTechLevel(this.ResearchTech) + 1);
    messagePacket.Send();
  }

  public void sendTechnologyResearchCancel()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Research))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_CANCEL;
    messagePacket.AddSeqId();
    messagePacket.Add(this.ResearchTech);
    messagePacket.Add((int) this.GetTechLevel(this.ResearchTech) + 1);
    messagePacket.Send();
  }

  public void sendTechnologyResearchCompleteImmediate(ushort TechID = 0)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Research))
      return;
    if (TechID == (ushort) 0)
    {
      TechID = this.ResearchTech;
      this.TechnologySendFinish = (byte) 1;
    }
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_INSTANT;
    messagePacket.AddSeqId();
    messagePacket.Add(TechID);
    messagePacket.Add((int) this.GetTechLevel(TechID) + 1);
    messagePacket.Send();
  }

  public void InitTalentData()
  {
    this.TalentLevelMax = new ushort[this.TalentData.TableCount + 1];
    this.AllTalentData = new byte[100];
    this.ConsumeTalentPoint = new byte[(int) this.TalentData.MapCount][];
    Array.Clear((Array) this.TalentLevelMax, 0, this.TalentLevelMax.Length);
    ushort num = 0;
    for (ushort Index = 0; (int) Index < this.TalentData.TableCount; ++Index)
    {
      TalentTbl recordByIndex = this.TalentData.GetRecordByIndex((int) Index);
      num += (ushort) recordByIndex.LevelMax;
      this.TalentLevelMax[(int) recordByIndex.TalentID] = num;
      this.ConsumeTalentPoint[(int) recordByIndex.TalentID] = new byte[(int) recordByIndex.LevelMax + 1];
    }
    for (int Index = 0; Index < this.TalentLevel.TableCount; ++Index)
    {
      TalentLevelTbl recordByIndex = this.TalentLevel.GetRecordByIndex(Index);
      this.ConsumeTalentPoint[(int) recordByIndex.TalentID][(int) recordByIndex.Level] = recordByIndex.NeedPoint;
    }
    this.SaveTalentData = new DataManager._SaveTalentData[41];
    for (byte id = 0; (int) id < this.SaveTalentData.Length; ++id)
      this.SaveTalentData[(int) id].Initial(id);
    for (int index = 0; index < this.TalentAddQueue.Length; ++index)
      this.TalentAddQueue[index] = new DataManager._TalentUpdateQueue[3];
  }

  public bool GetTalentLevelupData(out TalentLevelTbl Data, ushort TalentID, byte Level)
  {
    if (TalentID == (ushort) 0)
    {
      Data = this.TalentLevel.GetRecordByIndex(0);
      return false;
    }
    ushort num = this.TalentLevelMax[(int) TalentID - 1];
    Data = this.TalentLevel.GetRecordByIndex((int) num + (int) Level - 1);
    return (int) Data.TalentID == (int) TalentID && (int) Data.Level == (int) Level;
  }

  public byte GetNeedTalentPoint(ushort TalentID, ref byte MaxLevel, byte SaveIndex = 0)
  {
    int needTalentPoint = 0;
    byte index = (byte) ((uint) this.GetTalentLevel(TalentID, SaveIndex) + 1U);
    ushort num = SaveIndex != (byte) 0 ? this.SaveTalentData[0].RoleTalentPoint : this.RoleTalentPoint;
    for (; (int) index <= (int) MaxLevel; ++index)
    {
      if ((int) num >= needTalentPoint + (int) this.ConsumeTalentPoint[(int) TalentID][(int) index])
      {
        needTalentPoint += (int) this.ConsumeTalentPoint[(int) TalentID][(int) index];
      }
      else
      {
        MaxLevel = (byte) ((uint) index - 1U);
        break;
      }
    }
    return (byte) needTalentPoint;
  }

  public byte GetTalentLevel(ushort TalentID, byte SaveIndex = 0)
  {
    if (TalentID == (ushort) 0 || TalentID > (ushort) 100)
      return 0;
    return SaveIndex == (byte) 0 ? this.AllTalentData[(int) TalentID - 1] : this.SaveTalentData[0].SaveTalentData[(int) TalentID - 1];
  }

  public void SetTalentLevel(ushort TalentID, byte newLv, byte SaveIndex = 0)
  {
    if (TalentID == (ushort) 0 || TalentID > (ushort) 100)
      return;
    if (SaveIndex == (byte) 0)
      this.AllTalentData[(int) TalentID - 1] = newLv;
    else
      this.SaveTalentData[0].SaveTalentData[(int) TalentID - 1] = newLv;
  }

  public byte CheckTalentState(ushort TalentID, byte SaveIndex = 0, byte addLevel = 1)
  {
    if (TalentID == (ushort) 0)
      return 1;
    byte num1 = 0;
    if (addLevel < (byte) 1)
      addLevel = (byte) 1;
    byte talentLevel = this.GetTalentLevel(TalentID, SaveIndex);
    if (talentLevel > (byte) 0)
      num1 |= (byte) 2;
    ushort num2 = SaveIndex != (byte) 0 ? this.SaveTalentData[0].RoleTalentPoint : this.RoleTalentPoint;
    TalentTbl recordByKey = this.TalentData.GetRecordByKey(TalentID);
    int num3 = 0;
    for (int index = 1; index <= (int) addLevel && (int) recordByKey.LevelMax >= (int) talentLevel + index; ++index)
      num3 += (int) this.ConsumeTalentPoint[(int) TalentID][(int) talentLevel + index];
    byte num4 = (byte) ((uint) talentLevel + (uint) addLevel);
    if ((int) recordByKey.LevelMax < (int) num4)
      num1 |= (byte) 16;
    else if (num3 > (int) num2)
      num1 |= (byte) 8;
    if ((int) this.GetTalentLevel(recordByKey.NeedTalentID, SaveIndex) < (int) recordByKey.NeedTalentLv)
      num1 |= (byte) 5;
    return num1;
  }

  public void sendAddTalentLevelQueue(ushort TalentID, byte Addlv = 1, byte Type = 0)
  {
    if (this.RoleTalentPoint == (ushort) 0 || (int) this.TalentQueueCount >= this.TalentAddQueue[(int) this.CehckSendIdx].Length)
      return;
    byte talentLevel = this.GetTalentLevel(TalentID, (byte) 0);
    for (byte index = 1; (int) index <= (int) Addlv; ++index)
    {
      if ((int) talentLevel + (int) index < this.ConsumeTalentPoint[(int) TalentID].Length && (int) this.RoleTalentPoint >= (int) this.ConsumeTalentPoint[(int) TalentID][(int) talentLevel + (int) index])
      {
        this.RoleTalentPoint -= (ushort) this.ConsumeTalentPoint[(int) TalentID][(int) talentLevel + (int) index];
      }
      else
      {
        Addlv = (byte) ((uint) index - 1U);
        break;
      }
    }
    bool flag = false;
    for (byte index = 0; (int) index < (int) this.TalentQueueCount; ++index)
    {
      if ((int) this.TalentAddQueue[(int) this.CehckSendIdx][(int) index].TalentID == (int) TalentID)
      {
        this.TalentAddQueue[(int) this.CehckSendIdx][(int) index].AddLevel += Addlv;
        this.TalentAddQueue[(int) this.CehckSendIdx][(int) index].Type = Type;
        flag = true;
        break;
      }
    }
    if (!flag && Addlv > (byte) 0)
    {
      this.TalentAddQueue[(int) this.CehckSendIdx][(int) this.TalentQueueCount].TalentID = TalentID;
      this.TalentAddQueue[(int) this.CehckSendIdx][(int) this.TalentQueueCount].Type = Type;
      this.TalentAddQueue[(int) this.CehckSendIdx][(int) this.TalentQueueCount++].AddLevel = Addlv;
    }
    this.SetTalentLevel(TalentID, (byte) ((uint) this.GetTalentLevel(TalentID, (byte) 0) + (uint) Addlv), (byte) 0);
    if (this.TalentQueueCount == (byte) 3)
      this.CheckTalentSend();
    GameManager.OnRefresh(NetworkNews.Refresh_Technology);
  }

  public void sendTalentSaveQueue(ushort TalentID, byte SaveIndex, byte Addlv = 1, byte Type = 0)
  {
    bool flag = false;
    for (byte index = 0; (int) index < (int) this.TalentSaveQueueCount; ++index)
    {
      if ((int) this.TalentSaveQueue[(int) index].TalentID == (int) TalentID)
      {
        this.TalentSaveQueue[(int) index].AddLevel += Addlv;
        flag = true;
        break;
      }
    }
    if (!flag)
    {
      this.TalentSaveQueue[(int) this.TalentSaveQueueCount].TalentID = TalentID;
      this.TalentSaveQueue[(int) this.TalentSaveQueueCount++].AddLevel = Addlv;
    }
    byte talentLevel = this.GetTalentLevel(TalentID, SaveIndex);
    this.SetTalentLevel(TalentID, (byte) ((uint) this.GetTalentLevel(TalentID, SaveIndex) + (uint) Addlv), SaveIndex);
    for (byte index = 1; (int) index <= (int) Addlv; ++index)
      this.SaveTalentData[0].RoleTalentPoint -= (ushort) this.ConsumeTalentPoint[(int) TalentID][(int) talentLevel + (int) index];
    if (Type == (byte) 4)
    {
      CString cstring = StringManager.Instance.StaticString1024();
      cstring.StringToFormat(this.mStringTable.GetStringByID((uint) this.TalentData.GetRecordByKey(TalentID).NameID));
      cstring.IntToFormat((long) this.GetTalentLevel(TalentID, SaveIndex));
      cstring.AppendFormat(this.mStringTable.GetStringByID(10027U));
      GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Technology);
  }

  public void CheckTalentSend()
  {
    if (this.TalentQueueCount <= (byte) 0)
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_TALENT_LEVEL_ADD;
    messagePacket.AddSeqId();
    messagePacket.Add(this.TalentQueueCount);
    for (byte index = 0; (int) index < (int) this.TalentQueueCount; ++index)
    {
      messagePacket.Add(this.TalentAddQueue[(int) this.CehckSendIdx][(int) index].TalentID);
      messagePacket.Add(this.TalentAddQueue[(int) this.CehckSendIdx][(int) index].AddLevel);
    }
    messagePacket.Send();
    this.CheckSendCount[(int) this.CehckSendIdx] = this.TalentQueueCount;
    this.CehckSendIdx = (byte) ((uint) ++this.CehckSendIdx & 3U);
    if ((int) this.CehckSendIdx == (int) this.CheckRecvIdx)
      GUIManager.Instance.ShowUILock(EUILock.Research);
    this.TalentQueueCount = (byte) 0;
  }

  public void CloneTalentSave(byte SourceIdx, byte TargetIdx)
  {
    if ((int) this.SaveTalentData[(int) TargetIdx].SaveIndex == (int) this.SaveTalentData[(int) SourceIdx].SaveIndex)
      return;
    this.SaveTalentData[(int) TargetIdx].RoleTalentPoint = this.SaveTalentData[(int) SourceIdx].RoleTalentPoint;
    this.SaveTalentData[(int) TargetIdx].NoUseTalent = this.SaveTalentData[(int) SourceIdx].NoUseTalent;
    this.SaveTalentData[(int) TargetIdx].TagName.ClearString();
    this.SaveTalentData[(int) TargetIdx].TagName.Append(this.SaveTalentData[(int) SourceIdx].TagName);
    this.SaveTalentData[(int) TargetIdx].DefaultTagName.ClearString();
    this.SaveTalentData[(int) TargetIdx].DefaultTagName.Append(this.SaveTalentData[(int) SourceIdx].DefaultTagName);
    Buffer.BlockCopy((Array) this.SaveTalentData[(int) SourceIdx].SaveTalentData, 0, (Array) this.SaveTalentData[(int) TargetIdx].SaveTalentData, 0, 100);
    this.TalentSaveQueueCount = (byte) 0;
    this.TalentSaveZero = (byte) 1;
  }

  public int CompareTalentSave(byte SaveSlot)
  {
    if (this.TalentSaveZero == (byte) 0)
    {
      int roleTalentPoint1 = (int) this.SaveTalentData[0].RoleTalentPoint;
      int roleTalentPoint2 = (int) this.SaveTalentData[(int) SaveSlot].RoleTalentPoint;
      for (int index1 = 0; index1 < this.SaveTalentData[0].SaveTalentData.Length; ++index1)
      {
        for (int index2 = 1; index2 <= (int) this.SaveTalentData[0].SaveTalentData[index1]; ++index2)
          roleTalentPoint1 += (int) this.ConsumeTalentPoint[index1 + 1][index2];
      }
      for (int index3 = 0; index3 < this.SaveTalentData[(int) SaveSlot].SaveTalentData.Length; ++index3)
      {
        for (int index4 = 1; index4 <= (int) this.SaveTalentData[(int) SaveSlot].SaveTalentData[index3]; ++index4)
          roleTalentPoint2 += (int) this.ConsumeTalentPoint[index3 + 1][index4];
      }
      if (roleTalentPoint1 < roleTalentPoint2)
      {
        this.SaveTalentData[0].RoleTalentPoint += (ushort) (roleTalentPoint2 - roleTalentPoint1);
        return 2;
      }
    }
    else
    {
      for (int index5 = 0; index5 < this.SaveTalentData[0].SaveTalentData.Length; ++index5)
      {
        if ((int) this.SaveTalentData[0].SaveTalentData[index5] != (int) this.SaveTalentData[(int) SaveSlot].SaveTalentData[index5])
        {
          for (byte index6 = 0; (int) index6 < (int) this.TalentSaveQueueCount; ++index6)
          {
            if ((int) this.TalentSaveQueue[(int) index6].TalentID - 1 == index5)
            {
              if ((int) this.SaveTalentData[0].SaveTalentData[index5] - (int) this.TalentSaveQueue[(int) index6].AddLevel != (int) this.SaveTalentData[(int) SaveSlot].SaveTalentData[index5])
                return 1;
              break;
            }
          }
        }
      }
    }
    return 0;
  }

  public void ClearCurTalentSave()
  {
    this.TalentSaveZero = (byte) 0;
    this.TalentSaveQueueCount = (byte) 0;
    for (int index1 = 0; index1 < this.SaveTalentData[0].SaveTalentData.Length; ++index1)
    {
      if (this.SaveTalentData[0].SaveTalentData[index1] != (byte) 0)
      {
        for (int index2 = 1; index2 <= (int) this.SaveTalentData[0].SaveTalentData[index1]; ++index2)
          this.SaveTalentData[0].RoleTalentPoint += (ushort) this.ConsumeTalentPoint[index1 + 1][index2];
      }
    }
    Array.Clear((Array) this.SaveTalentData[0].SaveTalentData, 0, this.SaveTalentData[0].SaveTalentData.Length);
    this.SaveTalentData[0].NoUseTalent = (byte) 1;
  }

  public void RecvTalentInfo(MessagePacket MP)
  {
    this.RoleTalentPoint = MP.ReadUShort();
    MP.ReadBlock(this.AllTalentData, 0, 100);
    this.NoUseTalent = (byte) 1;
    for (int index = 0; index < 100; ++index)
    {
      if (this.AllTalentData[index] > (byte) 0)
      {
        this.NoUseTalent = (byte) 0;
        break;
      }
    }
    if (this.TalentQueueCount > (byte) 0)
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1503U), (ushort) byte.MaxValue);
      this.TalentQueueCount = (byte) 0;
    }
    Array.Clear((Array) this.CheckSendCount, 0, this.CheckSendCount.Length);
    this.CehckSendIdx = this.CheckRecvIdx = (byte) 0;
    GameConstants.GetBytes((ushort) 0, DataManager.msgBuffer, 0);
    this.AttribVal.UpdateTalentData();
    GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13);
  }

  public void RecvTalentSave(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    for (byte index1 = 0; (int) index1 < (int) num2; ++index1)
    {
      int index2 = (int) index1 + (int) this.RecvSaveIndexStart + 1;
      if (index2 < this.SaveTalentData.Length)
        this.SaveTalentData[index2].InitSaveTalentData(MP);
      else
        break;
    }
    if (num1 == (byte) 0)
    {
      this.RecvSaveIndexStart = (byte) 0;
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Talent, -4);
    }
    else
      this.RecvSaveIndexStart += num2;
  }

  public void RecvTalentSavePointIncreased(MessagePacket MP)
  {
    int num = (int) MP.ReadByte();
    this.tmpRoleTotalTalent = MP.ReadUShort();
  }

  public void RecvTalentAdd(MessagePacket MP)
  {
    if (MP.ReadByte() > (byte) 0)
    {
      for (byte index1 = 0; (int) index1 < (int) this.CheckSendCount[(int) this.CheckRecvIdx]; ++index1)
      {
        byte talentLevel = this.GetTalentLevel(this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index1].TalentID, (byte) 0);
        for (int index2 = 0; index2 < (int) this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index1].AddLevel; ++index2)
        {
          if ((int) talentLevel >= index2)
            this.RoleTalentPoint += (ushort) this.ConsumeTalentPoint[(int) this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index1].TalentID][(int) talentLevel - index2];
        }
        byte newLv = (byte) ((uint) talentLevel - (uint) this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index1].AddLevel);
        this.SetTalentLevel(this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index1].TalentID, newLv, (byte) 0);
      }
      this.CheckSendCount[(int) this.CheckRecvIdx] = (byte) 0;
      this.CheckRecvIdx = (byte) ((uint) ++this.CheckRecvIdx & 3U);
      GameManager.OnRefresh(NetworkNews.Refresh_Technology);
    }
    else
    {
      ushort num1 = MP.ReadUShort();
      ushort num2 = 0;
      ushort num3 = 0;
      byte num4 = MP.ReadByte();
      for (byte index3 = 0; (int) index3 < (int) num4; ++index3)
      {
        ushort num5 = MP.ReadUShort();
        byte num6 = MP.ReadByte();
        byte num7 = 0;
        for (int index4 = 0; index4 < (int) this.TalentQueueCount; ++index4)
        {
          if (index3 == (byte) 0)
          {
            byte talentLevel = this.GetTalentLevel(this.TalentAddQueue[(int) this.CehckSendIdx][index4].TalentID, (byte) 0);
            for (int index5 = 0; index5 < (int) this.TalentAddQueue[(int) this.CehckSendIdx][index4].AddLevel; ++index5)
            {
              if ((int) talentLevel >= index5)
                num2 += (ushort) this.ConsumeTalentPoint[(int) this.TalentAddQueue[(int) this.CehckSendIdx][index4].TalentID][(int) talentLevel - index5];
            }
            num3 = num2;
          }
          if ((int) this.TalentAddQueue[(int) this.CehckSendIdx][index4].TalentID == (int) num5)
            num7 += this.TalentAddQueue[(int) this.CehckSendIdx][index4].AddLevel;
        }
        for (int index6 = 0; index6 < this.CheckSendCount.Length; ++index6)
        {
          if (index6 != (int) this.CehckSendIdx && index6 != (int) this.CheckRecvIdx && this.CheckSendCount[index6] != (byte) 0)
          {
            for (int index7 = 0; index7 < (int) this.CheckSendCount[index6]; ++index7)
            {
              if (index3 == (byte) 0)
              {
                byte talentLevel = this.GetTalentLevel(this.TalentAddQueue[index6][index7].TalentID, (byte) 0);
                for (int index8 = 0; index8 < (int) this.TalentAddQueue[index6][index7].AddLevel; ++index8)
                {
                  if ((int) talentLevel >= index8)
                    num2 += (ushort) this.ConsumeTalentPoint[(int) this.TalentAddQueue[index6][index7].TalentID][(int) talentLevel - index8];
                }
              }
              if ((int) this.TalentAddQueue[index6][index7].TalentID == (int) num5)
                num7 += this.TalentAddQueue[index6][index7].AddLevel;
            }
          }
        }
        if ((int) num6 + (int) num7 != (int) this.GetTalentLevel(num5, (byte) 0))
          this.SetTalentLevel(num5, num6, (byte) 0);
        for (byte index9 = 0; (int) index9 < (int) this.CheckSendCount[(int) this.CheckRecvIdx]; ++index9)
        {
          if ((int) this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index9].TalentID == (int) num5)
          {
            if (this.TalentAddQueue[(int) this.CheckRecvIdx][(int) index9].Type == (byte) 4)
            {
              CString cstring = StringManager.Instance.StaticString1024();
              cstring.StringToFormat(this.mStringTable.GetStringByID((uint) this.TalentData.GetRecordByKey(num5).NameID));
              cstring.IntToFormat((long) num6);
              cstring.AppendFormat(this.mStringTable.GetStringByID(10027U));
              GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
              break;
            }
            break;
          }
        }
      }
      if ((int) num1 != (int) this.RoleTalentPoint + (int) num2)
        this.RoleTalentPoint = (ushort) ((uint) num1 - (uint) num3);
      this.NoUseTalent = (byte) 0;
      this.CheckSendCount[(int) this.CheckRecvIdx] = (byte) 0;
      this.CheckRecvIdx = (byte) ((uint) ++this.CheckRecvIdx & 3U);
      this.AttribVal.UpdateTalentData();
      GameManager.OnRefresh(NetworkNews.Refresh_Technology);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13);
    }
  }

  public void UpdateSaveTalent_Point(bool bAdd = false)
  {
    if (this.tmpRoleTotalTalent == (ushort) 0)
      return;
    uint effectBaseVal = this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_QUICK_TALENT_SET);
    for (uint index = 0; index <= effectBaseVal; ++index)
    {
      if (!bAdd)
      {
        if (this.SaveTalentData[(IntPtr) index].NoUseTalent == (byte) 1)
          this.SaveTalentData[(IntPtr) index].RoleTalentPoint = this.tmpRoleTotalTalent;
      }
      else
        this.SaveTalentData[(IntPtr) index].RoleTalentPoint += this.tmpRoleTotalTalent;
    }
    this.tmpRoleTotalTalent = (ushort) 0;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_TalentSave, 1);
  }

  public void SpeedupRally(ushort itemID, ushort targetID, CString name = null)
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.AddSeqId();
    messagePacket.Add(itemID);
    messagePacket.Add(targetID);
    if (name != null)
      messagePacket.Add(name.ToString(), 13);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RALLYATKSPEEDUP;
    messagePacket.Send();
  }

  public void RecvInitWatchTowerInfo(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    if (!this.bReSetWTD)
    {
      this.m_WatchTowerData.Clear();
      this.tmp_WatchTowerData.Clear();
      this.WatchTowerDataCount = 0U;
      this.bReSetWTD = true;
    }
    WatchTowerData watchTowerData = new WatchTowerData();
    for (int index = 0; index < (int) num; ++index)
    {
      watchTowerData.tmpIdx = (uint) index;
      watchTowerData.LineID = MP.ReadUInt();
      watchTowerData.LineType = MP.ReadByte();
      watchTowerData.Index = MP.ReadByte();
      watchTowerData.MarchTimeData.BeginTime = MP.ReadLong();
      watchTowerData.MarchTimeData.RequireTime = MP.ReadUInt();
      this.tmp_WatchTowerData.Add(watchTowerData);
    }
  }

  public void RecvInitWatchTowerInfoEnd(MessagePacket MP)
  {
    this.tmp_WatchTowerData.Sort((IComparer<WatchTowerData>) this.mWatchTowerComparer_LindID);
    WatchTowerData watchTowerData = new WatchTowerData();
    this.m_WatchTowerData.Clear();
    WatchTowerSortData watchTowerSortData1 = new WatchTowerSortData();
    for (int index = 0; index < this.tmp_WatchTowerData.Count; ++index)
    {
      watchTowerSortData1.ListIdx = (uint) index;
      watchTowerSortData1.LineType = this.tmp_WatchTowerData[index].LineType;
      this.m_WatchTowerData.Add(watchTowerSortData1);
    }
    byte num = MP.ReadByte();
    for (int index = 0; index < (int) num && index < this.MarchEventTime.Length; ++index)
    {
      watchTowerData.tmpIdx = (uint) index;
      watchTowerData.LineID = (uint) MP.ReadByte();
      ++watchTowerData.LineID;
      watchTowerData.Index = (byte) watchTowerData.LineID;
      watchTowerData.LineType = (byte) 0;
      watchTowerData.MarchTimeData.BeginTime = this.MarchEventTime[index].BeginTime;
      watchTowerData.MarchTimeData.RequireTime = this.MarchEventTime[index].RequireTime;
      this.mtmpIdx[index] = watchTowerData;
      watchTowerSortData1.ListIdx = (uint) watchTowerData.Index;
      watchTowerSortData1.LineType = (byte) 0;
      this.m_WatchTowerData.Add(watchTowerSortData1);
    }
    if (num < (byte) 8)
    {
      for (int index = (int) num; index < 8; ++index)
      {
        watchTowerData.Index = (byte) 0;
        this.mtmpIdx[index] = watchTowerData;
      }
    }
    GUIManager.Instance.RemoveAllAttackState();
    this.m_WatchTowerData.Sort((IComparer<WatchTowerSortData>) this.mWatchTowerComparer);
    for (int index = 0; index < this.m_WatchTowerData.Count; ++index)
    {
      WatchTowerSortData watchTowerSortData2 = this.m_WatchTowerData[index] with
      {
        tmpIdx = (uint) index
      };
      this.m_WatchTowerData[index] = watchTowerSortData2;
      if (this.m_WatchTowerData[index].LineType != (byte) 0)
      {
        int listIdx = (int) this.m_WatchTowerData[index].ListIdx;
        watchTowerData = this.tmp_WatchTowerData[listIdx] with
        {
          tmpIdx = (uint) index
        };
        this.tmp_WatchTowerData[listIdx] = watchTowerData;
        bool flag = false;
        if (this.tmp_WatchTowerData[listIdx].Index >= (byte) 0 && this.tmp_WatchTowerData[listIdx].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[listIdx].Index].PointKind == POINT_KIND.PK_YOLK)
          flag = true;
        switch (this.m_WatchTowerData[index].LineType)
        {
          case 5:
          case 7:
            if (!flag)
            {
              if (this.tmp_WatchTowerData[listIdx].Index == byte.MaxValue)
              {
                GUIManager.Instance.AddAttackState(EAttackKind.Attack);
                continue;
              }
              GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
              continue;
            }
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Attack);
            continue;
          case 6:
            GUIManager.Instance.AddAttackState(EAttackKind.Cantonment);
            continue;
          case 8:
            if (!flag)
            {
              if (this.tmp_WatchTowerData[listIdx].Index == byte.MaxValue)
              {
                GUIManager.Instance.AddAttackState(EAttackKind.Detect);
                continue;
              }
              GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
              continue;
            }
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Detect);
            continue;
          case 10:
            if (!flag)
            {
              GUIManager.Instance.AddAttackState(EAttackKind.Reinforce);
              continue;
            }
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Reinforce);
            continue;
          case 11:
            GUIManager.Instance.AddAttackState(EAttackKind.Gather);
            continue;
          case 12:
            if (!flag)
            {
              GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
              continue;
            }
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_GatherAttack);
            continue;
          case 13:
            GUIManager.Instance.AddAttackState(EAttackKind.Supplies);
            continue;
          case 22:
            GUIManager.Instance.AddAttackState(EAttackKind.PetAttack);
            continue;
          default:
            continue;
        }
      }
      else
      {
        int listIdx = (int) this.m_WatchTowerData[index].ListIdx;
        watchTowerData = this.mtmpIdx[listIdx - 1] with
        {
          tmpIdx = (uint) index
        };
        this.mtmpIdx[listIdx - 1] = watchTowerData;
        GUIManager.Instance.AddAttackState(EAttackKind.Conflict);
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
  }

  public void RecvUpDateWatchTowerAddLine(MessagePacket MP)
  {
    WatchTowerData watchTowerData = new WatchTowerData();
    WatchTowerSortData watchTowerSortData1 = new WatchTowerSortData();
    watchTowerData.LineID = MP.ReadUInt();
    watchTowerData.LineType = MP.ReadByte();
    watchTowerData.Index = MP.ReadByte();
    watchTowerData.MarchTimeData.BeginTime = MP.ReadLong();
    watchTowerData.MarchTimeData.RequireTime = MP.ReadUInt();
    EWATCHTOWER_LINE_TARGET ewatchtowerLineTarget = (EWATCHTOWER_LINE_TARGET) MP.ReadByte();
    int num = this.tmp_WatchTowerData.BinarySearch(watchTowerData, (IComparer<WatchTowerData>) this.mWatchTowerComparer_LindID);
    if (num >= 0)
      return;
    watchTowerData.tmpIdx = (uint) this.m_WatchTowerData.Count;
    bool flag = false;
    if (this.m_WatchTowerData.Count > ~num && this.tmp_WatchTowerData.Count > 0)
      flag = true;
    this.tmp_WatchTowerData.Insert(~num, watchTowerData);
    watchTowerSortData1.tmpIdx = (uint) this.m_WatchTowerData.Count;
    watchTowerSortData1.ListIdx = (uint) ~num;
    watchTowerSortData1.LineType = watchTowerData.LineType;
    this.m_WatchTowerData.Add(watchTowerSortData1);
    if (flag)
    {
      for (int index = this.m_WatchTowerData.Count - 2; index >= 0; --index)
      {
        if (this.m_WatchTowerData[index].LineType != (byte) 0)
        {
          WatchTowerSortData watchTowerSortData2 = this.m_WatchTowerData[index];
          if ((long) watchTowerSortData2.ListIdx >= (long) ~num)
          {
            ++watchTowerSortData2.ListIdx;
            this.m_WatchTowerData[index] = watchTowerSortData2;
          }
        }
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
    switch (watchTowerData.LineType)
    {
      case 5:
      case 7:
        switch (ewatchtowerLineTarget)
        {
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4005U), (ushort) 19);
            GUIManager.Instance.AddAttackState(EAttackKind.Attack);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAMP:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4004U), (ushort) 19);
            GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9753U), (ushort) 19);
            GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Attack);
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) (ewatchtowerLineTarget - (byte) 3), (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8545U));
            GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
            break;
        }
        break;
      case 6:
        switch (ewatchtowerLineTarget)
        {
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9743U), (ushort) 19);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) (ewatchtowerLineTarget - (byte) 3), (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9917U));
            GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
            break;
        }
        GUIManager.Instance.AddAttackState(EAttackKind.Cantonment);
        break;
      case 8:
        switch (ewatchtowerLineTarget)
        {
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
            GUIManager.Instance.AddAttackState(EAttackKind.Detect);
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4006U), (ushort) 19);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAMP:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4878U), (ushort) 19);
            GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9763U), (ushort) 19);
            GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Detect);
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) (ewatchtowerLineTarget - (byte) 3), (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8546U));
            GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
            break;
        }
        break;
      case 10:
        switch (ewatchtowerLineTarget)
        {
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
            GUIManager.Instance.AddAttackState(EAttackKind.Reinforce);
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4007U), (ushort) 19);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Reinforce);
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) (ewatchtowerLineTarget - (byte) 3), (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8547U));
            GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
            break;
        }
        break;
      case 11:
        GUIManager.Instance.AddAttackState(EAttackKind.Gather);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4008U), (ushort) 19);
        break;
      case 12:
        switch (ewatchtowerLineTarget)
        {
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
            GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4984U), (ushort) 19);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
            GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9762U), (ushort) 19);
            break;
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
          case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
            GUIManager.Instance.AddAttackState(EAttackKind.Wonder_GatherAttack);
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) (ewatchtowerLineTarget - (byte) 3), (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8544U));
            GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
            break;
        }
        break;
      case 13:
        GUIManager.Instance.AddAttackState(EAttackKind.Supplies);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4003U), (ushort) 19);
        break;
      case 22:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12099U), (ushort) 19);
        GUIManager.Instance.AddAttackState(EAttackKind.PetAttack);
        break;
    }
    AudioManager.Instance.PlayUISFX(UIKind.WarHorn);
  }

  public void RecvUpDateWatchTowerDelLine(MessagePacket MP)
  {
    uint num1 = MP.ReadUInt();
    WatchTowerData watchTowerData1 = new WatchTowerData();
    WatchTowerSortData watchTowerSortData1 = new WatchTowerSortData();
    watchTowerData1.LineID = num1;
    int num2 = this.tmp_WatchTowerData.BinarySearch(watchTowerData1, (IComparer<WatchTowerData>) this.mWatchTowerComparer_LindID);
    if (num2 < 0)
      return;
    int index1 = num2;
    if (this.tmp_WatchTowerData.Count <= index1)
      return;
    WatchTowerData watchTowerData2;
    for (int index2 = this.m_WatchTowerData.Count - 1; index2 >= 0; --index2)
    {
      if (this.m_WatchTowerData[index2].LineType != (byte) 0)
      {
        int listIdx = (int) this.m_WatchTowerData[index2].ListIdx;
        if (this.tmp_WatchTowerData[listIdx].tmpIdx > this.tmp_WatchTowerData[index1].tmpIdx)
        {
          watchTowerData2 = this.tmp_WatchTowerData[listIdx];
          --watchTowerData2.tmpIdx;
          this.tmp_WatchTowerData[listIdx] = watchTowerData2;
        }
        if (listIdx > index1)
        {
          WatchTowerSortData watchTowerSortData2 = this.m_WatchTowerData[index2];
          --watchTowerSortData2.ListIdx;
          this.m_WatchTowerData[index2] = watchTowerSortData2;
        }
      }
      else
      {
        int listIdx = (int) this.m_WatchTowerData[index2].ListIdx;
        if (this.mtmpIdx[listIdx - 1].tmpIdx > this.tmp_WatchTowerData[index1].tmpIdx)
        {
          watchTowerData2 = this.mtmpIdx[listIdx - 1];
          --watchTowerData2.tmpIdx;
          this.mtmpIdx[listIdx - 1] = watchTowerData2;
        }
      }
    }
    bool flag = false;
    if (this.tmp_WatchTowerData[index1].Index >= (byte) 0 && this.tmp_WatchTowerData[index1].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[index1].Index].PointKind == POINT_KIND.PK_YOLK)
      flag = true;
    switch (this.tmp_WatchTowerData[index1].LineType)
    {
      case 5:
      case 7:
        if (!flag)
        {
          if (this.tmp_WatchTowerData[index1].Index == byte.MaxValue)
          {
            GUIManager.Instance.RemoveAttackState(EAttackKind.Attack);
            break;
          }
          GUIManager.Instance.RemoveAttackState(EAttackKind.None_Attack);
          break;
        }
        GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Attack);
        break;
      case 6:
        GUIManager.Instance.RemoveAttackState(EAttackKind.Cantonment);
        break;
      case 8:
        if (!flag)
        {
          if (this.tmp_WatchTowerData[index1].Index == byte.MaxValue)
          {
            GUIManager.Instance.RemoveAttackState(EAttackKind.Detect);
            break;
          }
          GUIManager.Instance.RemoveAttackState(EAttackKind.None_Detect);
          break;
        }
        GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Detect);
        break;
      case 10:
        if (!flag)
        {
          GUIManager.Instance.RemoveAttackState(EAttackKind.Reinforce);
          break;
        }
        GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Reinforce);
        break;
      case 11:
        GUIManager.Instance.RemoveAttackState(EAttackKind.Gather);
        break;
      case 12:
        if (!flag)
        {
          GUIManager.Instance.RemoveAttackState(EAttackKind.GatherAttack);
          break;
        }
        GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_GatherAttack);
        break;
      case 13:
        GUIManager.Instance.RemoveAttackState(EAttackKind.Supplies);
        break;
      case 22:
        GUIManager.Instance.RemoveAttackState(EAttackKind.PetAttack);
        break;
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower_Details, 3, index1);
    if (this.m_WTList_Idx != 0 && (long) this.tmp_WatchTowerData[index1].tmpIdx < (long) this.m_WTList_Idx)
      --this.m_WTList_Idx;
    else if ((long) this.m_WTList_Idx == (long) this.tmp_WatchTowerData[index1].tmpIdx)
      this.m_WTList_Idx = -1;
    if ((long) this.tmp_WatchTowerData[index1].tmpIdx < (long) this.m_WatchTowerData.Count)
      this.m_WatchTowerData.RemoveAt((int) this.tmp_WatchTowerData[index1].tmpIdx);
    this.tmp_WatchTowerData.RemoveAt(index1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
  }

  public void RecvUpDateWatchTowerUpDateLine(MessagePacket MP)
  {
    uint num1 = MP.ReadUInt();
    int num2 = this.tmp_WatchTowerData.BinarySearch(new WatchTowerData()
    {
      LineID = num1
    }, (IComparer<WatchTowerData>) this.mWatchTowerComparer_LindID);
    if (num2 < 0)
      return;
    int index = num2;
    WatchTowerData watchTowerData = this.tmp_WatchTowerData[index];
    watchTowerData.MarchTimeData.BeginTime = MP.ReadLong();
    watchTowerData.MarchTimeData.RequireTime = MP.ReadUInt();
    this.tmp_WatchTowerData[index] = watchTowerData;
    bool flag = false;
    GUIManager.Instance.MsgStr.ClearString();
    if (this.tmp_WatchTowerData[index].Index >= (byte) 0 && this.tmp_WatchTowerData[index].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].PointKind == POINT_KIND.PK_YOLK)
      flag = true;
    switch (this.tmp_WatchTowerData[index].LineType)
    {
      case 5:
        if (this.tmp_WatchTowerData[index].Index == byte.MaxValue)
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5871U));
          break;
        }
        if (!flag)
        {
          if (this.tmp_WatchTowerData[index].Index >= (byte) 0 && this.tmp_WatchTowerData[index].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].IsAmbushCamp())
          {
            GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9761U));
            break;
          }
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5872U));
          break;
        }
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].DesPointLevel, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8552U));
        break;
      case 6:
        if (!flag)
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9745U));
          break;
        }
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].DesPointLevel, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9924U));
        break;
      case 7:
        GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5872U));
        break;
      case 8:
        if (this.tmp_WatchTowerData[index].Index == byte.MaxValue)
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5875U));
          break;
        }
        if (!flag)
        {
          if (this.tmp_WatchTowerData[index].Index >= (byte) 0 && this.tmp_WatchTowerData[index].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].IsAmbushCamp())
          {
            GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9767U));
            break;
          }
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5874U));
          break;
        }
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].DesPointLevel, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8553U));
        break;
      case 10:
        if (!flag)
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5877U));
          break;
        }
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].DesPointLevel, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8554U));
        break;
      case 11:
        GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5876U));
        break;
      case 12:
        if (this.tmp_WatchTowerData[index].Index == byte.MaxValue)
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5870U));
          break;
        }
        if (flag)
        {
          GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].DesPointLevel, (ushort) 0));
          GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8557U));
          break;
        }
        if (this.tmp_WatchTowerData[index].Index >= (byte) 0 && this.tmp_WatchTowerData[index].Index <= (byte) 7 && this.MarchEventData[(int) this.tmp_WatchTowerData[index].Index].IsAmbushCamp())
        {
          GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9766U));
          break;
        }
        break;
      case 13:
        GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5878U));
        break;
    }
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 19);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 3, (int) this.tmp_WatchTowerData[index].tmpIdx);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower_Details, 2, index);
  }

  public void RecvAddConflictLine(MessagePacket MP)
  {
    WatchTowerData watchTowerData = new WatchTowerData();
    WatchTowerSortData watchTowerSortData = new WatchTowerSortData();
    byte index = MP.ReadByte();
    if (index < (byte) 0 || (int) index >= this.mtmpIdx.Length)
      return;
    watchTowerData.tmpIdx = (uint) this.m_WatchTowerData.Count;
    watchTowerData.LineID = (uint) index + 1U;
    watchTowerData.Index = (byte) ((uint) index + 1U);
    watchTowerData.LineType = (byte) 0;
    watchTowerData.MarchTimeData.BeginTime = this.MarchEventTime[(int) index].BeginTime;
    watchTowerData.MarchTimeData.RequireTime = this.MarchEventTime[(int) index].RequireTime;
    this.mtmpIdx[(int) index] = watchTowerData;
    watchTowerSortData.tmpIdx = (uint) this.m_WatchTowerData.Count;
    watchTowerSortData.ListIdx = (uint) watchTowerData.Index;
    watchTowerSortData.LineType = (byte) 0;
    this.m_WatchTowerData.Add(watchTowerSortData);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
    GUIManager.Instance.AddAttackState(EAttackKind.Conflict);
    AudioManager.Instance.PlayUISFX(UIKind.WarHorn);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3979U), (ushort) 19);
  }

  public void RecvDelConflictLine(MessagePacket MP)
  {
    WatchTowerData watchTowerData1 = new WatchTowerData();
    byte index1 = MP.ReadByte();
    if (index1 < (byte) 0 || (int) index1 >= this.mtmpIdx.Length)
      return;
    int tmpIdx = (int) this.mtmpIdx[(int) index1].tmpIdx;
    WatchTowerData watchTowerData2;
    for (int index2 = this.m_WatchTowerData.Count - 1; index2 >= 0; --index2)
    {
      if (this.m_WatchTowerData[index2].LineType != (byte) 0)
      {
        int listIdx = (int) this.m_WatchTowerData[index2].ListIdx;
        if ((long) this.tmp_WatchTowerData[listIdx].tmpIdx > (long) tmpIdx)
        {
          watchTowerData2 = this.tmp_WatchTowerData[listIdx];
          --watchTowerData2.tmpIdx;
          this.tmp_WatchTowerData[listIdx] = watchTowerData2;
        }
      }
      else
      {
        int listIdx = (int) this.m_WatchTowerData[index2].ListIdx;
        if ((long) this.mtmpIdx[listIdx - 1].tmpIdx > (long) tmpIdx)
        {
          watchTowerData2 = this.mtmpIdx[listIdx - 1];
          --watchTowerData2.tmpIdx;
          this.mtmpIdx[listIdx - 1] = watchTowerData2;
        }
      }
    }
    if (this.m_WTList_Idx != 0 && tmpIdx < this.m_WTList_Idx)
      --this.m_WTList_Idx;
    if (tmpIdx < 0 && this.m_WatchTowerData.Count == 0)
      return;
    this.m_WatchTowerData.RemoveAt(tmpIdx);
    GUIManager.Instance.RemoveAttackState(EAttackKind.Conflict);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
  }

  public void RecvWatchTowerLineDetail(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    int num2 = (int) MP.ReadByte();
    Array.Clear((Array) this.m_WT_TroopData, 0, this.m_WT_TroopData.Length);
    this.m_WT_WithSupremeLeader = (byte) 0;
    switch (num1)
    {
      case 5:
      case 6:
      case 7:
      case 12:
        this.m_WTInfo_Status = (int) num1 - 4;
        this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
        this.m_WT_Point.zoneID = MP.ReadUShort();
        this.m_WT_Point.pointID = MP.ReadByte();
        this.m_WT_Name = MP.ReadString(13);
        this.m_WT_AllianceName = MP.ReadString(3);
        this.m_WT_MH = MP.ReadUShort();
        this.m_WT_TroopTotal = 0U;
        this.m_WT_TotalForce = MP.ReadUInt();
        this.m_WT_HeroNum = MP.ReadByte();
        this.m_WT_TrooFlag = MP.ReadUShort();
        this.m_WT_WithSupremeLeader = MP.ReadByte();
        for (int index = 0; index < 16; ++index)
        {
          this.m_WT_TroopData[index] = MP.ReadUInt();
          this.m_WT_TroopTotal += this.m_WT_TroopData[index];
        }
        for (int index = 0; index < 5; ++index)
          this.m_WT_HeroID[index] = MP.ReadUShort();
        for (int index = 0; index < 5; ++index)
        {
          this.m_WT_HeroRank[index].Rank = MP.ReadByte();
          this.m_WT_HeroRank[index].Medal = MP.ReadByte();
        }
        this.m_WT_KingdomID = MP.ReadUShort();
        break;
      case 8:
      case 13:
        this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
        this.m_WT_Point.zoneID = MP.ReadUShort();
        this.m_WT_Point.pointID = MP.ReadByte();
        this.m_WT_Name = MP.ReadString(13);
        this.m_WT_AllianceName = MP.ReadString(3);
        this.m_WT_MH = MP.ReadUShort();
        this.m_WT_KingdomID = MP.ReadUShort();
        break;
      case 10:
      case 11:
        this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
        this.m_WT_Point.zoneID = MP.ReadUShort();
        this.m_WT_Point.pointID = MP.ReadByte();
        this.m_WT_Name = MP.ReadString(13);
        this.m_WT_AllianceName = MP.ReadString(3);
        this.m_WT_MH = MP.ReadUShort();
        this.m_WT_TroopTotal = 0U;
        this.m_WT_TotalForce = MP.ReadUInt();
        this.m_WT_TrooFlag = MP.ReadUShort();
        for (int index = 0; index < 16; ++index)
        {
          this.m_WT_TroopData[index] = MP.ReadUInt();
          this.m_WT_TroopTotal += this.m_WT_TroopData[index];
        }
        this.m_WT_KingdomID = MP.ReadUShort();
        break;
      case 22:
        this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
        this.m_WT_Point.zoneID = MP.ReadUShort();
        this.m_WT_Point.pointID = MP.ReadByte();
        this.m_WT_Name = MP.ReadString(13);
        this.m_WT_AllianceName = MP.ReadString(3);
        this.m_WT_MH = MP.ReadUShort();
        this.m_WT_PetID = MP.ReadUShort();
        this.m_WT_PetEnhance = MP.ReadByte();
        this.m_WT_PetSkillID = MP.ReadUShort();
        this.m_WT_PetSkillLv = MP.ReadByte();
        this.m_WT_KingdomID = MP.ReadUShort();
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.WatchTower);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 2);
  }

  public void RecvWatchTowerLineDetail_ERROR(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.HideUILock(EUILock.WatchTower);
        break;
      case 1:
        GUIManager.Instance.HideUILock(EUILock.WatchTower);
        break;
      case 2:
        GUIManager.Instance.HideUILock(EUILock.WatchTower);
        break;
    }
  }

  public void RecvSendMail(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        (GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door).CloseMenu();
        this.bMailAddBookMark = false;
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5378U), (ushort) 27);
        break;
      case 1:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        break;
      case 2:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        break;
      case 3:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5379U), (ushort) byte.MaxValue);
        break;
      case 4:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        break;
      case 5:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904U), (ushort) byte.MaxValue);
        break;
      case 6:
        GUIManager.Instance.HideUILock(EUILock.LetterEditor);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753U), (ushort) byte.MaxValue);
        break;
    }
  }

  public void UpdateWallInfo(float deltaTime)
  {
    if (this.m_WallRepairNowValue >= this.m_WallRepairMaxValue)
      return;
    if (!LandWalkerManager.IsBattleFire())
    {
      this.m_WallTickTime += deltaTime;
      if ((double) this.m_WallTickTime >= 1.0)
      {
        this.m_WallTempRate += this.m_WallRepairRate;
        if ((double) this.m_WallTempRate >= 1.0)
        {
          ++this.m_WallRepairNowValue;
          --this.m_WallTempRate;
        }
        this.m_WallTickTime = 0.0f;
      }
    }
    else if (DataManager.Instance.queueBarData[16].bActive)
      this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0U);
    else
      this.bNeedShowWallQueueBar = true;
    if ((int) this.m_WallRepairNowValue == (int) this.m_WallRepairMaxValue && DataManager.Instance.queueBarData[16].bActive)
    {
      this.m_WallBeginTime = 0L;
      this.m_WallTempRate = 0.0f;
      this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0U);
      GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787U), (ushort) 8);
    }
    AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level, (byte) 0);
    this.SetWallQueueBar();
  }

  public void InitWallInfo()
  {
    this.m_WallRepairBeginValue = 0U;
    this.m_WallRepairNowValue = 0U;
    this.m_WallRepairMaxValue = 0U;
    this.m_WallRepairRate = 0.0f;
    this.m_WallTickTime = 0.0f;
    this.m_WallTempRate = 0.0f;
    this.m_WallBeginTime = 0L;
    this.m_WallTargetTime = 0L;
    this.bNeedShowWallQueueBar = false;
  }

  public void SetWallQueueBar()
  {
    if (!this.bNeedShowWallQueueBar || this.ServerTime <= 0L)
      return;
    uint num = (uint) ((double) (this.m_WallRepairMaxValue - this.m_WallRepairNowValue) / (double) this.m_WallRepairRate);
    this.m_WallBeginTime = this.ServerTime - (long) ((double) (this.m_WallRepairNowValue - this.m_WallRepairBeginValue) / (double) this.m_WallRepairRate);
    this.m_WallTargetTime = this.ServerTime + (long) num;
    if (num <= 0U || LandWalkerManager.IsBattleFire())
      return;
    this.bNeedShowWallQueueBar = false;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, true, this.m_WallBeginTime, (uint) (this.m_WallTargetTime - this.m_WallBeginTime));
    DataManager.Instance.SetRecvQueueBarData(16);
  }

  public void RecvWallInfo(MessagePacket MP)
  {
    this.m_WallRepairMaxValue = MP.ReadUInt();
    this.m_WallRepairRate = MP.ReadFloat();
    this.m_WallRepairBeginValue = MP.ReadUInt();
    this.m_WallRepairNowValue = MP.ReadUInt();
    AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level, (byte) 0);
    if (this.m_WallRepairMaxValue > this.m_WallRepairNowValue)
    {
      this.bNeedShowWallQueueBar = true;
    }
    else
    {
      if ((int) this.m_WallRepairMaxValue != (int) this.m_WallRepairNowValue || this.m_WallRepairMaxValue == 0U)
        return;
      AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level, (byte) 0);
      DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0U);
    }
  }

  public void InitDefendersID()
  {
    Array.Clear((Array) this.m_DefendersID, 0, this.m_DefendersID.Length);
    this.m_DefendersID[0] = this.GetLeaderID();
  }

  public void SetDefendersID() => this.m_DefendersID[0] = this.GetLeaderID();

  public int GetMaxDefenders()
  {
    return (int) GUIManager.Instance.BuildingData.GetBuildLevelRequestData((ushort) 8, GUIManager.Instance.BuildingData.GetBuildData((ushort) 8, (ushort) 0).Level).Value2;
  }

  public ushort GetLeaderID() => this.RoleAttr.Head;

  public eHeroState GetHeroState(ushort heroID)
  {
    eHeroState heroState = eHeroState.None;
    ushort leaderId = this.GetLeaderID();
    LoadCaptureState nowCaptureStat = DataManager.Instance.beCaptured.nowCaptureStat;
    if ((int) leaderId == (int) heroID)
    {
      switch (nowCaptureStat)
      {
        case LoadCaptureState.None:
          break;
        case LoadCaptureState.Captured:
          heroState = eHeroState.Captured;
          goto label_7;
        case LoadCaptureState.Dead:
          heroState = eHeroState.Dead;
          goto label_7;
        default:
          heroState = eHeroState.IsFighting;
          goto label_7;
      }
    }
    if ((int) heroID < this.TempFightHeroID.Length)
      heroState = this.TempFightHeroID[(int) heroID] != (byte) 0 ? eHeroState.IsFighting : eHeroState.None;
label_7:
    return heroState;
  }

  public void RecvChangeLord(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    if (num == (byte) 0)
    {
      this.RoleAttr.Head = MP.ReadUShort();
      this.m_DefendersID[0] = this.RoleAttr.Head;
      for (int index = 0; index < 4; ++index)
        this.m_DefendersID[index + 1] = MP.ReadUShort();
    }
    DataManager.msgBuffer[0] = num;
    GameManager.OnRefresh(NetworkNews.Refresh_ChangeLord, DataManager.msgBuffer);
    GUIManager.Instance.HideUILock(EUILock.ChangeLord);
  }

  public void SendChangeLord(ushort HeroID)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.ChangeLord))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_CHANGELORD;
    messagePacket.AddSeqId();
    messagePacket.Add(HeroID);
    messagePacket.Send();
  }

  public void SendDefenderID()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Defender))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SET_DEF_HERO;
    messagePacket.AddSeqId();
    for (int index = 1; index <= 4; ++index)
      messagePacket.Add(this.m_DefendersID[index]);
    messagePacket.Send();
  }

  public void RecvDefendersID(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Defender);
    this.m_DefendersID[0] = this.GetLeaderID();
    int index1 = 1;
    for (int index2 = 0; index2 < 4; ++index2)
    {
      ushort num = MP.ReadUShort();
      if (num != (ushort) 0 && index1 < this.m_DefendersID.Length)
      {
        this.m_DefendersID[index1] = num;
        ++index1;
      }
    }
    DataManager.missionDataManager.CheckChanged(eMissionKind.Record, (ushort) 19, (ushort) 0);
  }

  public uint GetMaxTrapValue()
  {
    return GUIManager.Instance.BuildingData.GetBuildLevelRequestData((ushort) 12, GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level).Value1;
  }

  public void RecvTrapInfo(MessagePacket MP)
  {
    this.TrapTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mTrapQty[index] = MP.ReadUInt();
      this.TrapTotal += this.mTrapQty[index];
    }
  }

  public void RecvTrapConstevent(MessagePacket MP)
  {
    this.TrapKind = MP.ReadByte();
    this.TrapRank = MP.ReadByte();
    this.TrapTrainingQty = MP.ReadUInt();
    this.TrapBeginTime = MP.ReadLong();
    this.TrapNeedTime = MP.ReadUInt();
    if (this.TrapBeginTime == 0L)
      return;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, true, this.TrapBeginTime, this.TrapNeedTime);
    DataManager.Instance.SetRecvQueueBarData(14);
  }

  public void RecvTrapRepairInfo(MessagePacket MP)
  {
    this.TrapHospitalTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mTrap_Hospital[index] = MP.ReadUInt();
      this.TrapHospitalTotal += this.mTrap_Hospital[index];
    }
    this.Trap_TreatmentQuantity = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mRepairTrap[index] = MP.ReadUInt();
      this.Trap_TreatmentQuantity += this.mRepairTrap[index];
    }
    long StartTime = MP.ReadLong();
    uint TotalTime = MP.ReadUInt();
    if (StartTime == 0L)
      return;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, true, StartTime, TotalTime);
    DataManager.Instance.SetRecvQueueBarData(15);
  }

  public void RecvTrapConstruct(MessagePacket MP)
  {
    this.TrapKind = MP.ReadByte();
    this.TrapRank = MP.ReadByte();
    this.TrapQuantity = MP.ReadUInt();
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    this.TrapBeginTime = MP.ReadLong();
    this.TrapNeedTime = MP.ReadUInt();
    if ((int) this.TrapTrainingQty != (int) this.TrapQuantity)
    {
      if (this.TrapQuantity == 0U)
      {
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
      }
      else
      {
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.TrapTrainingQty);
        GUIManager.Instance.MsgStr.IntToFormat((long) this.TrapQuantity);
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3783U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3782U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(3784U));
      }
    }
    this.TrapTrainingQty = this.TrapQuantity;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, true, this.TrapBeginTime, this.TrapNeedTime);
    DataManager.Instance.SetRecvQueueBarData(14);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    AudioManager.Instance.PlayUISFX(UIKind.Trap);
  }

  public void RecvTrapComplete(MessagePacket MP)
  {
    int index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.TrapQuantity = MP.ReadUInt();
    this.mTrapQty[index] += this.TrapQuantity;
    this.TrapTotal += this.TrapQuantity;
    this.TrapTrainingQty = 0U;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh(NetworkNews.Refresh_Trap);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 17));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 4);
    DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort) (17 + index), (ushort) this.TrapQuantity);
  }

  public void RecvCancelTrapConstruct(MessagePacket MP)
  {
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0U);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1);
    this.TrapTrainingQty = 0U;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
  }

  public void RecvTrapDestroy(MessagePacket MP)
  {
    int index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    this.TrapQuantity = MP.ReadUInt();
    this.mTrapQty[index] -= this.TrapQuantity;
    this.TrapTotal -= this.TrapQuantity;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 17));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.IntToFormat((long) this.TrapQuantity, bNumber: true);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3743U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 4);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void RecvInstantTrapConstruct(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
        int index1 = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
        this.TrapQuantity = MP.ReadUInt();
        this.mTrapQty[index1] += this.TrapQuantity;
        this.TrapTotal += this.TrapQuantity;
        for (int index2 = 0; index2 < 5; ++index2)
          this.Resource[index2].Stock = MP.ReadUInt();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
        GameManager.OnRefresh(NetworkNews.Refresh_Trap);
        GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        GameManager.OnRefresh();
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index1 + 17));
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 4);
        DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort) (17 + index1), (ushort) this.TrapQuantity);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage("失敗", (ushort) byte.MaxValue);
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        break;
    }
  }

  public void SendFinishTrapConstrct()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHTRAPCONSTRCT;
    messagePacket.AddSeqId();
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.SoldierTrain);
  }

  public void RecvFinishTrapConstrct(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
        int index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
        this.TrapQuantity = MP.ReadUInt();
        this.mTrapQty[index] += this.TrapQuantity;
        this.TrapTotal += this.TrapQuantity;
        DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0U);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
        GameManager.OnRefresh(NetworkNews.Refresh_Trap);
        GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 17));
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 4);
        DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort) (17 + index), (ushort) this.TrapQuantity);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage("失敗", (ushort) byte.MaxValue);
        GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
        break;
    }
  }

  public void RecvRePairTrap(MessagePacket MP)
  {
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    this.Trap_TreatmentQty = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mRepairTrap[index] = MP.ReadUInt();
      this.Trap_TreatmentQty += this.mRepairTrap[index];
    }
    long StartTime = MP.ReadLong();
    uint TotalTime = MP.ReadUInt();
    if ((int) this.Trap_TreatmentQuantity != (int) this.Trap_TreatmentQty)
    {
      if (this.Trap_TreatmentQty == 0U)
      {
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(3870U), this.mStringTable.GetStringByID(4831U));
      }
      else
      {
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.Trap_TreatmentQuantity);
        GUIManager.Instance.MsgStr.IntToFormat((long) this.Trap_TreatmentQty);
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1043U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4030U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4031U));
      }
    }
    this.Trap_TreatmentQuantity = this.Trap_TreatmentQty;
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, true, StartTime, TotalTime);
    DataManager.Instance.SetRecvQueueBarData(15);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
  }

  public void RecvRepairTrapComplete(MessagePacket MP)
  {
    this.TrapTotal = 0U;
    this.TrapHospitalTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mTrapQty[index] = MP.ReadUInt();
      this.TrapTotal += this.mTrapQty[index];
      this.mTrap_Hospital[index] -= this.mRepairTrap[index];
      this.TrapHospitalTotal += this.mTrap_Hospital[index];
    }
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Trap);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat((long) this.Trap_TreatmentQuantity);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 5);
  }

  public void RecvCancelRepairTrap(MessagePacket MP)
  {
    this.Trap_TreatmentQuantity = 0U;
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
  }

  public void RecvInstantRepairTrap(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    uint trapTotal = this.TrapTotal;
    this.TrapTotal = 0U;
    this.TrapHospitalTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      uint num = MP.ReadUInt();
      this.mTrap_Hospital[index] = this.mTrap_Hospital[index] - (num - this.mTrapQty[index]);
      this.mTrapQty[index] = num;
      this.TrapTotal += num;
      this.TrapHospitalTotal += this.mTrap_Hospital[index];
    }
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    GameManager.OnRefresh(NetworkNews.Refresh_Trap);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh();
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat((long) (this.TrapTotal - trapTotal));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 5);
  }

  public void SendFinishPairTrap()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHREPAIRTRAP;
    messagePacket.AddSeqId();
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.SoldierTrain);
  }

  public void RecvFinishRepairTrap(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    uint trapTotal = this.TrapTotal;
    this.TrapTotal = 0U;
    this.TrapHospitalTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      uint num = MP.ReadUInt();
      this.mTrap_Hospital[index] = this.mTrap_Hospital[index] - (num - this.mTrapQty[index]);
      this.mTrapQty[index] = num;
      this.TrapTotal += num;
      this.TrapHospitalTotal += this.mTrap_Hospital[index];
    }
    DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0U);
    GameManager.OnRefresh(NetworkNews.Refresh_Trap);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh();
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.IntToFormat((long) (this.TrapTotal - trapTotal));
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 5);
  }

  public void RecvWallBeingAttack(MessagePacket MP)
  {
    this.m_WallRepairNowValue = MP.ReadUInt();
    this.m_WallRepairBeginValue = this.m_WallRepairNowValue;
    this.m_WallBeginTime = 0L;
    this.TrapTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mTrapQty[index] = MP.ReadUInt();
      this.TrapTotal += this.mTrapQty[index];
    }
    this.TrapHospitalTotal = 0U;
    for (int index = 0; index < 12; ++index)
    {
      this.mTrap_Hospital[index] = MP.ReadUInt();
      this.TrapHospitalTotal += this.mTrap_Hospital[index];
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WallRepair, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4);
    GameManager.OnRefresh(NetworkNews.Refresh_Trap);
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
    this.bNeedShowWallQueueBar = true;
  }

  public void RecvGiveUpTrap(MessagePacket MP)
  {
    int index = (int) MP.ReadByte() * 4 + (int) MP.ReadByte();
    uint x = MP.ReadUInt();
    this.mTrap_Hospital[index] -= x;
    this.TrapHospitalTotal -= x;
    GameManager.OnRefresh(NetworkNews.Refresh_Hospital);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1);
    GUIManager.Instance.HideUILock(EUILock.Hospital);
    SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort) (index + 17));
    GUIManager.Instance.MsgStr.ClearString();
    GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) recordByKey.Name));
    GUIManager.Instance.MsgStr.IntToFormat((long) x, bNumber: true);
    GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3743U));
    GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) byte.MaxValue);
  }

  public void CheckTroolCount()
  {
    int count = 0;
    for (int index = 0; index < 8; ++index)
    {
      if (this.MarchEventData[index].Type != EMarchEventType.EMET_Standby)
        ++count;
    }
    if (this.beCaptured.nowCaptureStat == LoadCaptureState.Returning)
      ++count;
    GUIManager.Instance.SetTroopsCount(count);
  }

  public void SetSortNonFightHeroID()
  {
    Array.Sort<uint>(this.SortNonFightHeroID, 0, (int) this.NonFightHeroCount, (IComparer<uint>) this.sortNonFightHeroIDComparer);
  }

  public void SetSortFightHeroID()
  {
    Array.Sort<uint>(this.SortFightHeroID, 0, (int) this.FightHeroCount, (IComparer<uint>) this.sortNonFightHeroIDComparer);
  }

  public void SetHeroBattleDataSave()
  {
    PlayerPrefs.SetString("Battle_UserID", NetworkManager.UserID.ToString());
    PlayerPrefs.SetString("Battle_HeroID[0]", this.heroBattleData[0].HeroID.ToString());
    PlayerPrefs.SetString("Battle_HeroID[1]", this.heroBattleData[1].HeroID.ToString());
    PlayerPrefs.SetString("Battle_HeroID[2]", this.heroBattleData[2].HeroID.ToString());
    PlayerPrefs.SetString("Battle_HeroID[3]", this.heroBattleData[3].HeroID.ToString());
    PlayerPrefs.SetString("Battle_HeroID[4]", this.heroBattleData[4].HeroID.ToString());
  }

  public void GetHeroBattleDataSave()
  {
    long.TryParse(PlayerPrefs.GetString("Battle_UserID"), out this.Battle_UserID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[0]"), out this.heroBattleData[0].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[1]"), out this.heroBattleData[1].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[2]"), out this.heroBattleData[2].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[3]"), out this.heroBattleData[3].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[4]"), out this.heroBattleData[4].HeroID);
  }

  public void SetHero_Condition_BattleDataSave()
  {
    PlayerPrefs.SetString("Battle_Condition_UserID", NetworkManager.UserID.ToString());
    PlayerPrefs.SetString("Battle_Condition_HeroID[0]", this.heroBattleData[0].HeroID.ToString());
    PlayerPrefs.SetString("Battle_Condition_HeroID[1]", this.heroBattleData[1].HeroID.ToString());
    PlayerPrefs.SetString("Battle_Condition_HeroID[2]", this.heroBattleData[2].HeroID.ToString());
    PlayerPrefs.SetString("Battle_Condition_HeroID[3]", this.heroBattleData[3].HeroID.ToString());
    PlayerPrefs.SetString("Battle_Condition_HeroID[4]", this.heroBattleData[4].HeroID.ToString());
  }

  public void GetHero_Condition_BattleDataSave()
  {
    long.TryParse(PlayerPrefs.GetString("Battle_Condition_UserID"), out this.BattleCondition_UserID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[0]"), out this.heroBattleConditionData[0].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[1]"), out this.heroBattleConditionData[1].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[2]"), out this.heroBattleConditionData[2].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[3]"), out this.heroBattleConditionData[3].HeroID);
    ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[4]"), out this.heroBattleConditionData[4].HeroID);
  }

  public void SetArenaHeroBattleDataSave()
  {
    PlayerPrefs.SetString("ArenaBattle_UserID", NetworkManager.UserID.ToString());
    PlayerPrefs.SetString("ArenaBattle_HeroID[0]", ArenaManager.Instance.m_ArenaTargetHero[0].ToString());
    PlayerPrefs.SetString("ArenaBattle_HeroID[1]", ArenaManager.Instance.m_ArenaTargetHero[1].ToString());
    PlayerPrefs.SetString("ArenaBattle_HeroID[2]", ArenaManager.Instance.m_ArenaTargetHero[2].ToString());
    PlayerPrefs.SetString("ArenaBattle_HeroID[3]", ArenaManager.Instance.m_ArenaTargetHero[3].ToString());
    PlayerPrefs.SetString("ArenaBattle_HeroID[4]", ArenaManager.Instance.m_ArenaTargetHero[4].ToString());
  }

  public void GetArenaHeroBattleDataSave()
  {
    long.TryParse(PlayerPrefs.GetString("ArenaBattle_UserID"), out this.ArenaBattle_UserID);
    ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[0]"), out ArenaManager.Instance.m_ArenaTargetHero[0]);
    ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[1]"), out ArenaManager.Instance.m_ArenaTargetHero[1]);
    ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[2]"), out ArenaManager.Instance.m_ArenaTargetHero[2]);
    ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[3]"), out ArenaManager.Instance.m_ArenaTargetHero[3]);
    ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[4]"), out ArenaManager.Instance.m_ArenaTargetHero[4]);
  }

  public void SaveNpcBattleHeroID(ushort NpcID, ushort[] heroid)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}", (object) AssetManager.persistentDataPath, (object) this.BattleHeroIDList);
    string path = stringBuilder.ToString();
    this.m_FightNpcDataUserID = NetworkManager.UserID;
    if (!this.m_FightNpcData.ContainsKey(NpcID))
    {
      FightNpcData val = new FightNpcData();
      val.HeroID = new ushort[5];
      val.NpcID = NpcID;
      for (int index = 0; index < heroid.Length && index < 5; ++index)
        val.HeroID[index] = heroid[index];
      this.m_FightNpcData.Add(NpcID, val);
    }
    else
    {
      FightNpcData fightNpcData1 = this.m_FightNpcData[NpcID];
      FightNpcData fightNpcData2 = new FightNpcData();
      fightNpcData2.HeroID = new ushort[5];
      fightNpcData2.NpcID = NpcID;
      for (int index = 0; index < heroid.Length && index < 5; ++index)
        fightNpcData2.HeroID[index] = heroid[index];
      this.m_FightNpcData[NpcID] = fightNpcData2;
    }
    using (FileStream output = new FileStream(path, FileMode.OpenOrCreate))
    {
      if (output == null)
        return;
      using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
      {
        if (binaryWriter == null)
          return;
        binaryWriter.Write(this.m_FightNpcDataUserID);
        binaryWriter.Write(this.m_FightNpcData.Count);
        for (int index1 = 0; index1 < this.m_FightNpcData.Length; ++index1)
        {
          if (this.m_FightNpcData.Values[index1].NpcID != (ushort) 0)
          {
            binaryWriter.Write(this.m_FightNpcData.Values[index1].NpcID);
            for (int index2 = 0; index2 < 5; ++index2)
              binaryWriter.Write(this.m_FightNpcData.Values[index1].HeroID[index2]);
          }
        }
      }
    }
  }

  public void LoadNpcBattleHeroID()
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}", (object) AssetManager.persistentDataPath, (object) this.BattleHeroIDList);
    string path = stringBuilder.ToString();
    this.m_FightNpcData.Clear();
    using (FileStream input = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
    {
      if (input.Length <= 0L)
        return;
      using (BinaryReader binaryReader = new BinaryReader((Stream) input))
      {
        this.m_FightNpcDataUserID = binaryReader.ReadInt64();
        if (this.m_FightNpcDataUserID != NetworkManager.UserID)
          return;
        int num = binaryReader.ReadInt32();
        for (int index1 = 0; index1 < num; ++index1)
        {
          if (index1 >= 200)
            break;
          try
          {
            FightNpcData val = new FightNpcData();
            val.HeroID = new ushort[5];
            val.NpcID = binaryReader.ReadUInt16();
            for (int index2 = 0; index2 < 5; ++index2)
              val.HeroID[index2] = binaryReader.ReadUInt16();
            if (!this.m_FightNpcData.ContainsKey(val.NpcID))
              this.m_FightNpcData.Add(val.NpcID, val);
          }
          catch
          {
          }
        }
      }
    }
  }

  public void SaveBindMail(string mail)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}", (object) AssetManager.persistentDataPath, (object) this.BindMail);
    using (FileStream output = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate))
    {
      if (output == null)
        return;
      using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
      {
        if (binaryWriter == null)
          return;
        binaryWriter.Write(IGGGameSDK.Instance.m_IGGID);
        binaryWriter.Write(mail);
      }
    }
  }

  public string LoadBindMail()
  {
    string str = string.Empty;
    string empty = string.Empty;
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendFormat("{0}/Data/{1}", (object) AssetManager.persistentDataPath, (object) this.BindMail);
    using (FileStream input = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.Read))
    {
      if (input.Length > 0L)
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input))
        {
          if (binaryReader.ReadString() == IGGGameSDK.Instance.m_IGGID)
            str = binaryReader.ReadString();
        }
      }
    }
    return str;
  }

  public void SetSysSettingSave()
  {
    PlayerPrefs.SetString("Other_bMusic", this.MySysSetting.bMusic.ToString());
    PlayerPrefs.SetString("Other_bSound", this.MySysSetting.bSound.ToString());
    PlayerPrefs.SetString("Other_mUpDateRate", this.MySysSetting.mUpDateRate.ToString());
    PlayerPrefs.SetString("Other_bShowMission", this.MySysSetting.bShowMission.ToString());
    PlayerPrefs.SetString("Other_bShowTrainingIdle", this.MySysSetting.bShowTrainingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowBuildingIdle", this.MySysSetting.bShowBuildingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowResearchingIdle", this.MySysSetting.bShowResearchingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
    PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
    PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
    PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
    PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
    PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
    PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
    PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
    PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
    PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
    PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
    PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
    switch (this.MySysSetting.mUpDateRate)
    {
      case 0:
        Application.targetFrameRate = 15;
        break;
      case 1:
        Application.targetFrameRate = 30;
        break;
      case 2:
        Application.targetFrameRate = -1;
        break;
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14);
  }

  public void ReSetSysSettingSave()
  {
    this.MySysSetting.bMusic = true;
    this.MySysSetting.bSound = true;
    this.MySysSetting.mUpDateRate = (byte) 2;
    this.MySysSetting.bShowMission = true;
    this.MySysSetting.bShowTrainingIdle = true;
    this.MySysSetting.bShowBuildingIdle = true;
    this.MySysSetting.bShowResearchingIdle = true;
    this.MySysSetting.bShowBuildUp = true;
    this.MySysSetting.bShowEquipUp = true;
    this.MySysSetting.bShowArena = true;
    this.MySysSetting.bShowChatFight = true;
    this.MySysSetting.mLanguageTranslation = ulong.MaxValue;
    this.MySysSetting.bLanguageOther = true;
    this.MySysSetting.bAutoTranslate = true;
    this.MySysSetting.bShowTimeBar = true;
    this.mFirstSetSys = (byte) 1;
    this.MySysSetting.mPaySetting = (byte) 0;
    this.MySysSetting.bMerchantman = false;
    this.MySysSetting.bShowPrison = true;
    this.MySysSetting.bShowMainMenu = true;
    this.MySysSetting.bShowMonsterPointMax = true;
    this.MySysSetting.mMusicSelect = (byte) 0;
    switch (this.MySysSetting.mUpDateRate)
    {
      case 0:
        Application.targetFrameRate = 15;
        break;
      case 1:
        Application.targetFrameRate = 30;
        break;
      case 2:
        Application.targetFrameRate = -1;
        break;
    }
    PlayerPrefs.SetString("Other_bMusic", this.MySysSetting.bMusic.ToString());
    PlayerPrefs.SetString("Other_bSound", this.MySysSetting.bSound.ToString());
    PlayerPrefs.SetString("Other_mUpDateRate", this.MySysSetting.mUpDateRate.ToString());
    PlayerPrefs.SetString("Other_bShowMission", this.MySysSetting.bShowMission.ToString());
    PlayerPrefs.SetString("Other_bShowTrainingIdle", this.MySysSetting.bShowTrainingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowBuildingIdle", this.MySysSetting.bShowBuildingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowResearchingIdle", this.MySysSetting.bShowResearchingIdle.ToString());
    PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
    PlayerPrefs.SetString("SysSetting_First", this.mFirstSetSys.ToString());
    PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
    PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
    PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
    PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
    PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
    PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
    PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
    PlayerPrefs.SetString("Other_mPaySetting", this.MySysSetting.mPaySetting.ToString());
    PlayerPrefs.SetString("Other_bMerchantman", this.MySysSetting.bMerchantman.ToString());
    PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
    PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
    PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
    PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14);
  }

  public void GetSysSettingSave()
  {
    bool.TryParse(PlayerPrefs.GetString("Other_bMusic"), out this.MySysSetting.bMusic);
    bool.TryParse(PlayerPrefs.GetString("Other_bSound"), out this.MySysSetting.bSound);
    byte.TryParse(PlayerPrefs.GetString("Other_mUpDateRate"), out this.MySysSetting.mUpDateRate);
    bool.TryParse(PlayerPrefs.GetString("Other_bShowMission"), out this.MySysSetting.bShowMission);
    bool.TryParse(PlayerPrefs.GetString("Other_bShowTrainingIdle"), out this.MySysSetting.bShowTrainingIdle);
    bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildingIdle"), out this.MySysSetting.bShowBuildingIdle);
    bool.TryParse(PlayerPrefs.GetString("Other_bShowResearchingIdle"), out this.MySysSetting.bShowResearchingIdle);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildUp"), out this.MySysSetting.bShowBuildUp))
    {
      this.MySysSetting.bShowBuildUp = true;
      PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildUp"), out this.MySysSetting.bShowBuildUp);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowEquipUp"), out this.MySysSetting.bShowEquipUp))
    {
      this.MySysSetting.bShowEquipUp = true;
      PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowEquipUp"), out this.MySysSetting.bShowEquipUp);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowArena"), out this.MySysSetting.bShowArena))
    {
      this.MySysSetting.bShowArena = true;
      PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowArena"), out this.MySysSetting.bShowArena);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowChatFight"), out this.MySysSetting.bShowChatFight))
    {
      this.MySysSetting.bShowChatFight = true;
      PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowChatFight"), out this.MySysSetting.bShowChatFight);
    if (!ulong.TryParse(PlayerPrefs.GetString("Other_mLanguageTranslation"), out this.MySysSetting.mLanguageTranslation))
    {
      this.MySysSetting.mLanguageTranslation = ulong.MaxValue;
      PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
    }
    else
      ulong.TryParse(PlayerPrefs.GetString("Other_mLanguageTranslation"), out this.MySysSetting.mLanguageTranslation);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bLanguageOther"), out this.MySysSetting.bLanguageOther))
    {
      this.MySysSetting.bLanguageOther = true;
      PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bLanguageOther"), out this.MySysSetting.bLanguageOther);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bAutoTranslate"), out this.MySysSetting.bAutoTranslate))
    {
      this.MySysSetting.bAutoTranslate = true;
      PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bAutoTranslate"), out this.MySysSetting.bAutoTranslate);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowTimeBar"), out this.MySysSetting.bShowTimeBar))
    {
      this.MySysSetting.bShowTimeBar = true;
      PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowTimeBar"), out this.MySysSetting.bShowTimeBar);
    if (!byte.TryParse(PlayerPrefs.GetString("Other_mPaySetting"), out this.MySysSetting.mPaySetting))
    {
      this.MySysSetting.mPaySetting = (byte) 0;
      PlayerPrefs.SetString("Other_mPaySetting", this.MySysSetting.mPaySetting.ToString());
    }
    else
      byte.TryParse(PlayerPrefs.GetString("Other_mPaySetting"), out this.MySysSetting.mPaySetting);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bMerchantman"), out this.MySysSetting.bMerchantman))
    {
      this.MySysSetting.bMerchantman = false;
      PlayerPrefs.SetString("Other_bMerchantman", this.MySysSetting.bMerchantman.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bMerchantman"), out this.MySysSetting.bMerchantman);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowPrison"), out this.MySysSetting.bShowPrison))
    {
      this.MySysSetting.bShowPrison = true;
      PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowPrison"), out this.MySysSetting.bShowPrison);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowMainMenu"), out this.MySysSetting.bShowMainMenu))
    {
      this.MySysSetting.bShowMainMenu = true;
      PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowMainMenu"), out this.MySysSetting.bShowMainMenu);
    if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowMonsterPointMax"), out this.MySysSetting.bShowMonsterPointMax))
    {
      this.MySysSetting.bShowMonsterPointMax = true;
      PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
    }
    else
      bool.TryParse(PlayerPrefs.GetString("Other_bShowMonsterPointMax"), out this.MySysSetting.bShowMonsterPointMax);
    if (!byte.TryParse(PlayerPrefs.GetString("Other_mMusicSelect"), out this.MySysSetting.mMusicSelect))
    {
      this.MySysSetting.mMusicSelect = (byte) 0;
      PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
    }
    else
      byte.TryParse(PlayerPrefs.GetString("Other_mMusicSelect"), out this.MySysSetting.mMusicSelect);
    switch (this.MySysSetting.mUpDateRate)
    {
      case 0:
        Application.targetFrameRate = 15;
        break;
      case 1:
        Application.targetFrameRate = 30;
        break;
      case 2:
        Application.targetFrameRate = -1;
        break;
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14);
  }

  public void RecvInstantWallRepair(MessagePacket MP)
  {
    if (MP.ReadByte() > (byte) 1)
      return;
    this.m_WallRepairNowValue = this.m_WallRepairMaxValue;
    AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData((ushort) 12, (ushort) 0).Level, (byte) 0);
    this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0U);
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eFixWallImmediate);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787U), (ushort) 8);
    GameManager.OnRefresh();
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void InitBuffData()
  {
    this.MaxBuffTableCount = this.ItemBuffTable.TableCount;
    this.m_BuffScrollIndex = 0;
    this.m_BuffScrollPos = 0.0f;
    this.m_BuffListOpenIcon = (byte) 0;
    this.m_BuffListUseCount = 0;
    this.m_RecvWarBuffIdx = 0;
    this.m_RecvWorldBattleIdx = 0;
    this.m_KingdomBattleIdx = 0;
    this.m_NobilityBattleIdx = 0;
    this.itemBuffComparer = new ItemBuffComparer();
    this.m_SortBuffData = new byte[this.MaxBuffTableCount];
    this.m_RecvItemBuffData = new ItemBuffData[this.MaxBuffTableCount];
    for (int Index = 0; Index < this.MaxBuffTableCount; ++Index)
      this.m_RecvItemBuffData[Index].ID = this.ItemBuffTable.GetRecordByIndex(Index).BuffID;
    for (byte index = 0; (int) index < this.MaxBuffTableCount; ++index)
      this.m_SortBuffData[(int) index] = index;
    for (int Index = 0; Index < this.MaxBuffTableCount; ++Index)
    {
      if (this.ItemBuffTable.GetRecordByIndex(Index).BuffKind == (byte) 7)
        this.m_RecvWarBuffIdx = Index;
      else if (this.ItemBuffTable.GetRecordByIndex(Index).BuffKind == (byte) 8)
        this.m_RecvWorldBattleIdx = Index;
      else if (this.ItemBuffTable.GetRecordByIndex(Index).BuffKind == (byte) 6)
        this.m_KingdomBattleIdx = Index;
      else if (this.ItemBuffTable.GetRecordByIndex(Index).BuffKind == (byte) 9)
        this.m_NobilityBattleIdx = Index;
    }
    this.SorttBuffData();
  }

  public void ResetBuffData()
  {
    this.m_BuffScrollIndex = 0;
    this.m_BuffScrollPos = 0.0f;
    this.m_BuffListOpenIcon = (byte) 0;
    this.m_BuffListUseCount = 0;
    if (this.m_RecvItemBuffData == null)
      return;
    Array.Clear((Array) this.m_RecvItemBuffData, 0, this.m_RecvItemBuffData.Length);
    if (this.ItemBuffTable == null)
      return;
    for (int Index = 0; Index < this.MaxBuffTableCount; ++Index)
      this.m_RecvItemBuffData[Index].ID = this.ItemBuffTable.GetRecordByIndex(Index).BuffID;
  }

  public void SorttBuffData()
  {
    Array.Sort<byte>(this.m_SortBuffData, 0, this.MaxBuffTableCount, (IComparer<byte>) this.itemBuffComparer);
  }

  public void UpdateItemBuffIcon()
  {
    bool flag1 = false;
    bool flag2 = false;
    bool flag3 = false;
    bool flag4 = false;
    bool flag5 = false;
    bool flag6 = false;
    bool flag7 = false;
    bool flag8 = false;
    for (int index = 0; index < this.MaxBuffTableCount; ++index)
    {
      if (this.m_RecvItemBuffData[index].bEnable && this.m_RecvItemBuffData[index].bEnable)
      {
        ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(this.m_RecvItemBuffData[index].ID);
        if (!flag1 && recordByKey.BuffKind == (byte) 1)
          flag1 = true;
        if (!flag2 && (recordByKey.BuffKind == (byte) 3 || recordByKey.BuffKind == (byte) 4))
          flag2 = true;
        if (!flag3 && recordByKey.BuffKind == (byte) 5)
          flag3 = true;
        if (!flag4 && recordByKey.BuffKind == (byte) 2)
          flag4 = true;
        if (!flag5 && recordByKey.BuffKind == (byte) 6)
          flag5 = true;
        if (!flag6 && recordByKey.BuffKind == (byte) 7)
          flag6 = true;
        if (!flag7 && recordByKey.BuffKind == (byte) 8)
          flag7 = true;
        if (!flag8 && recordByKey.BuffKind == (byte) 9)
          flag8 = true;
      }
    }
    this.bHaveKvKBuff = flag5;
    this.bHaveWarBuff = flag6;
    this.bHaveWorldBattleBuff = flag7;
    this.bHaveNobilityBattleBuff = flag8;
    this.m_BuffListOpenIcon = !flag1 ? (!flag2 ? (!flag3 ? (this.RoleAttr.WorldTitle_Country == (ushort) 0 ? (!flag4 ? (byte) 0 : (byte) 3) : (byte) 7) : (byte) 4) : (byte) 2) : (byte) 1;
    this.m_BuffListUseCount = this.GetNowItemBuffCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 12);
  }

  public int GetNowItemBuffCount()
  {
    int nowItemBuffCount = 0;
    for (int index = 0; index < this.MaxBuffTableCount; ++index)
    {
      if (this.m_RecvItemBuffData[index].bEnable)
        ++nowItemBuffCount;
    }
    if (DataManager.Instance.RoleAttr.WorldTitle_Country > (ushort) 0)
      ++nowItemBuffCount;
    return nowItemBuffCount;
  }

  public int GetRecvBuffDataIdxByID(ushort id)
  {
    int recvBuffDataIdxById = -1;
    for (int index = 0; index < this.m_RecvItemBuffData.Length; ++index)
    {
      if ((int) this.m_RecvItemBuffData[index].ID == (int) id)
      {
        recvBuffDataIdxById = index;
        break;
      }
    }
    return recvBuffDataIdxById;
  }

  public void CancelShieldItemBuff()
  {
    if (this.m_BuffListOpenIcon != (byte) 1)
      return;
    for (int index = 0; index < this.m_RecvItemBuffData.Length; ++index)
    {
      if (this.ItemBuffTable.GetRecordByKey(this.m_RecvItemBuffData[index].ID).BuffKind == (byte) 1)
      {
        this.m_RecvItemBuffData[index].BeginTime = 0L;
        this.m_RecvItemBuffData[index].TargetTime = 0L;
        this.m_RecvItemBuffData[index].bEnable = false;
        break;
      }
    }
    this.UpdateItemBuffIcon();
    GameManager.OnRefresh(NetworkNews.Refresh_BuffList);
  }

  public int GetWarBuffCD()
  {
    int level = (int) GUIManager.Instance.BuildingData.GetBuildData((ushort) 8, (ushort) 0).Level;
    if (level >= 1 && level <= 8)
      return 0;
    if (level >= 9 && level <= 12)
      return 2;
    if (level >= 13 && level <= 16)
      return 3;
    switch (level)
    {
      case 17:
        return 4;
      case 18:
        return 5;
      case 19:
        return 6;
      case 20:
        return 7;
      case 21:
        return 8;
      case 22:
        return 9;
      case 23:
        return 11;
      case 24:
        return 13;
      case 25:
        return 15;
      default:
        return 0;
    }
  }

  public void RecvIBuffInfo(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    for (int index = 0; index < (int) num1; ++index)
    {
      ushort num2 = MP.ReadUShort();
      ushort num3 = MP.ReadUShort();
      int recvBuffDataIdxById = this.GetRecvBuffDataIdxByID(num2);
      long num4 = MP.ReadLong();
      uint MaxTimeSec = MP.ReadUInt();
      if (recvBuffDataIdxById >= 0 && recvBuffDataIdxById < this.m_RecvItemBuffData.Length)
      {
        ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(num2);
        if (recordByKey.BuffKind == (byte) 6)
        {
          if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num4 - this.ServerTime) < 3L)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(979U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
          else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num4)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(984U), this.mStringTable.GetStringByID(980U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
        }
        if (recordByKey.BuffKind == (byte) 8)
        {
          if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num4 - this.ServerTime) < 3L)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(10001U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
          else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num4)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11014U), this.mStringTable.GetStringByID(980U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
        }
        if (recordByKey.BuffKind == (byte) 9)
        {
          if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num4 - this.ServerTime) < 3L)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(10068U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
          else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num4)
          {
            uint TimeSec = this.ServerTime <= num4 + (long) MaxTimeSec ? (uint) (num4 + (long) MaxTimeSec - this.ServerTime) : 0U;
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11095U), this.mStringTable.GetStringByID(980U), ShowBar: true);
            GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
          }
        }
        this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable = true;
        this.m_RecvItemBuffData[recvBuffDataIdxById].ItemID = num3;
        this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime = num4;
        this.m_RecvItemBuffData[recvBuffDataIdxById].TargetTime = num4 + (long) MaxTimeSec;
      }
    }
    this.UpdateItemBuffIcon();
    GameManager.OnRefresh(NetworkNews.Refresh_BuffList);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
  }

  public void RecvUpdateBuffInfo(MessagePacket MP)
  {
    ushort num1 = MP.ReadUShort();
    ushort num2 = MP.ReadUShort();
    int recvBuffDataIdxById = this.GetRecvBuffDataIdxByID(num1);
    long num3 = MP.ReadLong();
    uint MaxTimeSec = MP.ReadUInt();
    if (recvBuffDataIdxById >= 0 && recvBuffDataIdxById < this.m_RecvItemBuffData.Length)
    {
      ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(num1);
      if (recordByKey.BuffKind == (byte) 6)
      {
        if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num3 - this.ServerTime) < 3L)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(979U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
        else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num3)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(984U), this.mStringTable.GetStringByID(980U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
      }
      if (recordByKey.BuffKind == (byte) 8)
      {
        if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num3 - this.ServerTime) < 3L)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(10001U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
        else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num3)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11014U), this.mStringTable.GetStringByID(980U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
      }
      if (recordByKey.BuffKind == (byte) 9)
      {
        if (!this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && Math.Abs(num3 - this.ServerTime) < 3L)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978U), this.mStringTable.GetStringByID(10068U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
        else if (this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime != num3)
        {
          uint TimeSec = this.ServerTime <= num3 + (long) MaxTimeSec ? (uint) (num3 + (long) MaxTimeSec - this.ServerTime) : 0U;
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11095U), this.mStringTable.GetStringByID(980U), ShowBar: true);
          GUIManager.Instance.SetMsgBarTimeAndFill((float) TimeSec, (float) MaxTimeSec);
        }
      }
      this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable = true;
      this.m_RecvItemBuffData[recvBuffDataIdxById].ItemID = num2;
      this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime = num3;
      this.m_RecvItemBuffData[recvBuffDataIdxById].TargetTime = num3 + (long) MaxTimeSec;
    }
    this.UpdateItemBuffIcon();
    GameManager.OnRefresh(NetworkNews.Refresh_BuffList);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
  }

  public void RecvBuffComplete(MessagePacket MP)
  {
    int recvBuffDataIdxById = this.GetRecvBuffDataIdxByID(MP.ReadUShort());
    if (recvBuffDataIdxById >= 0 && recvBuffDataIdxById < this.m_RecvItemBuffData.Length)
    {
      this.m_RecvItemBuffData[recvBuffDataIdxById].bEnable = false;
      this.m_RecvItemBuffData[recvBuffDataIdxById].ItemID = (ushort) 0;
      this.m_RecvItemBuffData[recvBuffDataIdxById].BeginTime = 0L;
      this.m_RecvItemBuffData[recvBuffDataIdxById].TargetTime = 0L;
    }
    this.UpdateItemBuffIcon();
    GameManager.OnRefresh(NetworkNews.Refresh_BuffList);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
  }

  public void InitSearchPlayerData()
  {
    this.m_SearchPlayerData = new SearchPlayerDataType[20];
    for (int index = 0; index < 20; ++index)
    {
      this.m_SearchPlayerData[index].Name = StringManager.Instance.SpawnString();
      this.m_SearchPlayerData[index].AllianceTag = StringManager.Instance.SpawnString();
    }
    this.m_PreSearchName = string.Empty;
    this.m_RecvSearchPlayerCount = (byte) 0;
    this.m_SearchListScrollIndex = 0;
    this.m_SearchListScrollPos = 0.0f;
    this.bClaerSearchData = true;
    this.bSearchError = false;
  }

  public void ResetSearchPlayerData()
  {
    if (this.m_SearchPlayerData != null)
      Array.Clear((Array) this.m_SearchPlayerData, 0, this.m_SearchPlayerData.Length);
    this.m_RecvSearchPlayerCount = (byte) 0;
    this.m_SearchListScrollIndex = 0;
    this.m_SearchListScrollPos = 0.0f;
    this.m_PreSearchName = string.Empty;
    this.bClaerSearchData = true;
    this.bSearchError = false;
  }

  public void SendSearchPlayer(string name)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.SearchPlayer))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SEARCHPALYER;
    messagePacket.AddSeqId();
    messagePacket.Add((byte) name.Length);
    messagePacket.Add(name, 13);
    messagePacket.Send();
  }

  public void RecvSearchPlayer(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    if (num != byte.MaxValue)
    {
      this.m_RecvSearchPlayerCount = num;
      this.bSearchError = false;
    }
    else
      this.bSearchError = true;
    if (this.bSearchError)
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(796U), (ushort) byte.MaxValue);
    else if (this.m_RecvSearchPlayerCount <= (byte) 20)
    {
      for (int index = 0; index < (int) this.m_RecvSearchPlayerCount; ++index)
      {
        this.m_SearchPlayerData[index].Head = MP.ReadUShort();
        MP.ReadStringPlus(13, this.m_SearchPlayerData[index].Name);
        MP.ReadStringPlus(3, this.m_SearchPlayerData[index].AllianceTag);
        this.m_SearchPlayerData[index].Power = MP.ReadULong();
        this.m_SearchPlayerData[index].TroopKillNum = MP.ReadULong();
      }
    }
    GameManager.OnRefresh(NetworkNews.Refresh_SearchList);
    GUIManager.Instance.HideUILock(EUILock.SearchPlayer);
  }

  public void SendScout(PointCode DesPoint)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Scout))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SENDSCOUT;
    messagePacket.AddSeqId();
    messagePacket.Add(DesPoint.zoneID);
    messagePacket.Add(DesPoint.pointID);
    messagePacket.Send();
  }

  public void RecvScout(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    switch (num)
    {
      case 0:
      case 12:
        byte index = MP.ReadByte();
        if (index >= (byte) 8)
          return;
        this.MarchEventData[(int) index].Type = EMarchEventType.EMET_ScoutMarching;
        this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
        this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
        DataManager.instance.Resource[4].Stock = MP.ReadUInt();
        this.MarchEventData[(int) index].PointKind = (POINT_KIND) MP.ReadByte();
        this.MarchEventData[(int) index].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) index].DesPlayerName = MP.ReadString(13);
        if (num == (byte) 12)
          this.MarchEventData[(int) index].bRallyHost = (byte) 3;
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) index, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        if (num == (byte) 0)
          this.CancelShieldItemBuff();
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) 107, (ushort) 1);
        if (this.MarchEventData[(int) index].PointKind == POINT_KIND.PK_CITY)
        {
          AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.SCOUT_OTHERTURF);
          break;
        }
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5725U), this.mStringTable.GetStringByID(5726U), this.mStringTable.GetStringByID(5727U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 5:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5718U), this.mStringTable.GetStringByID(5719U), this.mStringTable.GetStringByID(5720U));
        break;
      case 6:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5710U), this.mStringTable.GetStringByID(5711U), this.mStringTable.GetStringByID(5712U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5721U), this.mStringTable.GetStringByID(5722U), 6, this.mStringTable.GetStringByID(5723U), bCloseIDSet: true);
        break;
      case 10:
        ushort yolkIdbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.ScoutDesPoint.zoneID, this.ScoutDesPoint.pointID, (ushort) 0);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIdbyPointCode, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
      case 11:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5725U), this.mStringTable.GetStringByID(5726U), this.mStringTable.GetStringByID(5727U));
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Scout);
  }

  public void RecvScoutReturn(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_ScoutReturn;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    byte num = MP.ReadByte();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    if (num != (byte) 0)
      return;
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(5713U), (ushort) 20);
  }

  public void RecvScoutHome(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].bRallyHost = (byte) 0;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_Standby;
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(5714U), (ushort) 14);
  }

  public void RecvSHelp(MessagePacket MP)
  {
    GUIManager instance = GUIManager.Instance;
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 0:
        uint[] numArray = new uint[5];
        byte index1 = MP.ReadByte();
        if (index1 >= (byte) 8)
          return;
        this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_DeliverMarching;
        this.MarchEventData[(int) index1].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) index1].Point.pointID = MP.ReadByte();
        this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
        for (int index2 = 0; index2 < 5; ++index2)
          DataManager.instance.Resource[index2].Stock = MP.ReadUInt();
        for (int index3 = 0; index3 < 5; ++index3)
          numArray[index3] = MP.ReadUInt();
        this.MarchEventData[(int) index1].PointKind = (POINT_KIND) MP.ReadByte();
        this.MarchEventData[(int) index1].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) index1].DesPlayerName = MP.ReadString(13);
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), true, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) index1, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        this.CheckTroolCount();
        GameManager.OnRefresh(NetworkNews.Refresh_Resource);
        for (int index4 = 0; index4 < 5; ++index4)
          instance.m_SaveResource[index4] = 0U;
        instance.m_OpenResourceMenu = false;
        GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3871U), (ushort) 22);
        byte num2 = 0;
        for (int index5 = 0; index5 < 5; ++index5)
        {
          if ((int) numArray[index5] != (int) instance.m_SendResource[index5])
            ++num2;
        }
        if (num2 > (byte) 0)
        {
          instance.MsgStr.Length = 0;
          for (int index6 = 0; index6 < 5; ++index6)
          {
            if (instance.m_SendResource[index6] != 0U && (int) numArray[index6] != (int) instance.m_SendResource[index6])
            {
              instance.MsgStr.IntToFormat((long) instance.m_SendResource[index6], bNumber: true);
              instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) (3952 + index6)));
              instance.MsgStr.IntToFormat((long) numArray[index6], bNumber: true);
              instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint) (3952 + index6)));
              instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4830U));
              if (index6 != 4)
                instance.MsgStr.Append("\n");
            }
          }
          if (num2 > (byte) 1)
          {
            instance.OpenMessageBoxEX(this.mStringTable.GetStringByID(4829U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4831U));
            break;
          }
          instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4831U));
          break;
        }
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Scout);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Market_Help, 1, (int) num1);
  }

  public void RecvHelp_Return(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_DeliverReturn;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    if (num != (byte) 0)
      return;
    GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3977U), (ushort) 22);
    DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort) 119, (ushort) 1);
  }

  public void RecvHelp_Home(MessagePacket MP)
  {
    byte index1 = MP.ReadByte();
    if (index1 >= (byte) 8)
      return;
    this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_Standby;
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), false, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
    for (int index2 = 0; index2 < 5; ++index2)
      this.Resource[index2].Stock = MP.ReadUInt();
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3973U), (ushort) 14);
  }

  public void RecvInforce_Info(MessagePacket MP)
  {
    ushort num = MP.ReadUShort();
    byte[] Out = new byte[64];
    MP.ReadBlock(Out, 0, 64);
    int startIdx = 0;
    Array.Clear((Array) this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
    this.TotalSoldier_Embassy = 0U;
    for (int index = 0; index < 16; ++index)
    {
      if (((int) num >> index & 1) == 1)
      {
        this.mSoldier_Embassy[index] = GameConstants.ConvertBytesToUInt(Out, startIdx);
        this.TotalSoldier_Embassy += this.mSoldier_Embassy[index];
        startIdx += 4;
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 0);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void RecvEmbassy_Msg(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    CString cstring1 = StringManager.Instance.StaticString1024();
    CString cstring2 = StringManager.Instance.StaticString1024();
    MP.ReadStringPlus(13, cstring1);
    cstring2.ClearString();
    cstring2.StringToFormat(cstring1);
    if (num1 == (byte) 0)
    {
      cstring2.AppendFormat(this.mStringTable.GetStringByID(4833U));
      GUIManager.Instance.AddHUDMessage(cstring2.ToString(), (ushort) 21);
    }
    else
    {
      cstring2.AppendFormat(this.mStringTable.GetStringByID(4848U));
      GUIManager.Instance.AddHUDMessage(cstring2.ToString(), (ushort) 21);
    }
    ushort num2 = MP.ReadUShort();
    byte[] Out = new byte[64];
    MP.ReadBlock(Out, 0, 64);
    int startIdx = 0;
    this.TotalSoldier_Embassy = 0U;
    Array.Clear((Array) this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
    for (int index = 0; index < 16; ++index)
    {
      if (((int) num2 >> index & 1) == 1)
      {
        this.mSoldier_Embassy[index] = GameConstants.ConvertBytesToUInt(Out, startIdx);
        this.TotalSoldier_Embassy += this.mSoldier_Embassy[index];
        startIdx += 4;
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 0);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void SendInforce()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Inforce))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SEND_INFORCE;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvSendInforce(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    switch (MP.ReadByte())
    {
      case 0:
        byte Index = MP.ReadByte();
        if (Index >= (byte) 8)
          return;
        this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_InforceMarching;
        if (this.MarchEventData[(int) Index].Type >= EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int) Index].Type <= EMarchEventType.EMET_RallyAttack && this.MarchEventData[(int) Index].Type != EMarchEventType.EMET_GatherMarching && this.MarchEventData[(int) Index].Type != EMarchEventType.EMET_CampMarching)
          this.CancelShieldItemBuff();
        this.MarchEventData[(int) Index].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) Index].Point.pointID = MP.ReadByte();
        this.MarchEventTime[(int) Index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) Index].RequireTime = MP.ReadUInt();
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), true, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
        this.MarchEventData[(int) Index].PointKind = POINT_KIND.PK_CITY;
        this.MarchEventData[(int) Index].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) Index].DesPlayerName = MP.ReadString(13);
        ushort num = MP.ReadUShort();
        for (int index = 0; index < 16; ++index)
        {
          if (((int) num >> index & 1) == 1)
          {
            this.MarchEventData[(int) Index].TroopData[index / 4][index % 4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index] -= this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
          }
        }
        for (int index = 0; index < 5; ++index)
          this.MarchEventData[(int) Index].HeroID[index] = (ushort) 0;
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if ((UnityEngine.Object) menu != (UnityEngine.Object) null)
        {
          if (menu.m_eMapMode == EUIOriginMapMode.OriginMap)
          {
            menu.CloseMenu();
          }
          else
          {
            DataManager.msgBuffer[0] = (byte) 81;
            GameConstants.GetBytes((ushort) Index, DataManager.msgBuffer, 1);
            GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
          }
        }
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3872U), (ushort) 21);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 5:
        if (this.bWonderFight)
        {
          if (this.WarlobbyDetail != null)
          {
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8568U));
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
            break;
          }
          break;
        }
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5745U), this.mStringTable.GetStringByID(5746U), this.mStringTable.GetStringByID(5747U));
        break;
      case 6:
        if (this.bWonderFight)
        {
          if (this.WarlobbyDetail != null)
          {
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8567U));
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
            break;
          }
          break;
        }
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5812U), this.mStringTable.GetStringByID(5813U), this.mStringTable.GetStringByID(5814U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834U), this.mStringTable.GetStringByID(5806U), this.mStringTable.GetStringByID(4034U));
        break;
      case 8:
        if (this.bWonderFight)
        {
          if (this.WarlobbyDetail != null)
          {
            GUIManager.Instance.MsgStr.ClearString();
            GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
            GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8570U));
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
            break;
          }
          break;
        }
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4837U), this.mStringTable.GetStringByID(4838U), this.mStringTable.GetStringByID(4839U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 11:
        if (this.WarlobbyDetail != null)
        {
          GUIManager.Instance.MsgStr.ClearString();
          GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
          GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8569U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        }
        break;
      case 12:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 13:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 14:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 15:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(9916U), this.mStringTable.GetStringByID(4828U));
        break;
    }
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
  }

  public void Send_DissMiss_Inforce()
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Inforce))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_DISMISS_INFORCE;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvDimiss_Inforce(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Inforce);
    if (MP.ReadByte() != (byte) 0)
      return;
    Array.Clear((Array) this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
    this.TotalSoldier_Embassy = 0U;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 1);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4855U), (ushort) 21);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void RecvInforce_Arrived(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
    this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
    this.MarchEventData[(int) index].DesPointLevel = MP.ReadByte();
    this.MarchEventData[(int) index].DesPlayerName = MP.ReadString(13);
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, 0L, 0U);
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_InforceStanby;
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4832U), (ushort) 21);
  }

  public void SendAllyInforceInfo(string name)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.Inforce))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLY_INFORCE_INFO;
    messagePacket.AddSeqId();
    messagePacket.Add(name, 13);
    messagePacket.Send();
  }

  public void RecvAllyInforceInfo(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    bool flag = false;
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    switch (num)
    {
      case 0:
        this.m_InForcePoint.zoneID = MP.ReadUShort();
        this.m_InForcePoint.pointID = MP.ReadByte();
        if ((double) DataManager.MapDataController.CheckLenght(GameConstants.getTileMapPosbyPointCode(this.m_InForcePoint.zoneID, this.m_InForcePoint.pointID)) == 0.0)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(119U));
          GUIManager.Instance.HideUILock(EUILock.Inforce);
          return;
        }
        this.m_CurrTroopAmount = MP.ReadUInt();
        this.m_InForceCapacity = MP.ReadUInt();
        this.m_InForceMarchSpeedPlus = MP.ReadUInt();
        this.m_CurrInForcePlayer = MP.ReadByte();
        if (this.m_CurrTroopAmount >= this.m_InForceCapacity)
          flag = true;
        if ((bool) (UnityEngine.Object) menu)
        {
          if (this.ReinforceCheckType == eReinforceCheck.OpenReinforce)
            menu.m_GroundInfo.OpenReinforcePanel(true);
          else if (this.ReinforceCheckType == eReinforceCheck.OpenReinforce_NoLoc)
            menu.m_GroundInfo.OpenReinforcePanel(true, true, false);
          else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition)
          {
            if (!flag && this.m_CurrInForcePlayer < (byte) 30)
              menu.OpenMenu(EGUIWindow.UI_Expedition, arg2: 2, bCameraMode: true);
          }
          else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_FromList)
          {
            if (!flag && this.m_CurrInForcePlayer < (byte) 30)
              menu.OpenMenu(EGUIWindow.UI_Expedition, 1, 2, true);
          }
          else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_Marshal)
            menu.OpenMenu(EGUIWindow.UI_Expedition, 2, 2, true);
        }
        if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition || this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_FromList)
        {
          if (flag)
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5812U), this.mStringTable.GetStringByID(5813U));
          if (this.m_CurrInForcePlayer >= (byte) 30)
          {
            GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5745U), this.mStringTable.GetStringByID(5746U));
            break;
          }
          break;
        }
        break;
      case 1:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834U), this.mStringTable.GetStringByID(4835U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U));
        break;
    }
    if (num != (byte) 0 && (bool) (UnityEngine.Object) menu)
      menu.m_GroundInfo.Close();
    GUIManager.Instance.HideUILock(EUILock.Inforce);
  }

  public void RecvAllyInforceReturn(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = (EMarchEventType) MP.ReadByte();
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4854U), (ushort) 14);
  }

  public void SendBeginRally(ref ushort[] LeaderID, ref uint[] TroopData)
  {
    byte[] numArray = new byte[74];
    int num1 = 0;
    byte data1 = 0;
    ushort data2 = 0;
    int num2 = 1;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_BEGIN_RALLY;
    messagePacket.AddSeqId();
    messagePacket.Add(this.RallyDesPoint.zoneID);
    messagePacket.Add(this.RallyDesPoint.pointID);
    messagePacket.Add(this.RallyCountDownIndex);
    for (int index = 0; index < LeaderID.Length; ++index)
    {
      if (LeaderID[index] != (ushort) 0)
      {
        ++data1;
        GameConstants.GetBytes(LeaderID[index], numArray, num1);
        num1 += 2;
      }
    }
    for (int index = 0; index < TroopData.Length; ++index)
    {
      if (TroopData[index] != 0U)
      {
        data2 |= (ushort) (num2 << index);
        GameConstants.GetBytes(TroopData[index], numArray, num1);
        num1 += 4;
      }
    }
    messagePacket.Add(data1);
    messagePacket.Add(data2);
    messagePacket.Add(numArray, len: num1);
    messagePacket.Send();
  }

  public void RecvBeginRally(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 0:
      case 16:
        byte Index = MP.ReadByte();
        if (Index >= (byte) 8)
          return;
        this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_RallyStanby;
        this.MarchEventData[(int) Index].bRallyHost = (byte) 1;
        if (num1 == (byte) 0)
          this.CancelShieldItemBuff();
        this.MarchEventTime[(int) Index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) Index].RequireTime = MP.ReadUInt();
        this.MarchEventData[(int) Index].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) Index].Point.pointID = MP.ReadByte();
        this.MarchEventData[(int) Index].PointKind = POINT_KIND.PK_CITY;
        this.MarchEventData[(int) Index].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) Index].DesPlayerName = MP.ReadString(13);
        if (num1 == (byte) 16)
          this.MarchEventData[(int) Index].bRallyHost = (byte) 4;
        byte num2 = MP.ReadByte();
        ushort num3 = MP.ReadUShort();
        for (int index1 = 0; index1 < this.MarchEventData[(int) Index].HeroID.Length; ++index1)
        {
          this.MarchEventData[(int) Index].HeroID[index1] = (ushort) 0;
          if (index1 < (int) num2)
          {
            ushort index2 = MP.ReadUShort();
            this.MarchEventData[(int) Index].HeroID[index1] = index2;
            this.TempFightHeroID[(int) index2] = (byte) 1;
          }
        }
        for (int index = 0; index < 16; ++index)
        {
          if (((int) num3 >> index & 1) == 1)
          {
            this.MarchEventData[(int) Index].TroopData[index / 4][index % 4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index] -= this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
          }
        }
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) Index, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        this.SetFightHeroData();
        GameManager.OnRefresh(NetworkNews.Refresh_Hero);
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), true, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904U), (ushort) 15);
        if (this.WarhallProtocol != (ushort) 2476)
          this.WarhallProtocol = (ushort) 0;
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4892U), this.mStringTable.GetStringByID(4893U), this.mStringTable.GetStringByID(4894U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4895U), this.mStringTable.GetStringByID(4896U), this.mStringTable.GetStringByID(4897U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5729U), this.mStringTable.GetStringByID(5730U), this.mStringTable.GetStringByID(5731U));
        break;
      case 5:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4910U), this.mStringTable.GetStringByID(4911U), this.mStringTable.GetStringByID(4912U));
        break;
      case 6:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5732U), this.mStringTable.GetStringByID(5733U), this.mStringTable.GetStringByID(5734U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 8:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4898U), this.mStringTable.GetStringByID(4899U), this.mStringTable.GetStringByID(4900U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5735U), this.mStringTable.GetStringByID(5736U), this.mStringTable.GetStringByID(5737U));
        break;
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4901U), this.mStringTable.GetStringByID(4902U), this.mStringTable.GetStringByID(4903U));
        break;
      case 11:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9769U), this.mStringTable.GetStringByID(4034U));
        break;
      case 12:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9770U), this.mStringTable.GetStringByID(4034U));
        break;
      case 13:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 14:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 15:
        ushort yolkIdbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.RallyDesPoint.zoneID, this.RallyDesPoint.pointID, (ushort) 0);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIdbyPointCode, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8564U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
  }

  public void RecvJoinRally(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 0:
      case 15:
        byte Index = MP.ReadByte();
        if (Index >= (byte) 8)
          return;
        this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_RallyMarching;
        if (num1 == (byte) 0)
          this.CancelShieldItemBuff();
        this.MarchEventTime[(int) Index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) Index].RequireTime = MP.ReadUInt();
        this.RallyCountDown[(int) Index].BeginTime = MP.ReadLong();
        this.RallyCountDown[(int) Index].RequireTime = MP.ReadUInt();
        this.MarchEventData[(int) Index].Point.zoneID = MP.ReadUShort();
        this.MarchEventData[(int) Index].Point.pointID = MP.ReadByte();
        this.MarchEventData[(int) Index].PointKind = POINT_KIND.PK_CITY;
        this.MarchEventData[(int) Index].DesPointLevel = MP.ReadByte();
        this.MarchEventData[(int) Index].DesPlayerName = MP.ReadString(13);
        if (num1 == (byte) 15)
          this.MarchEventData[(int) Index].bRallyHost = (byte) 3;
        ushort num2 = MP.ReadUShort();
        for (int index = 0; index < 5; ++index)
          this.MarchEventData[(int) Index].HeroID[index] = (ushort) 0;
        for (int index = 0; index < 16; ++index)
        {
          if (((int) num2 >> index & 1) == 1)
          {
            this.MarchEventData[(int) Index].TroopData[index / 4][index % 4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index] -= this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
          }
        }
        this.JoinedRallyDataType[(int) Index].MarchIndex = Index;
        this.JoinedRallyDataType[(int) Index].State = (byte) 1;
        this.JoinedRallyDataType[(int) Index].MarchEventTime.BeginTime = this.RallyCountDown[(int) Index].BeginTime;
        this.JoinedRallyDataType[(int) Index].MarchEventTime.RequireTime = this.RallyCountDown[(int) Index].RequireTime;
        this.JoinedRallyDataType[(int) Index].RallyPoint.zoneID = this.MarchEventData[(int) Index].Point.zoneID;
        this.JoinedRallyDataType[(int) Index].RallyPoint.pointID = this.MarchEventData[(int) Index].Point.pointID;
        if (this.WarlobbyDetail != null)
        {
          if (this.WarlobbyDetail.EventTime.BeginTime > 0L)
          {
            this.WarlobbyDetail.SelfParticipateTroopIndex = Index;
            this.WarhallProtocol = (ushort) 2487;
          }
          else
            this.WarhallProtocol = (ushort) 0;
        }
        else
          this.WarhallProtocol = (ushort) 0;
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if ((UnityEngine.Object) menu != (UnityEngine.Object) null)
        {
          if (menu.m_eMapMode == EUIOriginMapMode.OriginMap || menu.m_eMapMode == EUIOriginMapMode.WorldMap)
          {
            menu.CloseMenu();
          }
          else
          {
            DataManager.msgBuffer[0] = (byte) 81;
            GameConstants.GetBytes((ushort) Index, DataManager.msgBuffer, 1);
            GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
          }
        }
        this.SetFightHeroData();
        GameManager.OnRefresh(NetworkNews.Refresh_Hero);
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), true, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
        this.SetQueueBarData((EQueueBarIndex) (22 + (int) Index), true, this.RallyCountDown[(int) Index].BeginTime, this.RallyCountDown[(int) Index].RequireTime);
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 2:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4968U), this.mStringTable.GetStringByID(9769U), this.mStringTable.GetStringByID(4970U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5888U), this.mStringTable.GetStringByID(5889U), this.mStringTable.GetStringByID(5890U));
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
        break;
      case 5:
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5885U), this.mStringTable.GetStringByID(5886U), this.mStringTable.GetStringByID(5887U));
        break;
      case 6:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5748U), this.mStringTable.GetStringByID(5749U), this.mStringTable.GetStringByID(5750U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5882U), this.mStringTable.GetStringByID(5883U), this.mStringTable.GetStringByID(5884U));
        break;
      case 8:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4989U), this.mStringTable.GetStringByID(4990U), this.mStringTable.GetStringByID(4991U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5742U), this.mStringTable.GetStringByID(5743U), this.mStringTable.GetStringByID(5744U));
        break;
      case 11:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
    }
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
  }

  public void RecvArrivedRallyPoint(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_RallyStanby;
    this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
    this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
    this.MarchEventData[(int) index].DesPointLevel = MP.ReadByte();
    this.MarchEventData[(int) index].DesPlayerName = MP.ReadString(13);
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, 0L, 0U);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4974U), (ushort) 13);
  }

  public void RecvRallyAtkMarch(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_RallyAttack;
    this.JoinedRallyDataType[(int) index].RallyPoint = this.MarchEventData[(int) index].Point;
    this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
    this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
    this.MarchEventData[(int) index].DesPointLevel = MP.ReadByte();
    this.MarchEventData[(int) index].DesPlayerName = MP.ReadString(13);
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_CITY;
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, 0L, 0U);
    this.JoinedRallyDataType[(int) index].State = (byte) 2;
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
  }

  public void RecvJoinedRallyData(MessagePacket MP)
  {
    Array.Clear((Array) this.JoinedRallyDataType, 0, this.JoinedRallyDataType.Length);
    byte num1 = MP.ReadByte();
    for (int index1 = 0; index1 < (int) num1; ++index1)
    {
      byte index2 = MP.ReadByte();
      if (index2 >= (byte) 8)
        return;
      this.JoinedRallyDataType[(int) index2].MarchIndex = index2;
      byte num2 = MP.ReadByte();
      this.JoinedRallyDataType[(int) index2].State = num2;
      this.JoinedRallyDataType[(int) index2].MarchEventTime.BeginTime = MP.ReadLong();
      this.JoinedRallyDataType[(int) index2].MarchEventTime.RequireTime = MP.ReadUInt();
      this.JoinedRallyDataType[(int) index2].RallyPoint.zoneID = MP.ReadUShort();
      this.JoinedRallyDataType[(int) index2].RallyPoint.pointID = MP.ReadByte();
      this.SetQueueBarData((EQueueBarIndex) (22 + (int) this.JoinedRallyDataType[(int) index2].MarchIndex), true, this.JoinedRallyDataType[(int) index2].MarchEventTime.BeginTime, this.JoinedRallyDataType[(int) index2].MarchEventTime.RequireTime);
      DataManager.Instance.SetRecvQueueBarData(22 + (int) this.JoinedRallyDataType[(int) index2].MarchIndex);
    }
    this.CheckTroolCount();
  }

  public void RecvWarBegin(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904U), (ushort) 15);
        break;
      case 1:
        string tmpS = MP.ReadString(13);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(tmpS);
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4905U));
        GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), (ushort) 15);
        break;
    }
  }

  public void RecvRefreshResources(MessagePacket MP)
  {
    for (int index = 0; index < 5; ++index)
      this.Resource[index].Stock = MP.ReadUInt();
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
  }

  public void ShowLordProfile(string name)
  {
    if (this.mLordName == null)
      this.mLordName = StringManager.Instance.SpawnString();
    this.mLordName.ClearString();
    this.mLordName.Append(name);
    (GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door).OpenMenu(EGUIWindow.UI_LordInfo, 2, bCameraMode: true);
  }

  public void RecvLordProfile(MessagePacket MP)
  {
    if (MP.ReadByte() < (byte) 1)
    {
      if (this.mLordProfile.AllianceTag == null)
        this.mLordProfile.AllianceTag = StringManager.Instance.SpawnString();
      if (this.mLordProfile.PlayerName == null)
        this.mLordProfile.PlayerName = StringManager.Instance.SpawnString();
      if (this.mLordProfile.Equips == null)
        this.mLordProfile.Equips = new PlayerProfileEquip[8];
      this.mLordProfile.AllianceTag.ClearString();
      this.mLordProfile.PlayerName.ClearString();
      this.mLordProfile.PlayerName.Append(this.mLordName);
      this.mLordProfile.Head = MP.ReadUShort();
      MP.ReadStringPlus(3, this.mLordProfile.AllianceTag);
      this.mLordProfile.KindomID = MP.ReadUShort();
      this.mLordProfile.AlliID = MP.ReadUInt();
      this.mLordProfile.AlliRank = MP.ReadByte();
      this.mLordProfile.Kills = MP.ReadULong();
      this.mLordProfile.Power = MP.ReadULong();
      this.mLordProfile.VipPoint = MP.ReadUInt();
      this.mLordProfile.Level = MP.ReadByte();
      this.mLordProfile.Enhance = MP.ReadByte();
      this.mLordProfile.Star = MP.ReadByte();
      for (int index = 0; index < 8; ++index)
      {
        this.mLordProfile.Equips[index].ItemID = MP.ReadUShort();
        this.mLordProfile.Equips[index].color = MP.ReadByte();
      }
      this.mLordProfile.Title = MP.ReadUShort();
      this.mLordProfile.WorldTitle = MP.ReadUShort();
      this.mLordProfile.TotalCastleStar = MP.ReadUShort();
      this.mLordProfile.NobilityTitle = MP.ReadUShort();
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 2, 1);
    }
    else
    {
      GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(154U), (ushort) byte.MaxValue);
      if ((UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_LordInfo) != (UnityEngine.Object) null)
        ((Door) GUIManager.Instance.FindMenu(EGUIWindow.Door)).CloseMenu();
      GUIManager.Instance.HideUILock(EUILock.LordInfo);
    }
  }

  public void RecvLordStatistic(MessagePacket MP)
  {
    if (MP.ReadByte() >= (byte) 1)
      return;
    this.mLordStat.BattleWin_Attack = MP.ReadUInt();
    this.mLordStat.BattleLose_Attack = MP.ReadUInt();
    this.mLordStat.BattleWin_Defense = MP.ReadUInt();
    this.mLordStat.BattleLose_Defense = MP.ReadUInt();
    this.mLordStat.KillSoldiers = MP.ReadLong();
    this.mLordStat.KillTraps = MP.ReadLong();
    this.mLordStat.LoseSoldiers = MP.ReadLong();
    this.mLordStat.LoseTraps = MP.ReadLong();
    int num1 = (int) MP.ReadUInt();
    int num2 = (int) MP.ReadUInt();
    this.mLordStat.SiteBeDestroyed = MP.ReadUInt();
    this.mLordStat.DestroySite = MP.ReadUInt();
    int num3 = (int) MP.ReadUInt();
    int num4 = (int) MP.ReadUInt();
    this.mLordStat.CaptiveLords = MP.ReadUInt();
    this.mLordStat.KillLords = MP.ReadUInt();
    this.mLordStat.LordBeCaptive = MP.ReadUInt();
    this.mLordStat.LordBeKilled = MP.ReadUInt();
    this.mLordStat.LordBeEscaped = MP.ReadUInt();
    this.mLordStat.LordEscape = MP.ReadUInt();
    int num5 = (int) MP.ReadUInt();
    int num6 = (int) MP.ReadUInt();
    int num7 = (int) MP.ReadUInt();
    int num8 = (int) MP.ReadUInt();
    int num9 = (int) MP.ReadUInt();
    int num10 = (int) MP.ReadUInt();
    int num11 = (int) MP.ReadUInt();
    this.mLordStat.HelpAlliance_TurboCount = MP.ReadUInt();
    this.mLordStat.GatherCount = MP.ReadLong();
    this.mLordStat.ArenaRank = MP.ReadUInt();
    this.mLordStat.ArenaHistoryRank = MP.ReadUInt();
    this.mLordStat.ArenaWins = MP.ReadUInt();
    this.mLordStat.DamageEnemiesPowerCount = MP.ReadULong();
    this.mLordStat.SoldierBeHurtCount = MP.ReadLong();
    this.mLordStat.HurtSoldierCount = MP.ReadLong();
    this.mLordStat.SaveLordRewordCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_FoodCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_WoodCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_RockCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_OreCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_SilverCount = MP.ReadLong();
    this.mLordStat.HelpAlliance_GoldCount = MP.ReadLong();
    this.mLordStat.PetSkillUsed = MP.ReadUInt();
    this.mLordStat.PetSkillBeenUsed = MP.ReadUInt();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 3);
  }

  public unsafe void SetScoutData(
    byte ScoutLevel,
    byte[] ScoutContent,
    ushort ScoutContentLen,
    byte bKind = 0)
  {
    int index1 = 0;
    Array.Clear((Array) this.ScoutResource, 0, this.ScoutResource.Length);
    Array.Clear((Array) this.ReinforceInfo, 0, this.ReinforceInfo.Length);
    if (ScoutLevel >= (byte) 1)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          this.ScoutResource[index2] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
          index1 += 4;
        }
      }
      this.DefenseNum = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
      index1 += 4;
    }
    if (ScoutLevel >= (byte) 2)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        this.ScoutResource[4] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
        int startIdx = index1 + 4;
        this.TrapsNum = GameConstants.ConvertBytesToUInt(ScoutContent, startIdx);
        index1 = startIdx + 4;
      }
      this.TroopsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
      index1 += 2;
    }
    if (ScoutLevel >= (byte) 3 && bKind != (byte) 1)
    {
      this.ReinforceNum = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
      index1 += 4;
    }
    if (ScoutLevel >= (byte) 4)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        Array.Clear((Array) this.TrapsInfo, 0, this.TrapsInfo.Length);
        this.TrapsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        int startIdx = index1 + 2;
        this.ReinforceFlag = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx);
        index1 = startIdx + 2;
        for (int index3 = 0; index3 < 12; ++index3)
        {
          if (((int) this.TrapsFlag >> index3 & 1) == 1)
          {
            this.TrapsInfo[index3] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
          }
        }
      }
      if (bKind == (byte) 2)
      {
        this.ReinforceFlag = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        index1 += 2;
      }
    }
    if (ScoutLevel >= (byte) 5)
    {
      Array.Clear((Array) this.TroopsInfo, 0, this.TroopsInfo.Length);
      this.MainHero = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
      int index4 = index1 + 2;
      this.MainHeroHome = ScoutContent[index4];
      index1 = index4 + 1;
      for (int index5 = 0; index5 < 16; ++index5)
      {
        if (((int) this.TroopsFlag >> index5 & 1) == 1)
        {
          this.TroopsInfo[index5] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
          index1 += 4;
        }
      }
    }
    if (ScoutLevel >= (byte) 6)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        this.WallStatus = ScoutContent[index1];
        ++index1;
      }
      if (bKind != (byte) 1)
      {
        for (int index6 = 0; index6 < 16; ++index6)
        {
          if (((int) this.ReinforceFlag >> index6 & 1) == 1)
          {
            this.ReinforceInfo[index6] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
          }
        }
      }
    }
    if (ScoutLevel >= (byte) 7)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        this.MusterNum = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
        int startIdx = index1 + 4;
        this.MusterFlag = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx);
        index1 = startIdx + 2;
        for (int index7 = 0; index7 < 16; ++index7)
        {
          if (((int) this.MusterFlag >> index7 & 1) == 1)
          {
            this.MusterInfo[index7] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
          }
        }
      }
      if (bKind != (byte) 1)
      {
        this.ReinforcePlayerCount = ScoutContent[index1];
        ++index1;
        for (int index8 = 0; index8 < (int) this.ReinforcePlayerCount && index8 < this.ReinforcePlayerName.Length; ++index8)
        {
          this.ReinforcePlayerName[index8].Length = 0;
          string str = this.ReinforcePlayerName[index8].ToString();
          char* chars = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
          byte* bytes = &ScoutContent[index1];
          int charCount = Encoding.UTF8.GetCharCount(ScoutContent, index1, 13);
          if (charCount <= this.ReinforcePlayerName[index8].MaxLength)
          {
            Encoding.UTF8.GetChars(bytes, 13, chars, charCount);
            this.ReinforcePlayerName[index8].Length = charCount;
            chars[charCount] = char.MinValue;
          }
          bytes = (byte*) null;
          str = (string) null;
          index1 += 13;
        }
      }
    }
    if (ScoutLevel >= (byte) 8)
    {
      Array.Clear((Array) this.DefenseHero, 0, this.DefenseHero.Length);
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        this.MainHeroInfo.HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        int index9 = index1 + 2;
        this.MainHeroInfo.Rank = ScoutContent[index9];
        int index10 = index9 + 1;
        this.MainHeroInfo.Star = ScoutContent[index10];
        index1 = index10 + 1;
      }
      this.DefenseHeroCount = ScoutContent[index1];
      ++index1;
      for (int index11 = 0; index11 < (int) this.DefenseHeroCount && index11 < this.DefenseHero.Length; ++index11)
      {
        this.DefenseHero[index11].HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        int index12 = index1 + 2;
        this.DefenseHero[index11].Rank = ScoutContent[index12];
        int index13 = index12 + 1;
        this.DefenseHero[index11].Star = ScoutContent[index13];
        index1 = index13 + 1;
      }
    }
    if (ScoutLevel >= (byte) 9 && (bKind == (byte) 0 || bKind == (byte) 3))
    {
      Array.Clear((Array) this.BuildInfo, 0, this.BuildInfo.Length);
      this.BuildingCount = ScoutContent[index1];
      ++index1;
      for (int index14 = 0; index14 < (int) this.BuildingCount && index14 < this.BuildInfo.Length; ++index14)
      {
        this.BuildInfo[index14].BuildID = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        int index15 = index1 + 2;
        this.BuildInfo[index14].Lv = ScoutContent[index15];
        index1 = index15 + 1;
      }
    }
    if (ScoutLevel >= (byte) 10)
    {
      if (bKind == (byte) 0 || bKind == (byte) 3)
      {
        Array.Clear((Array) this.H_TroopsInfo, 0, this.H_TroopsInfo.Length);
        Array.Clear((Array) this.H_TrapsInfo, 0, this.H_TrapsInfo.Length);
        Array.Clear((Array) this.Strengthen_Info, 0, this.Strengthen_Info.Length);
        this.H_TrapsNum = 0U;
        this.H_TroopsNum = 0U;
        this.WallValue = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
        int startIdx1 = index1 + 4;
        this.WallMaxValue = GameConstants.ConvertBytesToUInt(ScoutContent, startIdx1);
        int startIdx2 = startIdx1 + 4;
        this.H_TroopsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx2);
        int startIdx3 = startIdx2 + 2;
        for (int index16 = 0; index16 < 16; ++index16)
        {
          if (((int) this.H_TroopsFlag >> index16 & 1) == 1)
          {
            this.H_TroopsInfo[index16] = GameConstants.ConvertBytesToUInt(ScoutContent, startIdx3);
            startIdx3 += 4;
            this.H_TroopsNum += this.H_TroopsInfo[index16];
          }
        }
        this.H_TrapsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx3);
        index1 = startIdx3 + 2;
        for (int index17 = 0; index17 < 12; ++index17)
        {
          if (((int) this.H_TrapsFlag >> index17 & 1) == 1)
          {
            this.H_TrapsInfo[index17] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
            this.H_TrapsNum += this.H_TrapsInfo[index17];
          }
        }
      }
      if (bKind != (byte) 1)
      {
        this.StrengthenCount = ScoutContent[index1];
        ++index1;
        for (int index18 = 0; index18 < (int) this.StrengthenCount && index18 < 14; ++index18)
        {
          this.Strengthen_Info[index18].ItemID = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
          int startIdx = index1 + 2;
          this.Strengthen_Info[index18].Time = GameConstants.ConvertBytesToUInt(ScoutContent, startIdx);
          index1 = startIdx + 4;
        }
      }
    }
    if (bKind == (byte) 3)
      return;
    if (ScoutLevel >= (byte) 2 && bKind == (byte) 0)
    {
      if (index1 >= (int) ScoutContentLen)
        return;
      this.bCaveMainHero = ScoutContent[index1] != (byte) 0;
      int startIdx4 = index1 + 1;
      this.CaveNum = GameConstants.ConvertBytesToUInt(ScoutContent, startIdx4);
      int startIdx5 = startIdx4 + 4;
      this.CaveFlag = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx5);
      index1 = startIdx5 + 2;
      if (ScoutLevel >= (byte) 5)
      {
        for (int index19 = 0; index19 < 16; ++index19)
        {
          if (((int) this.CaveFlag >> index19 & 1) == 1)
          {
            this.CaveInfo[index19] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
          }
        }
      }
    }
    if (ScoutLevel >= (byte) 3 && bKind == (byte) 0)
    {
      this.CantonmentMainHero = (ushort) 0;
      if (index1 >= (int) ScoutContentLen)
        return;
      this.CantonmentNum = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
      index1 += 4;
      if (ScoutLevel >= (byte) 4)
      {
        this.CantonmentFlag = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        index1 += 2;
      }
      if (ScoutLevel >= (byte) 6)
      {
        for (int index20 = 0; index20 < 16; ++index20)
        {
          if (((int) this.CantonmentFlag >> index20 & 1) == 1)
          {
            this.CantonmentInfo[index20] = GameConstants.ConvertBytesToUInt(ScoutContent, index1);
            index1 += 4;
          }
        }
      }
      if (ScoutLevel >= (byte) 7)
      {
        this.CantonmentPlayerName.Length = 0;
        string str = this.CantonmentPlayerName.ToString();
        char* chars = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
        byte* bytes = &ScoutContent[index1];
        int charCount = Encoding.UTF8.GetCharCount(ScoutContent, index1, 13);
        if (charCount <= this.CantonmentPlayerName.MaxLength)
        {
          Encoding.UTF8.GetChars(bytes, 13, chars, charCount);
          this.CantonmentPlayerName.Length = charCount;
          chars[charCount] = char.MinValue;
        }
        bytes = (byte*) null;
        str = (string) null;
        index1 += 13;
      }
      if (ScoutLevel >= (byte) 8)
      {
        this.CantonmentMainHero = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
        int index21 = index1 + 2;
        this.CantonmentHeroCount = ScoutContent[index21];
        index1 = index21 + 1;
        for (int index22 = 0; index22 < (int) this.CantonmentHeroCount && index22 < this.CantonmentHero.Length; ++index22)
        {
          this.CantonmentHero[index22].HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, index1);
          int index23 = index1 + 2;
          this.CantonmentHero[index22].Rank = ScoutContent[index23];
          int index24 = index23 + 1;
          this.CantonmentHero[index22].Star = ScoutContent[index24];
          index1 = index24 + 1;
        }
      }
    }
    if (ScoutLevel < (byte) 9 || bKind != (byte) 0 && bKind != (byte) 3)
      return;
    byte num = ScoutContent[index1];
    byte buildingCount = this.BuildingCount;
    this.BuildingCount += num;
    int startIdx6 = index1 + 1;
    for (int index25 = (int) buildingCount; index25 < (int) this.BuildingCount && index25 < this.BuildInfo.Length; ++index25)
    {
      this.BuildInfo[index25].BuildID = GameConstants.ConvertBytesToUShort(ScoutContent, startIdx6);
      int index26 = startIdx6 + 2;
      this.BuildInfo[index25].Lv = ScoutContent[index26];
      startIdx6 = index26 + 1;
    }
  }

  public void SendAllyPoint(string name)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.AllyPoint))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLYPOINT;
    messagePacket.AddSeqId();
    messagePacket.Add(name, 13);
    messagePacket.Send();
  }

  public void RecvAllyPoint(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        this.AllyMemberLoc.zoneID = MP.ReadUShort();
        this.AllyMemberLoc.pointID = MP.ReadByte();
        if ((double) DataManager.MapDataController.CheckLenght(GameConstants.getTileMapPosbyPointCode(this.AllyMemberLoc.zoneID, this.AllyMemberLoc.pointID)) == 0.0)
        {
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829U), this.mStringTable.GetStringByID(119U));
          GUIManager.Instance.HideUILock(EUILock.AllyPoint);
          return;
        }
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if (UILordInfo.OpenTransport)
        {
          menu.OpenMenu(EGUIWindow.UI_Market_Help, 3, this.AllyMemberIdx);
          UILordInfo.OpenTransport = false;
          break;
        }
        if ((bool) (UnityEngine.Object) menu && this.AllyMemberIdx >= 0 && this.AllyMemberIdx < this.AllianceMember.Length)
        {
          menu.OpenMenu(EGUIWindow.UI_Market_Help, 2, this.AllyMemberIdx);
          break;
        }
        break;
      case 1:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4032U), this.mStringTable.GetStringByID(3957U), this.mStringTable.GetStringByID(4033U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(3957U), this.mStringTable.GetStringByID(4828U));
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.AllyPoint);
  }

  public void SendResPointLv(PointCode point)
  {
    if (!GUIManager.Instance.ShowUILock(EUILock.ResPointOwnerLv))
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_RESPOINT_OWNER_LV;
    messagePacket.AddSeqId();
    messagePacket.Add(point.zoneID);
    messagePacket.Add(point.pointID);
    messagePacket.Send();
  }

  public void RecvResPointOwnerLv(MessagePacket MP)
  {
    if (MP.ReadByte() == (byte) 0)
    {
      byte lv = MP.ReadByte();
      Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
      if ((bool) (UnityEngine.Object) menu)
        menu.m_GroundInfo.OpenDetectPanel(true, lv);
    }
    GUIManager.Instance.HideUILock(EUILock.ResPointOwnerLv);
  }

  public void InitAltarTime()
  {
    this.m_AltarEffect.BeginTime = 0L;
    this.m_AltarEffect.RequireTime = 0U;
  }

  public void RecvAltarBuffTime(MessagePacket MP)
  {
    this.m_AltarEffect.BeginTime = MP.ReadLong();
    this.m_AltarEffect.RequireTime = MP.ReadUInt();
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Build);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Altar, 0);
  }

  public void RecvAltarBuffClose()
  {
    this.m_AltarEffect.BeginTime = 0L;
    this.m_AltarEffect.RequireTime = 0U;
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Build);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Altar, 0);
  }

  public byte GetVIPLevel(uint vipPoint)
  {
    VIP_DataTbl recordByIndex = this.VIPLevelTable.GetRecordByIndex(0);
    this.UpdateFreeCompleteTime();
    for (int Index = 0; Index < this.VIPLevelTable.TableCount; ++Index)
    {
      recordByIndex = this.VIPLevelTable.GetRecordByIndex(Index);
      if (vipPoint < recordByIndex.VIPPoint)
        return (byte) recordByIndex.VIPLevel;
    }
    return (byte) recordByIndex.VIPLevel;
  }

  public WarlobbyData GetWarlobbyDataObj()
  {
    WarlobbyData warlobbyDataObj = (WarlobbyData) null;
    if (this.WarlobbyDataCountIdx == this.WarlobbyDataPool.Count)
    {
      int count1 = this.WarlobbyDataPool.Count;
      for (byte index = 0; index < (byte) 10; ++index)
      {
        int count2 = this.WarlobbyDataPool.Count;
        this.WarlobbyDataPool.Insert(count2, new WarlobbyData(count2));
      }
    }
    int warlobbyDataCountIdx = this.WarlobbyDataCountIdx;
    for (int index1 = 0; index1 < this.WarlobbyDataPool.Count; ++index1)
    {
      int index2 = (index1 + warlobbyDataCountIdx) % this.WarlobbyDataPool.Count;
      warlobbyDataObj = this.WarlobbyDataPool[index2];
      if (warlobbyDataObj != null)
      {
        this.WarlobbyDataPool[index2] = (WarlobbyData) null;
        break;
      }
    }
    ++this.WarlobbyDataCountIdx;
    warlobbyDataObj.Empty();
    return warlobbyDataObj;
  }

  public void ReleaseWarlobbyDataObj(WarlobbyData Data)
  {
    if (Data == null || this.WarlobbyDataCountIdx == 0)
      return;
    --this.WarlobbyDataCountIdx;
    this.WarlobbyDataPool[(int) Data.ListIndex] = Data;
  }

  public WarlobbyTroop GetWarlobbyTroopDataObj()
  {
    WarlobbyTroop warlobbyTroopDataObj = (WarlobbyTroop) null;
    if (this.WarlobbyTroopDataCountIdx == this.WarlobbyTroopDataPool.Count)
    {
      int count1 = this.WarlobbyTroopDataPool.Count;
      for (byte index = 0; index < (byte) 10; ++index)
      {
        int count2 = this.WarlobbyTroopDataPool.Count;
        this.WarlobbyTroopDataPool.Insert(count2, new WarlobbyTroop(count2));
      }
    }
    int troopDataCountIdx = this.WarlobbyTroopDataCountIdx;
    for (int index1 = 0; index1 < this.WarlobbyTroopDataPool.Count; ++index1)
    {
      int index2 = (index1 + troopDataCountIdx) % this.WarlobbyTroopDataPool.Count;
      warlobbyTroopDataObj = this.WarlobbyTroopDataPool[index2];
      if (warlobbyTroopDataObj != null)
      {
        this.WarlobbyTroopDataPool[index2] = (WarlobbyTroop) null;
        break;
      }
    }
    ++this.WarlobbyTroopDataCountIdx;
    warlobbyTroopDataObj.Empty();
    return warlobbyTroopDataObj;
  }

  public void ReleaseWarlobbyTroopDataObj(WarlobbyTroop Data)
  {
    if (Data == null || this.WarlobbyTroopDataCountIdx == 0)
      return;
    --this.WarlobbyTroopDataCountIdx;
    this.WarlobbyTroopDataPool[(int) Data.ListIndex] = Data;
  }

  public void RecvWallDataNum(MessagePacket MP)
  {
    this.ActiveRallyRecNum = MP.ReadUInt();
    this.BeingRallyRecNum = MP.ReadUInt();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4);
  }

  private void sendMarshalList()
  {
    this.EmptyWarHall(false);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.AddSeqId();
    messagePacket.Protocol = Protocol._MSG_REQUEST_WARHALL_LIST;
    messagePacket.Send();
  }

  public void RecvWallHallData(MessagePacket MP)
  {
    this.WarhallProtocol = (ushort) 2476;
    byte index1 = MP.ReadByte();
    uint index2 = MP.ReadUInt();
    bool flag = true;
    if ((int) index1 >= this.WarHall.Length)
      return;
    if (this.WarHall[(int) index1] == null)
      this.WarHall[(int) index1] = new List<WarlobbyData>();
    WarlobbyData warlobbyDataObj;
    if ((long) index2 < (long) this.WarHall[(int) index1].Count)
    {
      if (this.WarHall[(int) index1][(int) index2] != null)
      {
        warlobbyDataObj = this.WarHall[(int) index1][(int) index2];
      }
      else
      {
        warlobbyDataObj = this.GetWarlobbyDataObj();
        this.WarHall[(int) index1][(int) index2] = warlobbyDataObj;
      }
      flag = false;
    }
    else
    {
      int num = (int) ((long) index2 - (long) this.WarHall[(int) index1].Count + 1L);
      for (int index3 = 0; index3 < num; ++index3)
        this.WarHall[(int) index1].Add(this.GetWarlobbyDataObj());
      warlobbyDataObj = this.WarHall[(int) index1][(int) index2];
    }
    warlobbyDataObj.PositionInfo = (byte) 0;
    warlobbyDataObj.Init(MP);
    warlobbyDataObj.AllyHomeKingdom = MP.ReadUShort();
    if (warlobbyDataObj.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
      this.Sponsor = (ushort) (index2 + 1U);
    if (flag)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4);
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int) index2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RecvWallHallDel(MessagePacket MP)
  {
    byte index1 = MP.ReadByte();
    uint index2 = MP.ReadUInt();
    if ((int) index1 >= this.WarHall.Length || this.WarHall[(int) index1] == null)
      return;
    if ((long) index2 < (long) this.WarHall[(int) index1].Count)
    {
      this.ReleaseWarlobbyDataObj(this.WarHall[(int) index1][(int) index2]);
      this.WarHall[(int) index1].RemoveAt((int) index2);
    }
    if (index1 == (byte) 0 && this.Sponsor > (ushort) 0 && (long) ((int) this.Sponsor - 1) >= (long) index2)
    {
      if ((long) ((int) this.Sponsor - 1) == (long) index2)
        this.Sponsor = (ushort) 0;
      else
        --this.Sponsor;
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
  }

  public void RecvWallHallDetail(MessagePacket MP)
  {
    if (this.WarlobbyDetail == null)
      this.WarlobbyDetail = this.GetWarlobbyDataObj();
    this.WarlobbyDetail.PositionInfo = (byte) 1;
    this.WarlobbyDetail.Init(MP);
    this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte();
    this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte();
    this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort();
    if ((int) this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
    {
      int num = this.WarTroop.Count - (int) this.WarlobbyDetail.ListDetailRecNum;
      for (int index = 0; index < num; ++index)
      {
        this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index]);
        this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index] = (WarlobbyTroop) null;
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RecvWallHallDetailClose(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    GUIManager instance = GUIManager.Instance;
    if ((UnityEngine.Object) instance.FindMenu(EGUIWindow.UI_Rally) != (UnityEngine.Object) null)
    {
      instance.MsgStr.ClearString();
      CString tmpS = StringManager.Instance.StaticString1024();
      tmpS.Append(this.WarlobbyDetail.AllyName);
      if (this.WarlobbyDetail.WonderID != byte.MaxValue)
        instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.WonderID, (ushort) 0));
      else if (this.WarlobbyDetail.AttackOrDefense == (byte) 0)
        instance.MsgStr.StringToFormat(this.WarlobbyDetail.EnemyName);
      else
        instance.MsgStr.StringToFormat(tmpS);
      switch (num)
      {
        case 0:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4980U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4979U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4981U));
          if (this.WarlobbyDetail.Kind == (byte) 0 && this.WarlobbyDetail.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
          {
            GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4061U), (ushort) 14);
            break;
          }
          break;
        case 1:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4987U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4986U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4988U));
          break;
        case 2:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8575U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        case 3:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8573U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        case 4:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        default:
          instance.MsgStr.AppendFormat("{0}");
          break;
      }
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
    }
    else if (num == (byte) 0)
    {
      this.DelRallyUIStack();
      if (this.WarlobbyDetail != null && this.WarlobbyDetail.Kind == (byte) 0 && this.WarlobbyDetail.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4061U), (ushort) 14);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
    }
    else
    {
      this.DelRallyUIStack();
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
    }
    this.EmptyRallyDetail();
  }

  public void RecvWallHallTroop(MessagePacket MP)
  {
    uint index1 = MP.ReadUInt();
    WarlobbyTroop warlobbyTroopDataObj;
    if ((long) index1 < (long) this.WarTroop.Count)
    {
      if (this.WarTroop[(int) index1] != null)
      {
        warlobbyTroopDataObj = this.WarTroop[(int) index1];
      }
      else
      {
        warlobbyTroopDataObj = this.GetWarlobbyTroopDataObj();
        this.WarTroop[(int) index1] = warlobbyTroopDataObj;
      }
    }
    else
    {
      int num = (int) ((long) index1 - (long) this.WarTroop.Count + 1L);
      for (int index2 = 0; index2 < num; ++index2)
        this.WarTroop.Add(this.GetWarlobbyTroopDataObj());
      warlobbyTroopDataObj = this.WarTroop[(int) index1];
    }
    warlobbyTroopDataObj.Init(MP);
    this.WarTroopStatistic.UpdateTroop();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
    if (index1 != 0U)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 5);
  }

  public void RecvWallHallTroopDel(MessagePacket MP)
  {
    uint index = MP.ReadUInt();
    if ((long) index < (long) this.WarTroop.Count)
    {
      WarlobbyTroop.DelIndex = (byte) index;
      this.WarTroopStatistic.UpdateTroop();
      this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) index]);
      this.WarTroop.RemoveAt((int) index);
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
  }

  public void sendCancelRally()
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_CANCEL_RALLY;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvCancelRally(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
    this.Sponsor = (ushort) 0;
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, byte.MaxValue);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
  }

  public void EmptyRallyDetail()
  {
    for (int index = 0; index < this.WarTroop.Count; ++index)
      this.ReleaseWarlobbyTroopDataObj(this.WarTroop[index]);
    this.WarTroop.Clear();
    if (this.WarlobbyDetail == null)
      return;
    this.WarlobbyDetail.Empty();
  }

  public void RespKickWarhallAttackMember(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    if (num <= (byte) 0 || num != (byte) 2)
      return;
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9922U), (ushort) byte.MaxValue);
  }

  public void RespKickWarhallDefenceMember(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    if (num <= (byte) 0)
      return;
    Debug.Log((object) ("Kick Error " + (object) num));
  }

  public void EmptyWarHall(bool EmptyNum = true)
  {
    if (EmptyNum)
    {
      this.ActiveRallyRecNum = 0U;
      this.BeingRallyRecNum = 0U;
    }
    this.Sponsor = (ushort) 0;
    for (int index1 = 0; index1 < this.WarHall.Length; ++index1)
    {
      if (this.WarHall[index1] != null)
      {
        for (int index2 = 0; index2 < this.WarHall[index1].Count; ++index2)
          this.ReleaseWarlobbyDataObj(this.WarHall[index1][index2]);
      }
    }
    if (this.WarHall[0] != null)
      this.WarHall[0].Clear();
    if (this.WarHall[1] != null)
      this.WarHall[1].Clear();
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
  }

  public void CheckWalHall_List()
  {
    if (this.WarhallProtocol != (ushort) 2476)
    {
      this.sendMarshalList();
    }
    else
    {
      if ((this.ActiveRallyRecNum <= 0U || this.WarHall[0] != null && (long) this.ActiveRallyRecNum == (long) this.WarHall[0].Count) && (this.BeingRallyRecNum <= 0U || this.WarHall[1] != null && (long) this.BeingRallyRecNum == (long) this.WarHall[1].Count) && (this.WarHall[0] == null || (long) this.ActiveRallyRecNum == (long) this.WarHall[0].Count) && (this.WarHall[1] == null || (long) this.BeingRallyRecNum == (long) this.WarHall[1].Count))
        return;
      this.WarhallProtocol = (ushort) 0;
      this.sendMarshalList();
    }
  }

  public void DelRallyUIStack()
  {
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if (!((UnityEngine.Object) menu != (UnityEngine.Object) null) || menu.m_WindowStack.Count <= 0)
      return;
    for (int index = menu.m_WindowStack.Count - 1; index >= 0; --index)
    {
      if (menu.m_WindowStack[index].m_eWindow == EGUIWindow.UI_Rally)
      {
        if (index == menu.m_WindowStack.Count - 1)
        {
          menu.CloseMenu();
          break;
        }
        menu.m_WindowStack.RemoveAt(index);
        break;
      }
    }
  }

  public void RespWonderTeamInitDetail(MessagePacket MP)
  {
    if (this.WarlobbyDetail == null)
      this.WarlobbyDetail = this.GetWarlobbyDataObj();
    this.WarlobbyDetail.InitWonder(MP);
    this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte();
    this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte();
    this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort();
    if ((int) this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
    {
      int num = this.WarTroop.Count - (int) this.WarlobbyDetail.ListDetailRecNum;
      for (int index = 0; index < num; ++index)
      {
        this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index]);
        this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index] = (WarlobbyTroop) null;
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
  }

  public void RespWonderTeamEnd(MessagePacket MP)
  {
    GUIManager instance = GUIManager.Instance;
    if ((UnityEngine.Object) instance.FindMenu(EGUIWindow.UI_Rally) == (UnityEngine.Object) null)
    {
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
      this.DelRallyUIStack();
    }
    else
    {
      byte num = MP.ReadByte();
      if (num > (byte) 2 || this.WarlobbyDetail == null)
        return;
      instance.MsgStr.ClearString();
      instance.MsgStr.StringToFormat(DataManager.mapDataController.GetYolkName((ushort) this.WarlobbyDetail.WonderID, (ushort) 0));
      switch (num)
      {
        case 0:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8575U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        case 1:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8573U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
        default:
          instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598U));
          GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
          break;
      }
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
    }
  }

  public void RespWonderTeamUpdate(MessagePacket MP)
  {
    uint index1 = MP.ReadUInt();
    WarlobbyTroop warlobbyTroopDataObj;
    if ((long) index1 < (long) this.WarTroop.Count)
    {
      if (this.WarTroop[(int) index1] != null)
      {
        warlobbyTroopDataObj = this.WarTroop[(int) index1];
      }
      else
      {
        warlobbyTroopDataObj = this.GetWarlobbyTroopDataObj();
        this.WarTroop[(int) index1] = warlobbyTroopDataObj;
      }
    }
    else
    {
      int num = (int) ((long) index1 - (long) this.WarTroop.Count + 1L);
      for (int index2 = 0; index2 < num; ++index2)
        this.WarTroop.Add(this.GetWarlobbyTroopDataObj());
      warlobbyTroopDataObj = this.WarTroop[(int) index1];
    }
    warlobbyTroopDataObj.Init(MP);
    this.WarTroopStatistic.UpdateTroop();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
    if (index1 != 0U)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 5);
  }

  public void RespWinderTeamDel(MessagePacket MP)
  {
    uint index = MP.ReadUInt();
    if ((long) index < (long) this.WarTroop.Count)
    {
      WarlobbyTroop.DelIndex = (byte) index;
      this.WarTroopStatistic.UpdateTroop();
      this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) index]);
      this.WarTroop.RemoveAt((int) index);
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
  }

  public void RespWonderWarhallList(MessagePacket MP)
  {
    this.WarhallProtocol = (ushort) 2476;
    byte index1 = MP.ReadByte();
    uint index2 = MP.ReadUInt();
    bool flag = true;
    if ((int) index1 >= this.WarHall.Length)
      return;
    if (this.WarHall[(int) index1] == null)
      this.WarHall[(int) index1] = new List<WarlobbyData>();
    WarlobbyData warlobbyDataObj;
    if ((long) index2 < (long) this.WarHall[(int) index1].Count)
    {
      if (this.WarHall[(int) index1][(int) index2] != null)
      {
        warlobbyDataObj = this.WarHall[(int) index1][(int) index2];
      }
      else
      {
        warlobbyDataObj = this.GetWarlobbyDataObj();
        this.WarHall[(int) index1][(int) index2] = warlobbyDataObj;
      }
      flag = false;
    }
    else
    {
      int num = (int) ((long) index2 - (long) this.WarHall[(int) index1].Count + 1L);
      for (int index3 = 0; index3 < num; ++index3)
        this.WarHall[(int) index1].Add(this.GetWarlobbyDataObj());
      warlobbyDataObj = this.WarHall[(int) index1][(int) index2];
    }
    warlobbyDataObj.PositionInfo = (byte) 0;
    warlobbyDataObj.Kind = MP.ReadByte();
    warlobbyDataObj.EventTime.BeginTime = MP.ReadLong();
    warlobbyDataObj.EventTime.RequireTime = MP.ReadUInt();
    if (index1 == (byte) 0)
      warlobbyDataObj.InitWonderAttack(MP);
    else
      warlobbyDataObj.InitWonderDefence(MP);
    warlobbyDataObj.AllyHomeKingdom = MP.ReadUShort();
    if (warlobbyDataObj.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
      this.Sponsor = (ushort) (index2 + 1U);
    if (flag)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4);
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int) index2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RespWonderListDetail(MessagePacket MP)
  {
    if (this.WarlobbyDetail == null)
      this.WarlobbyDetail = this.GetWarlobbyDataObj();
    byte num1 = MP.ReadByte();
    this.WarlobbyDetail.Kind = MP.ReadByte();
    this.WarlobbyDetail.EventTime.BeginTime = MP.ReadLong();
    this.WarlobbyDetail.EventTime.RequireTime = MP.ReadUInt();
    this.WarlobbyDetail.PositionInfo = (byte) 1;
    if (num1 == (byte) 0)
      this.WarlobbyDetail.InitWonderAttack(MP);
    else
      this.WarlobbyDetail.InitWonderDefence(MP);
    this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte();
    this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte();
    this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort();
    if ((int) this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
    {
      int num2 = this.WarTroop.Count - (int) this.WarlobbyDetail.ListDetailRecNum;
      for (int index = 0; index < num2; ++index)
      {
        this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index]);
        this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index] = (WarlobbyTroop) null;
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RecvNPCWallHallData(MessagePacket MP)
  {
    this.WarhallProtocol = (ushort) 2476;
    byte type = 0;
    uint index = MP.ReadUInt();
    if ((int) type >= this.WarHall.Length)
      return;
    WarlobbyData warlobbyData;
    bool warHallInstance = this.GetWarHallInstance(type, index, out warlobbyData);
    warlobbyData.PositionInfo = (byte) 0;
    warlobbyData.InitNpc(MP);
    if (warlobbyData.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
      this.Sponsor = (ushort) (index + 1U);
    if (warHallInstance)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4);
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int) index);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  public void RecvNPCWallHallDetail(MessagePacket MP)
  {
    if (this.WarlobbyDetail == null)
      this.WarlobbyDetail = this.GetWarlobbyDataObj();
    this.WarlobbyDetail.PositionInfo = (byte) 1;
    this.WarlobbyDetail.InitNpc(MP);
    this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte();
    this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte();
    this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort();
    if ((int) this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
    {
      int count = this.WarTroop.Count - (int) this.WarlobbyDetail.ListDetailRecNum;
      for (int index = 0; index < count; ++index)
      {
        this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index]);
        this.WarTroop[(int) this.WarlobbyDetail.ListDetailRecNum + index] = (WarlobbyTroop) null;
      }
      this.WarTroop.RemoveRange((int) this.WarlobbyDetail.ListDetailRecNum, count);
    }
    if (this.WarhallProtocol == (ushort) 7313)
    {
      UIAlliance_Rally menu1 = GUIManager.Instance.FindMenu(EGUIWindow.UI_Rally) as UIAlliance_Rally;
      Door menu2 = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
      if ((UnityEngine.Object) menu2 != (UnityEngine.Object) null)
      {
        if ((UnityEngine.Object) menu1 == (UnityEngine.Object) null)
        {
          this.WarhallProtocol = (ushort) 0;
          menu2.OpenMenu(EGUIWindow.UI_Rally, 102);
        }
        else if (!menu1.gameObject.activeSelf)
        {
          menu2.CloseMenu();
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
        }
        else
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
      }
    }
    else
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
    GameManager.OnRefresh(NetworkNews.Refresh_QBarTime);
  }

  private bool GetWarHallInstance(byte type, uint index, out WarlobbyData warlobbyData)
  {
    if (this.WarHall[(int) type] == null)
      this.WarHall[(int) type] = new List<WarlobbyData>();
    if ((long) index < (long) this.WarHall[(int) type].Count)
    {
      if (this.WarHall[(int) type][(int) index] != null)
      {
        warlobbyData = this.WarHall[(int) type][(int) index];
      }
      else
      {
        warlobbyData = this.GetWarlobbyDataObj();
        this.WarHall[(int) type][(int) index] = warlobbyData;
      }
      return false;
    }
    int num = (int) ((long) index - (long) this.WarHall[(int) type].Count + 1L);
    for (int index1 = 0; index1 < num; ++index1)
      this.WarHall[(int) type].Add(this.GetWarlobbyDataObj());
    warlobbyData = this.WarHall[(int) type][(int) index];
    return true;
  }

  public void ResetLocalSave()
  {
    if (DataManager.StageDataController.isNotFirstInChapter != null)
      Array.Clear((Array) DataManager.StageDataController.isNotFirstInChapter, 0, DataManager.StageDataController.isNotFirstInChapter.Length);
    if (DataManager.StageDataController.isNotFirstInLine != null)
      Array.Clear((Array) DataManager.StageDataController.isNotFirstInLine, 0, DataManager.StageDataController.isNotFirstInLine.Length);
    DataManager.StageDataController.SaveisNotFirstInChapter();
  }

  public void RecvAllianceGift_Info(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    switch (num1)
    {
      case 1:
      case 3:
        this.mShowListIdx.Clear();
        this.mListGift.Clear();
        break;
    }
    byte num2 = MP.ReadByte();
    AllianceBoxDataType val = new AllianceBoxDataType();
    for (int index = 0; index < (int) num2; ++index)
    {
      val.SN = MP.ReadUInt();
      val.Status = MP.ReadByte();
      val.RcvTime = MP.ReadLong();
      val.BoxItemID = MP.ReadUShort();
      val.Item.ItemID = MP.ReadUShort();
      val.Item.Num = MP.ReadUShort();
      val.Item.ItemRank = MP.ReadByte();
      this.mShowListIdx.Add(val.SN);
      this.mListGift.Add(val.SN, val);
    }
    if (num1 != (byte) 2 && num1 != (byte) 3)
      return;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 1);
    GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
  }

  public void RecvAllianceGift_Open(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    switch (num)
    {
      case 0:
      case 2:
        if (this.RoleAlliance.GiftNum > (ushort) 0)
          --this.RoleAlliance.GiftNum;
        this.mGift_UpdateSN = MP.ReadUInt();
        AllianceBoxDataType val = this.mListGift[this.mGift_UpdateSN];
        if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
        {
          val.Status = MP.ReadByte();
          val.RcvTime = MP.ReadLong();
          val.BoxItemID = MP.ReadUShort();
          val.Item.ItemID = MP.ReadUShort();
          val.Item.Num = MP.ReadUShort();
          val.Item.ItemRank = MP.ReadByte();
          this.mListGift.Remove(this.mGift_UpdateSN);
          this.mListGift.Add(this.mGift_UpdateSN, val);
          if (num == (byte) 0)
          {
            Equip recordByKey = this.EquipTable.GetRecordByKey(val.Item.ItemID);
            if (recordByKey.PropertiesInfo[0].Propertieskey != (ushort) 6 && recordByKey.PropertiesInfo[0].Propertieskey != (ushort) 7)
            {
              int Quantity = (int) this.GetCurItemQuantity(val.Item.ItemID, val.Item.ItemRank) + (int) val.Item.Num;
              if (Quantity <= (int) ushort.MaxValue)
                this.SetCurItemQuantity(val.Item.ItemID, (ushort) Quantity, val.Item.ItemRank, 0L);
              if (!this.bGetLeadItem && GUIManager.Instance.IsLeadItem(recordByKey.EquipKind))
                this.bGetLeadItem = true;
            }
            GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
            this.RoleAlliance.Money = MP.ReadUInt();
            GameManager.OnRefresh();
          }
        }
        this.CDGiftTime = 300f;
        Array.Clear((Array) GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 2);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
        break;
    }
  }

  public void RecvAllianceGift_Delete(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
    if (num1 != (byte) 0)
      return;
    int num2 = (int) MP.ReadUShort();
    ushort num3 = MP.ReadUShort();
    for (int index = 0; index < (int) num3; ++index)
    {
      this.mGift_UpdateSN = MP.ReadUInt();
      if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
      {
        this.mListGift.Remove(this.mGift_UpdateSN);
        this.mShowListIdx.Remove(this.mGift_UpdateSN);
      }
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, (int) num3);
  }

  public void RecvAllianceGift_CheckExpired(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    for (int index = 0; index < (int) num2; ++index)
    {
      this.mGift_UpdateSN = MP.ReadUInt();
      AllianceBoxDataType allianceBoxDataType = this.mListGift[this.mGift_UpdateSN];
      if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
      {
        allianceBoxDataType.Status = MP.ReadByte();
        allianceBoxDataType.RcvTime = MP.ReadLong();
        allianceBoxDataType.BoxItemID = MP.ReadUShort();
        allianceBoxDataType.Item.ItemID = MP.ReadUShort();
        allianceBoxDataType.Item.Num = MP.ReadUShort();
        allianceBoxDataType.Item.ItemRank = MP.ReadByte();
        this.mListGift[this.mGift_UpdateSN] = allianceBoxDataType;
      }
    }
    if (num1 != (byte) 2 && num1 != (byte) 3)
      return;
    GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 1);
    GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
    GameManager.OnRefresh();
  }

  public void RecvAllianceGift_OpenAllBox(MessagePacket MP)
  {
    if (MP.ReadByte() == (byte) 0)
    {
      GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
      this.RoleAlliance.Money = MP.ReadUInt();
      byte num1 = MP.ReadByte();
      byte num2 = MP.ReadByte();
      for (int index = 0; index < (int) num2; ++index)
      {
        if (this.RoleAlliance.GiftNum > (ushort) 0)
          --this.RoleAlliance.GiftNum;
        this.mGift_UpdateSN = MP.ReadUInt();
        AllianceBoxDataType allianceBoxDataType = this.mListGift[this.mGift_UpdateSN];
        if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
        {
          allianceBoxDataType.Status = MP.ReadByte();
          allianceBoxDataType.RcvTime = MP.ReadLong();
          allianceBoxDataType.BoxItemID = MP.ReadUShort();
          allianceBoxDataType.Item.ItemID = MP.ReadUShort();
          allianceBoxDataType.Item.Num = MP.ReadUShort();
          allianceBoxDataType.Item.ItemRank = MP.ReadByte();
          this.mListGift[this.mGift_UpdateSN] = allianceBoxDataType;
        }
        Equip recordByKey = this.EquipTable.GetRecordByKey(allianceBoxDataType.Item.ItemID);
        if (recordByKey.PropertiesInfo[0].Propertieskey != (ushort) 6 && recordByKey.PropertiesInfo[0].Propertieskey != (ushort) 7)
        {
          int Quantity = (int) this.GetCurItemQuantity(allianceBoxDataType.Item.ItemID, allianceBoxDataType.Item.ItemRank) + (int) allianceBoxDataType.Item.Num;
          if (Quantity <= (int) ushort.MaxValue)
            this.SetCurItemQuantity(allianceBoxDataType.Item.ItemID, (ushort) Quantity, allianceBoxDataType.Item.ItemRank, 0L);
          if (!this.bGetLeadItem && GUIManager.Instance.IsLeadItem(recordByKey.EquipKind))
            this.bGetLeadItem = true;
        }
      }
      if (num1 != (byte) 2 && num1 != (byte) 3)
        return;
      GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
      Array.Clear((Array) GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 9);
      GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17);
      GameManager.OnRefresh();
    }
    else
      GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
  }

  public void RecvAllianceWonder_Info(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    byte num2 = MP.ReadByte();
    WonderData wonderData = new WonderData();
    if (num1 == (byte) 1 || num1 == (byte) 3)
      this.m_Wonders.Clear();
    for (int index = 0; index < (int) num2; ++index)
    {
      wonderData.KingdomID = MP.ReadUShort();
      wonderData.WonderID = MP.ReadByte();
      wonderData.OpenState = MP.ReadByte();
      wonderData.StateCountDown.BeginTime = MP.ReadLong();
      wonderData.StateCountDown.RequireTime = MP.ReadUInt();
      int num3 = this.m_Wonders.BinarySearch(wonderData, (IComparer<WonderData>) this.TC);
      if (num3 < 0)
        this.m_Wonders.Insert(~num3, wonderData);
    }
    if (num1 == (byte) 3 || num1 == (byte) 2)
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6);
    this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
  }

  public void Recv_MSG_RESP_CRYPT(MessagePacket MP)
  {
    this.m_CryptData.level = MP.ReadByte();
    this.m_CryptData.money = MP.ReadUShort();
    this.m_CryptData.startTime = MP.ReadLong();
    this.m_CryptData.kind = MP.ReadByte();
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0);
    GUIManager.Instance.HideUILock(EUILock.Crypt);
  }

  public void Recv_MSG_RESP_CRYPT_Start(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.m_CryptData.level = MP.ReadByte();
    this.m_CryptData.money = MP.ReadUShort();
    this.m_CryptData.startTime = MP.ReadLong();
    this.m_CryptData.kind = MP.ReadByte();
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
    if ((UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != (UnityEngine.Object) null)
      ((Door) GUIManager.Instance.FindMenu(EGUIWindow.Door)).CloseMenu();
    GameManager.OnRefresh();
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0);
    GUIManager.Instance.HideUILock(EUILock.Crypt);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void Recv_MSG_RESP_CRYPT_Cancel(MessagePacket MP)
  {
    if (MP.ReadByte() == (byte) 0)
    {
      this.m_CryptData.level = (byte) 0;
      this.m_CryptData.money = (ushort) 0;
      this.m_CryptData.startTime = 0L;
      this.m_CryptData.kind = (byte) 0;
      GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
      if ((UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != (UnityEngine.Object) null)
        ((Door) GUIManager.Instance.FindMenu(EGUIWindow.Door)).CloseMenu();
      GameManager.OnRefresh();
      GameManager.OnRefresh(NetworkNews.Refresh_Item);
    }
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_CryptDig, 0);
    GUIManager.Instance.HideUILock(EUILock.Crypt);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
  }

  public void Recv_MSG_RESP_CRYPT_Reward(MessagePacket MP)
  {
    if (MP.ReadByte() != (byte) 0)
      return;
    this.m_CryptData.level = (byte) 0;
    this.m_CryptData.money = (ushort) 0;
    this.m_CryptData.startTime = 0L;
    this.m_CryptData.kind = (byte) 0;
    uint diamond = this.RoleAttr.Diamond;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
    if ((UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != (UnityEngine.Object) null)
      ((Door) GUIManager.Instance.FindMenu(EGUIWindow.Door)).CloseMenu();
    GameManager.OnRefresh();
    GameManager.OnRefresh(NetworkNews.Refresh_Item);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5898U), (ushort) byte.MaxValue);
    GUIManager.Instance.HideUILock(EUILock.Crypt);
    GUIManager.Instance.BuildingData.UpdateBuildState((byte) 5, (ushort) byte.MaxValue);
    AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
    GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = this.RoleAttr.Diamond - diamond;
    GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Diamond, ItemID: (ushort) 0, EndTime: 2f);
  }

  public uint GetExpAddition(uint Exp)
  {
    uint baseValByEffectId = DataManager.Instance.AttribVal.GetEffectBaseValByEffectID((ushort) 304);
    return Exp * (10000U + baseValByEffectId) / 10000U;
  }

  public void SendAccountBind()
  {
    if (NewbieManager.IsNewbie)
      return;
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ACCOUNT_BIND;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public bool CheckMonsterResourceReady(ushort MonsterID)
  {
    MapMonster recordByKey1 = DataManager.mapDataController.MapMonsterTable.GetRecordByKey(MonsterID);
    if ((int) recordByKey1.Index != (int) MonsterID)
      return false;
    Hero recordByKey2 = this.HeroTable.GetRecordByKey(recordByKey1.ModelID);
    if ((int) recordByKey2.HeroKey != (int) recordByKey1.ModelID)
      return false;
    CString Name1 = StringManager.Instance.StaticString1024();
    Name1.ClearString();
    Name1.IntToFormat((long) recordByKey2.Modle, 5);
    Name1.AppendFormat("Role/hero_{0}");
    if (recordByKey2.Modle > (ushort) 0 && !AssetManager.GetAssetBundleDownload(Name1, AssetPath.Role, AssetType.Hero, recordByKey2.Modle))
      return false;
    if (recordByKey1.SoundPackNO != (ushort) 0)
    {
      CString Name2 = StringManager.Instance.StaticString1024();
      Name2.IntToFormat((long) recordByKey1.SoundPackNO, 3);
      Name2.AppendFormat("Role/{0}");
      if (!AssetManager.GetAssetBundleDownload(Name2, AssetPath.Role, AssetType.HeroSFX, recordByKey1.SoundPackNO))
        return false;
    }
    if (recordByKey1.ParticlePackNO != (ushort) 0)
    {
      CString Name3 = StringManager.Instance.StaticString1024();
      Name3.IntToFormat((long) recordByKey1.ParticlePackNO, 3);
      Name3.AppendFormat("Particle/Monster_Effects_{0}");
      if (!AssetManager.GetAssetBundleDownload(Name3, AssetPath.Particle, AssetType.Effects, recordByKey1.ParticlePackNO))
        return false;
    }
    return true;
  }

  public bool CheckHeroBattleResourceReady(HeroFightType type, ushort[] battleHeroID)
  {
    ushort LevelID = 0;
    bool flag = true;
    HeroTeam[] heroTeamArray = new HeroTeam[3];
    if (type == HeroFightType.HeroBattle)
    {
      Level recordByKey = DataManager.StageDataController.LevelTable[(int) DataManager.StageDataController.GetcurrentPointLevelID(out LevelID, (ushort) 0)].GetRecordByKey(LevelID);
      for (int index1 = 0; index1 < 3; ++index1)
      {
        if (recordByKey.Team != null && recordByKey.Team[index1] != (ushort) 0)
        {
          heroTeamArray[index1] = DataManager.Instance.TeamTable.GetRecordByKey(recordByKey.Team[index1]);
          if (heroTeamArray[index1].Arrays != null)
          {
            for (int index2 = 0; index2 < 20; ++index2)
            {
              ushort hero = heroTeamArray[index1].Arrays[index2].Hero;
              if (hero != (ushort) 0)
              {
                if (!this.CheckHeroEffectRes(hero))
                  flag = false;
                if (!this.CheckHero3DMesh(hero))
                  flag = false;
                if (!this.CheckHeroSound(hero))
                  flag = false;
              }
            }
          }
        }
      }
    }
    for (int index = 0; index < battleHeroID.Length; ++index)
    {
      ushort heroID = battleHeroID[index];
      if (!this.CheckHeroEffectRes(heroID))
        flag = false;
      if (!this.CheckHero3DMesh(heroID))
        flag = false;
      if (!this.CheckHeroSound(heroID))
        flag = false;
    }
    return flag;
  }

  public static bool CheckGambleBattleResources()
  {
    GUIManager instance1 = GUIManager.Instance;
    DataManager instance2 = DataManager.Instance;
    HeroTeam recordByKey = DataManager.Instance.TeamTable.GetRecordByKey(DataManager.MapDataController.MapMonsterTable.GetRecordByKey(GamblingManager.Instance.BattleMonsterID).MapTeamInfo[0].TeamID);
    bool flag = true;
    for (int index = 0; index < 20; ++index)
    {
      if (recordByKey.Arrays[index].Hero != (ushort) 0)
      {
        if (!instance2.CheckHero3DMesh(recordByKey.Arrays[index].Hero))
          flag = false;
        if (!instance2.CheckHeroEffectRes(recordByKey.Arrays[index].Hero))
          flag = false;
        if (!instance2.CheckHeroSound(recordByKey.Arrays[index].Hero))
          flag = false;
      }
    }
    return flag;
  }

  public static bool CheckHeroResourceReady(ushort heroID)
  {
    DataManager instance = DataManager.Instance;
    return instance.CheckHero3DMesh(heroID) && instance.CheckHeroEffectRes(heroID) && instance.CheckHeroSound(heroID);
  }

  public bool CheckHero3DMesh(ushort heroID)
  {
    if (heroID == (ushort) 0)
      return true;
    Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
    if (recordByKey.Modle == (ushort) 0)
      return true;
    CString Name = StringManager.Instance.StaticString1024();
    Name.ClearString();
    Name.IntToFormat((long) recordByKey.Modle, 5);
    Name.AppendFormat("Role/hero_{0}");
    return AssetManager.GetAssetBundleDownload(Name, AssetPath.Role, AssetType.Hero, recordByKey.Modle);
  }

  private bool CheckHeroEffectRes(ushort heroID)
  {
    if (heroID == (ushort) 0)
      return true;
    Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
    if (recordByKey.ParticlePackNo == (ushort) 1 || recordByKey.ParticlePackNo == (ushort) 0)
      return true;
    CString Name = StringManager.Instance.StaticString1024();
    Name.ClearString();
    Name.IntToFormat((long) recordByKey.ParticlePackNo, 3);
    Name.AppendFormat("Particle/Monster_Effects_{0}");
    return AssetManager.GetAssetBundleDownload(Name, AssetPath.Particle, AssetType.Effects, recordByKey.ParticlePackNo);
  }

  public bool CheckHeroSound(ushort heroID)
  {
    if (heroID == (ushort) 0)
      return true;
    Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
    if (recordByKey.AudioPackNo == (ushort) 0)
      return true;
    CString Name = StringManager.Instance.StaticString1024();
    Name.ClearString();
    Name.IntToFormat((long) recordByKey.AudioPackNo, 3);
    Name.AppendFormat("Role/{0}");
    return AssetManager.GetAssetBundleDownload(Name, AssetPath.Role, AssetType.HeroSFX, recordByKey.AudioPackNo);
  }

  public void Recv_TELEPORT_LEAVEFOREST(MessagePacket MP)
  {
    DataManager.mapDataController.updateCapitalPoint(MP.ReadUShort(), MP.ReadByte(), DataManager.mapDataController.OtherKingdomData.kingdomID, true);
    ushort num = MP.ReadUShort();
    byte Index = 0;
    ushort leaderId = DataManager.instance.GetLeaderID();
    Vector2 pointCode = GameConstants.MapPosToPointCode(GameConstants.getTileMapPosbySpriteID(this.RoleAttr.CapitalPoint));
    for (int index1 = 0; index1 < 8; ++index1)
    {
      if (((int) num & 1 << index1) != 0)
      {
        Index = (byte) index1;
        this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_Standby;
        for (int index2 = 0; index2 < 5; ++index2)
        {
          ushort index3 = this.MarchEventData[(int) Index].HeroID[index2];
          if (index3 != (ushort) 0)
          {
            if ((int) index3 == (int) leaderId)
            {
              if (DataManager.Instance.beCaptured.nowCaptureStat == LoadCaptureState.None)
                this.TempFightHeroID[(int) index3] = (byte) 0;
            }
            else
              this.TempFightHeroID[(int) index3] = (byte) 0;
          }
          this.MarchEventData[(int) Index].HeroID[index2] = (ushort) 0;
        }
        for (int index4 = 0; index4 < 4; ++index4)
          Array.Clear((Array) this.MarchEventData[(int) Index].TroopData[index4], 0, this.MarchEventData[(int) Index].TroopData[index4].Length);
        this.MarchEventData[(int) Index].Point.zoneID = (ushort) pointCode.x;
        this.MarchEventData[(int) Index].Point.pointID = (byte) pointCode.y;
        for (int index5 = 0; index5 < 5; ++index5)
          this.MarchEventData[(int) Index].ResourceGetCount[index5] = 0U;
        this.MarchEventData[(int) Index].Crystal = 0U;
        this.MarchEventTime[(int) Index].BeginTime = 0L;
        this.MarchEventTime[(int) Index].RequireTime = 0U;
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), false, 0L, 0U);
        this.SetQueueBarData((EQueueBarIndex) (22 + (int) Index), false, 0L, 0U);
      }
    }
    if (((int) num & 256) != 0)
      JailManage.MSG_RESP_LORD_HOME((MessagePacket) null);
    this.Resource[0].Stock = MP.ReadUInt();
    this.Resource[1].Stock = MP.ReadUInt();
    this.Resource[2].Stock = MP.ReadUInt();
    this.Resource[3].Stock = MP.ReadUInt();
    this.Resource[4].Stock = MP.ReadUInt();
    GameManager.OnRefresh(NetworkNews.Refresh_Resource);
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0, eSpentCredits.eImmediately);
    this.CheckTroolCount();
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0);
    this.SoldierTotal = 0L;
    for (int index = 0; index < 16; ++index)
    {
      this.RoleAttr.m_Soldier[index] = MP.ReadUInt();
      this.SoldierTotal += (long) this.RoleAttr.m_Soldier[index];
    }
    GameManager.OnRefresh(NetworkNews.Refresh_Soldier);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
    this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
    if (MP.ReadByte() > (byte) 0)
      GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(12627U));
    else
      GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614U), this.mStringTable.GetStringByID(854U));
    GUIManager.Instance.RemoveAllAttackState();
    this.m_WatchTowerData.Clear();
    this.tmp_WatchTowerData.Clear();
    this.WatchTowerDataCount = 0U;
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1);
  }

  public void RecvCompensation_Notice(MessagePacket MP)
  {
    byte num1 = MP.ReadByte();
    uint num2 = MP.ReadUInt();
    switch ((ECompensationKind) num1)
    {
      case ECompensationKind.ECK_Maintain:
        if (!this.m_MaintainCount && num2 != 0U)
        {
          this.m_Maintain = num2;
          this.m_MaintainCount = true;
          GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 1, 1, openMode: (byte) 0);
          break;
        }
        this.m_Maintain = num2;
        UITreasureBox menu1 = GUIManager.Instance.FindMenu(EGUIWindow.UI_TreasureBox) as UITreasureBox;
        if (!((UnityEngine.Object) menu1 != (UnityEngine.Object) null) || menu1.mKind != 1 || menu1.mGetType != 1)
          break;
        if (num2 != 0U)
        {
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 2);
          break;
        }
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
        GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
        break;
      case ECompensationKind.ECK_UpdateVersion:
        if (!this.m_UpdateVersionCount && num2 != 0U)
        {
          this.m_UpdateVersion = num2;
          this.m_UpdateVersionCount = true;
          GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 1, 2, openMode: (byte) 0);
          break;
        }
        this.m_UpdateVersion = num2;
        UITreasureBox menu2 = GUIManager.Instance.FindMenu(EGUIWindow.UI_TreasureBox) as UITreasureBox;
        if (!((UnityEngine.Object) menu2 != (UnityEngine.Object) null) || menu2.mKind != 1 || menu2.mGetType != 2)
          break;
        if (num2 != 0U)
        {
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 3);
          break;
        }
        GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
        GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
        break;
    }
  }

  public void SendGet_Compensation(byte mType)
  {
    GUIManager.Instance.ShowUILock(EUILock.TreasureBox);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_GET_COMPENSATION;
    messagePacket.AddSeqId();
    messagePacket.Add(mType);
    messagePacket.Send();
  }

  public void RecvGet_Compensation(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.TreasureBox);
    if (MP.ReadByte() == (byte) 0)
    {
      switch ((ECompensationKind) MP.ReadByte())
      {
        case ECompensationKind.ECK_Maintain:
          this.m_MaintainCount = false;
          break;
        case ECompensationKind.ECK_UpdateVersion:
          this.m_UpdateVersionCount = false;
          break;
      }
      uint num = MP.ReadUInt();
      GUIManager.Instance.SetRoleAttrDiamond(num + this.RoleAttr.Diamond, (ushort) 0);
      GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
      GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
      GameManager.OnRefresh();
      GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num;
      GUIManager.Instance.mStartV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
      GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Diamond, ItemID: (ushort) 0, EndTime: 2f);
    }
    else
    {
      GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
      GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
    }
  }

  public void RemoveDoorUIStack(EGUIWindow mwin)
  {
    Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
    if ((UnityEngine.Object) menu == (UnityEngine.Object) null || menu.m_WindowStack.Count <= 1)
      return;
    for (int index = menu.m_WindowStack.Count - 2; index >= 0; --index)
    {
      if (menu.m_WindowStack[index].m_eWindow == mwin)
        menu.m_WindowStack.RemoveAt(index);
    }
  }

  public void RecvWonderOccupied(MessagePacket MP)
  {
    byte index1 = MP.ReadByte();
    if (index1 >= (byte) 8)
      return;
    byte WonderID = MP.ReadByte();
    byte num1 = MP.ReadByte();
    ushort num2 = MP.ReadUShort();
    EMarchEventType type = this.MarchEventData[(int) index1].Type;
    this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_Camp;
    this.MarchEventData[(int) index1].PointKind = POINT_KIND.PK_YOLK;
    this.MarchEventData[(int) index1].DesPointLevel = WonderID;
    if (WonderID < (byte) 40)
    {
      Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
      this.MarchEventData[(int) index1].Point.zoneID = (ushort) yolkPointCode.x;
      this.MarchEventData[(int) index1].Point.pointID = (byte) yolkPointCode.y;
    }
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), false, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index1), false, 0L, 0U);
    for (int index2 = 0; index2 < 16; ++index2)
    {
      if (((int) num2 >> index2 & 1) == 1)
        this.MarchEventData[(int) index1].TroopData[index2 / 4][index2 % 4] = MP.ReadUInt();
    }
    DataManager.msgBuffer[0] = (byte) 81;
    GameConstants.GetBytes((ushort) index1, DataManager.msgBuffer, 1);
    GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    if (type == EMarchEventType.EMET_CampMarching)
    {
      GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(9909U), (ushort) 13);
    }
    else
    {
      if (num1 != (byte) 0)
        return;
      GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7727U), (ushort) 13);
    }
  }

  public void RecvWonderInforceArrived(MessagePacket MP)
  {
    byte index1 = MP.ReadByte();
    if (index1 >= (byte) 8)
      return;
    byte WonderID = MP.ReadByte();
    if (WonderID < (byte) 40)
    {
      Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
      this.MarchEventData[(int) index1].Point.zoneID = (ushort) yolkPointCode.x;
      this.MarchEventData[(int) index1].Point.pointID = (byte) yolkPointCode.y;
    }
    this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_InforceStanby;
    this.MarchEventData[(int) index1].PointKind = POINT_KIND.PK_YOLK;
    this.MarchEventData[(int) index1].DesPointLevel = WonderID;
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), false, 0L, 0U);
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index1), false, 0L, 0U);
    ushort num = MP.ReadUShort();
    for (int index2 = 0; index2 < 16; ++index2)
    {
      if (((int) num >> index2 & 1) == 1)
        this.MarchEventData[(int) index1].TroopData[index2 / 4][index2 % 4] = MP.ReadUInt();
    }
    DataManager.msgBuffer[0] = (byte) 81;
    GameConstants.GetBytes((ushort) index1, DataManager.msgBuffer, 1);
    GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
  }

  public void RecvWonder_Send_Inforce(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    switch (MP.ReadByte())
    {
      case 0:
        byte index1 = MP.ReadByte();
        if (index1 >= (byte) 8)
          break;
        this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
        byte WonderID = MP.ReadByte();
        if (WonderID < (byte) 40)
        {
          Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
          this.MarchEventData[(int) index1].Point.zoneID = (ushort) yolkPointCode.x;
          this.MarchEventData[(int) index1].Point.pointID = (byte) yolkPointCode.y;
        }
        this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_InforceMarching;
        this.MarchEventData[(int) index1].PointKind = POINT_KIND.PK_YOLK;
        this.MarchEventData[(int) index1].DesPointLevel = WonderID;
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), true, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
        ushort num = MP.ReadUShort();
        for (int index2 = 0; index2 < 16; ++index2)
        {
          if (((int) num >> index2 & 1) == 1)
          {
            this.MarchEventData[(int) index1].TroopData[index2 / 4][index2 % 4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index2] -= this.MarchEventData[(int) index1].TroopData[index2 / 4][index2 % 4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) index1].TroopData[index2 / 4][index2 % 4];
          }
        }
        if (this.WarlobbyDetail != null)
        {
          if (this.WarlobbyDetail.EventTime.BeginTime > 0L)
          {
            this.WarlobbyDetail.SelfParticipateTroopIndex = index1;
            this.WarhallProtocol = (ushort) 2487;
          }
          else
            this.WarhallProtocol = (ushort) 0;
        }
        else
          this.WarhallProtocol = (ushort) 0;
        Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
        if ((UnityEngine.Object) menu != (UnityEngine.Object) null)
        {
          if (menu.m_eMapMode == EUIOriginMapMode.OriginMap)
          {
            menu.CloseMenu();
          }
          else
          {
            DataManager.msgBuffer[0] = (byte) 81;
            GameConstants.GetBytes((ushort) index1, DataManager.msgBuffer, 1);
            GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
          }
        }
        this.CancelShieldItemBuff();
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3872U), (ushort) 21);
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0);
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1);
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 5:
        if (this.WarlobbyDetail == null)
          break;
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8568U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
      case 6:
        if (this.WarlobbyDetail == null)
          break;
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8567U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834U), this.mStringTable.GetStringByID(5806U), this.mStringTable.GetStringByID(4034U));
        break;
      case 8:
        if (this.WarlobbyDetail == null)
          break;
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8570U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 11:
        if (this.WarlobbyDetail == null)
          break;
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort) this.WarlobbyDetail.UIWonderID, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8569U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
      case 12:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 13:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 14:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(4827U), this.mStringTable.GetStringByID(4828U));
        break;
      case 15:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(9916U), this.mStringTable.GetStringByID(4828U));
        break;
    }
  }

  public void RecvWonder_Begin_Rally(MessagePacket MP)
  {
    switch (MP.ReadByte())
    {
      case 0:
        byte Index = MP.ReadByte();
        if (Index >= (byte) 8)
          return;
        this.CancelShieldItemBuff();
        this.MarchEventTime[(int) Index].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) Index].RequireTime = MP.ReadUInt();
        byte WonderID = MP.ReadByte();
        this.MarchEventData[(int) Index].Type = EMarchEventType.EMET_RallyStanby;
        this.MarchEventData[(int) Index].PointKind = POINT_KIND.PK_YOLK;
        this.MarchEventData[(int) Index].DesPointLevel = WonderID;
        this.MarchEventData[(int) Index].bRallyHost = (byte) 1;
        if (WonderID < (byte) 40)
        {
          Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
          this.MarchEventData[(int) Index].Point.zoneID = (ushort) yolkPointCode.x;
          this.MarchEventData[(int) Index].Point.pointID = (byte) yolkPointCode.y;
        }
        byte num1 = MP.ReadByte();
        ushort num2 = MP.ReadUShort();
        for (int index1 = 0; index1 < this.MarchEventData[(int) Index].HeroID.Length; ++index1)
        {
          this.MarchEventData[(int) Index].HeroID[index1] = (ushort) 0;
          if (index1 < (int) num1)
          {
            ushort index2 = MP.ReadUShort();
            this.MarchEventData[(int) Index].HeroID[index1] = index2;
            this.TempFightHeroID[(int) index2] = (byte) 1;
          }
        }
        for (int index = 0; index < 16; ++index)
        {
          if (((int) num2 >> index & 1) == 1)
          {
            this.MarchEventData[(int) Index].TroopData[index / 4][index % 4] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index] -= this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
            this.SoldierTotal -= (long) this.MarchEventData[(int) Index].TroopData[index / 4][index % 4];
          }
        }
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) Index, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        this.SetFightHeroData();
        GameManager.OnRefresh(NetworkNews.Refresh_Hero);
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) Index), true, this.MarchEventTime[(int) Index].BeginTime, this.MarchEventTime[(int) Index].RequireTime);
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904U), (ushort) 15);
        if (this.WarhallProtocol != (ushort) 2476)
          this.WarhallProtocol = (ushort) 0;
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, Index);
        this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4892U), this.mStringTable.GetStringByID(4893U), this.mStringTable.GetStringByID(4894U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4895U), this.mStringTable.GetStringByID(4896U), this.mStringTable.GetStringByID(4897U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5729U), this.mStringTable.GetStringByID(5730U), this.mStringTable.GetStringByID(5731U));
        break;
      case 5:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4910U), this.mStringTable.GetStringByID(4911U), this.mStringTable.GetStringByID(4912U));
        break;
      case 6:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5732U), this.mStringTable.GetStringByID(5733U), this.mStringTable.GetStringByID(5734U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715U), this.mStringTable.GetStringByID(5716U), this.mStringTable.GetStringByID(5717U));
        break;
      case 8:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4898U), this.mStringTable.GetStringByID(4899U), this.mStringTable.GetStringByID(4900U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5735U), this.mStringTable.GetStringByID(5736U), this.mStringTable.GetStringByID(5737U));
        break;
      case 10:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4901U), this.mStringTable.GetStringByID(4902U), this.mStringTable.GetStringByID(4903U));
        break;
      case 11:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9769U), this.mStringTable.GetStringByID(4034U));
        break;
      case 12:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9770U), this.mStringTable.GetStringByID(4034U));
        break;
      case 13:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 14:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
      case 15:
        ushort yolkIdbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.RallyDesPoint.zoneID, this.RallyDesPoint.pointID, (ushort) 0);
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIdbyPointCode, (ushort) 0));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8564U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565U));
        break;
    }
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
  }

  public void RecvWonder_Rally_Atkmarch(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    byte WonderID = MP.ReadByte();
    if (WonderID < (byte) 40)
    {
      Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
      this.MarchEventData[(int) index].Point.zoneID = (ushort) yolkPointCode.x;
      this.MarchEventData[(int) index].Point.pointID = (byte) yolkPointCode.y;
    }
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_RallyAttack;
    this.CancelShieldItemBuff();
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_YOLK;
    this.MarchEventData[(int) index].DesPointLevel = WonderID;
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, 0L, 0U);
    this.JoinedRallyDataType[(int) index].State = (byte) 2;
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
  }

  public bool CheckLanguageTranslateByIdx(int Idx) => true;

  public void GetMaxActivityItem()
  {
    int hour = GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Hour;
    int num1 = 0;
    if (hour - 5 < 0)
    {
      num1 = -1;
      this.mActivityCDTime = (double) (18000 - (hour * 3600 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Minute * 60 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Second));
    }
    else
      this.mActivityCDTime = (double) (86400 - (hour * 3600 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Minute * 60 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Second));
    int num2 = 0;
    ushort num3 = 0;
    if (this.ActivitylistEquip.Count != 0 && this.mLordEquip != null && this.mLordEquip.ForgeActivity_mKind != (byte) 0)
      num3 = this.ActivitylistEquip[(int) (ushort) ((uint) this.mLordEquip.ForgeActivity_mKind - 1U)];
    this.ActivityEquipListIdx.Clear();
    int length = 0;
    CString Name = StringManager.Instance.StaticString1024();
    Name.Append("UI/UI_forge_equip_pop");
    int Key = 0;
    AssetBundle assetBundle = AssetManager.GetAssetBundle(Name, out Key);
    if ((UnityEngine.Object) assetBundle != (UnityEngine.Object) null)
      length = assetBundle.LoadAll(typeof (Sprite)).Length + 1;
    bool[] flagArray = new bool[length];
    ushort[] numArray = new ushort[length];
    this.ActivitylistEquip.Clear();
    ActivityEquip activityEquip = new ActivityEquip();
    for (int Index = 0; Index < this.MallEquipmantTable.TableCount; ++Index)
    {
      num2 = 0;
      MallEquipmant recordByIndex = this.MallEquipmantTable.GetRecordByIndex(Index);
      int num4 = (int) this.MallEquipmantTable.GetRecordByIndex(Index).EquipData[1] * 30 + (int) this.MallEquipmantTable.GetRecordByIndex(Index).EquipData[2];
      int num5 = GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Month * 30 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Day + num1;
      if ((int) recordByIndex.EquipData[0] == GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Year - 2000 && num4 <= num5 || (int) recordByIndex.EquipData[0] < GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Year - 2000)
      {
        int num6 = this.ActivitylistEquip.BinarySearch(recordByIndex.EquipKey, (IComparer<ushort>) this.mActSortItem);
        if (num6 < 0 && (int) recordByIndex.EquipIcon < flagArray.Length)
        {
          if (!flagArray[(int) recordByIndex.EquipIcon])
          {
            this.ActivitylistEquip.Insert(~num6, recordByIndex.EquipKey);
            flagArray[(int) recordByIndex.EquipIcon] = true;
            numArray[(int) recordByIndex.EquipIcon] = recordByIndex.EquipKey;
          }
          else
          {
            activityEquip.Key = recordByIndex.EquipKey;
            activityEquip.Index = numArray[(int) recordByIndex.EquipIcon];
            this.ActivityEquipListIdx.Add(activityEquip);
          }
        }
      }
    }
    if (this.mLordEquip != null && this.mLordEquip.ForgeActivity_mKind != (byte) 0)
    {
      for (int index = 0; index < this.ActivitylistEquip.Count; ++index)
      {
        if ((int) num3 == (int) this.ActivitylistEquip[index])
          this.mLordEquip.ForgeActivity_mKind = (byte) (index + 1);
      }
    }
    if (Key != 0)
      AssetManager.UnloadAssetBundle(Key);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_Forge_ActivityItem, 3, (int) num3);
  }

  public bool CheckPrizeFlag(byte checkFlag)
  {
    return ((int) (this.RoleAttr.PrizeFlag >> (int) checkFlag) & 1) == 1;
  }

  public void SendModifyKingdomBullitin(string mstr)
  {
    GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
    char[] charArray = mstr.ToCharArray();
    if (this.m_BannedWord != null)
      this.m_BannedWord.CheckBannedWord(charArray);
    byte[] bytes = Encoding.UTF8.GetBytes(charArray);
    MessagePacket messagePacket = new MessagePacket((ushort) 1044);
    messagePacket.Protocol = Protocol._MSG_REQUEST_MODIFY_KINGDOM_BULLITIN;
    messagePacket.AddSeqId();
    messagePacket.Add((ushort) bytes.Length);
    messagePacket.Add(bytes, len: 1024);
    byte data = !ArabicTransfer.Instance.IsArabicStr(mstr) ? (byte) 1 : (byte) 2;
    messagePacket.Add(data);
    messagePacket.Send();
  }

  public unsafe void RecvModifyKingdomBullitin(MessagePacket MP)
  {
    if (MP.ReadByte() == (byte) 0)
    {
      ushort VSize = MP.ReadUShort();
      this.mKingdomClassifieds = MP.ReadString((int) VSize);
      string str = this.mKingdomClassifieds;
      char* chPtr = (char*) ((IntPtr) str + RuntimeHelpers.OffsetToStringData);
      for (int index = 0; index < this.mKingdomClassifieds.Length; ++index)
      {
        if (!this.isNotEmojiCharacter(this.mKingdomClassifieds[index]))
          chPtr[index] = ' ';
      }
      str = (string) null;
      this.mKingdomClassifiedsFlag = MP.ReadByte();
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Kingdom_Classifieds, 0);
    }
    GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
  }

  public void SendKingdomBullitin_Info(bool forceNormal = false)
  {
    GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
    MessagePacket messagePacket = forceNormal || DataManager.MapDataController.FocusKingdomID == (ushort) 0 || (int) DataManager.MapDataController.FocusKingdomID == (int) DataManager.MapDataController.OtherKingdomData.kingdomID ? new MessagePacket((ushort) 1024) : MessagePacket.GetGuestMessagePack();
    messagePacket.Protocol = Protocol._MSG_REQUEST_KINGDOM_BULLITIN_INFO;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvKingdomBullitin(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
    ushort VSize = MP.ReadUShort();
    string kingdomClassifieds = this.mKingdomClassifieds;
    this.mKingdomClassifieds = MP.ReadString((int) VSize);
    this.mKingdomClassifiedsFlag = MP.ReadByte();
    if (kingdomClassifieds != this.mKingdomClassifieds)
      this.bNeedTranslateClassifieds = true;
    if ((bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Kingdom_Classifieds))
    {
      GUIManager.Instance.UpdateUI(EGUIWindow.UI_Kingdom_Classifieds, 4);
    }
    else
    {
      Door menu = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
      if (!((UnityEngine.Object) menu != (UnityEngine.Object) null))
        return;
      menu.OpenMenu(EGUIWindow.UI_Kingdom_Classifieds);
    }
  }

  public void RecvNewKingdomBullitin(MessagePacket MP)
  {
    this.mKingdomMsgTag = MP.ReadString(3);
    this.mKingdomMsgName = MP.ReadString(12);
    this.KingdomMsg.ClearString();
    CString cstring = StringManager.Instance.StaticString1024();
    CString Name = StringManager.Instance.StaticString1024();
    CString Tag = StringManager.Instance.StaticString1024();
    cstring.ClearString();
    Name.ClearString();
    Tag.ClearString();
    Name.Append(this.mKingdomMsgName);
    Tag.Append(this.mKingdomMsgTag);
    GUIManager.Instance.FormatRoleNameForChat(cstring, Name, Tag, (ushort) 0, GUIManager.Instance.IsArabic);
    this.KingdomMsg.StringToFormat(cstring);
    this.KingdomMsg.AppendFormat(this.mStringTable.GetStringByID(1476U));
    this.AddSystemMessage(this.KingdomMsg, (byte) 5, -1L);
    if (!(bool) (UnityEngine.Object) GUIManager.Instance.FindMenu(EGUIWindow.UI_Kingdom_Classifieds))
      return;
    this.SendKingdomBullitin_Info();
  }

  public void SendMailBullitin()
  {
    GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_MAIL_BULLITIN;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvMailBullitin(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
    if (MP.ReadByte() != (byte) 0)
      return;
    GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
    GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1452U), (ushort) byte.MaxValue);
    GameManager.OnRefresh();
  }

  public void SendAmnesty()
  {
    GUIManager.Instance.ShowUILock(EUILock.Amnesty);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_AMNESTY;
    messagePacket.AddSeqId();
    messagePacket.Send();
  }

  public void RecvAmnesty(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Amnesty);
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1461U), (ushort) byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1460U), (ushort) byte.MaxValue);
        break;
      case 2:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9719U), (ushort) byte.MaxValue);
        break;
      case 3:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1464U), (ushort) byte.MaxValue);
        break;
    }
  }

  public bool CheckMoveingKingdom()
  {
    bool flag = true;
    if ((int) DataManager.MapDataController.FocusKingdomID == (int) ActivityManager.Instance.KOWKingdomID)
    {
      if ((long) DataManager.MapDataController.GetKingdomTime(DataManager.MapDataController.kingdomData.kingdomID) + 7776000L - this.ServerTime > 0L)
        flag = false;
    }
    else
    {
      ulong kingdomTime = DataManager.MapDataController.GetKingdomTime(DataManager.MapDataController.FocusKingdomID);
      if ((long) kingdomTime + 7776000L - this.ServerTime > 0L && kingdomTime > DataManager.MapDataController.kingdomData.kingdomTime && !DataManager.Instance.IsNewbie())
        flag = false;
    }
    return flag;
  }

  public void SendAllanceDismissLeader(long userid)
  {
    GUIManager.Instance.ShowUILock(EUILock.AllanceDismissLeader);
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_DISMISS_LEADER;
    messagePacket.AddSeqId();
    messagePacket.Add(userid);
    messagePacket.Send();
  }

  public void RecvAllanceDismissLeader(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.AllanceDismissLeader);
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
        GameManager.OnRefresh();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 5);
        break;
    }
  }

  public void RecvAllance_Change_HomeKingdom(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.AllianceChangHomeKingdom);
    switch (MP.ReadByte())
    {
      case 0:
        GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(), (ushort) 0);
        GameManager.OnRefresh();
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9568U), (ushort) byte.MaxValue);
        break;
      case 2:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9571U), (ushort) byte.MaxValue);
        break;
    }
  }

  public bool HasNewbieShield() => ((int) this.RoleAttr.PrizeFlag & 1024) != 0;

  public void SendTroopmemory_Setup(byte mIdx, TroopMemoryData mData)
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_TROOPMEMORY_SETUP;
    messagePacket.AddSeqId();
    messagePacket.Add(mIdx);
    for (int index = 0; index < 5; ++index)
      messagePacket.Add(mData.Leader[index]);
    messagePacket.Add(mData.MaxTroop);
    for (int index = 0; index < 16; ++index)
      messagePacket.Add(mData.TroopData[index]);
    messagePacket.Add(mData.Label, 40);
    messagePacket.Send();
    GUIManager.Instance.ShowUILock(EUILock.SetTroopmemory);
  }

  public void RecvTroopmemory_Setup(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.SetTroopmemory);
    switch (MP.ReadByte())
    {
      case 0:
        byte index1 = MP.ReadByte();
        switch (index1)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
            for (int index2 = 0; index2 < 5; ++index2)
              this.mTroopMemoryData[(int) index1].Leader[index2] = MP.ReadUShort();
            this.mTroopMemoryData[(int) index1].MaxTroop = MP.ReadUInt();
            for (int index3 = 0; index3 < 16; ++index3)
            {
              int index4 = (3 - index3 % 4) * 4 + index3 / 4;
              this.mTroopMemoryData[(int) index1].TroopData[index4] = MP.ReadUInt();
            }
            this.mTroopMemoryData[(int) index1].Label = MP.ReadString(40);
            break;
        }
        this.TeamName.ClearString();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 2);
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(935U), (ushort) byte.MaxValue);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(661U), (ushort) byte.MaxValue);
        break;
      case 2:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7226U), (ushort) byte.MaxValue);
        break;
      case 3:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5349U), (ushort) byte.MaxValue);
        break;
      case 4:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5349U), (ushort) byte.MaxValue);
        break;
    }
  }

  public void RecvTroopmemory_Data(MessagePacket MP)
  {
    byte num = MP.ReadByte();
    for (int index1 = 0; index1 < (int) num; ++index1)
    {
      for (int index2 = 0; index2 < 5; ++index2)
        this.mTroopMemoryData[index1].Leader[index2] = MP.ReadUShort();
      this.mTroopMemoryData[index1].MaxTroop = MP.ReadUInt();
      for (int index3 = 0; index3 < 16; ++index3)
      {
        int index4 = (3 - index3 % 4) * 4 + index3 / 4;
        this.mTroopMemoryData[index1].TroopData[index4] = MP.ReadUInt();
      }
      this.mTroopMemoryData[index1].Label = MP.ReadString(40);
    }
  }

  public void SendWonderHost(ushort[] LeaderID, uint[] TroopData, byte WonderID)
  {
    MessagePacket messagePacket = new MessagePacket((ushort) 1024);
    messagePacket.Protocol = Protocol._MSG_REQUEST_SEND_WONDERHOST;
    messagePacket.AddSeqId();
    for (int index = 0; index < LeaderID.Length; ++index)
      messagePacket.Add(LeaderID[index]);
    for (int index = 0; index < TroopData.Length; ++index)
      messagePacket.Add(TroopData[index]);
    messagePacket.Add(WonderID);
    messagePacket.Send();
  }

  public void RecvWonderHost(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.Expedition);
    GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
    switch (MP.ReadByte())
    {
      case 0:
        byte index1 = MP.ReadByte();
        if (index1 >= (byte) 8)
          break;
        this.MarchEventData[(int) index1].Type = EMarchEventType.EMET_CampMarching;
        this.CancelShieldItemBuff();
        for (int index2 = 0; index2 < 5; ++index2)
        {
          ushort index3 = MP.ReadUShort();
          this.MarchEventData[(int) index1].HeroID[index2] = index3;
          if (index3 != (ushort) 0)
            this.TempFightHeroID[(int) index3] = (byte) 1;
        }
        for (int index4 = 0; index4 < 4; ++index4)
        {
          for (int index5 = 0; index5 < 4; ++index5)
          {
            this.MarchEventData[(int) index1].TroopData[index4][index5] = MP.ReadUInt();
            this.RoleAttr.m_Soldier[index4 * 4 + index5] -= this.MarchEventData[(int) index1].TroopData[index4][index5];
            this.SoldierTotal -= (long) this.MarchEventData[(int) index1].TroopData[index4][index5];
          }
        }
        byte WonderID = MP.ReadByte();
        if (WonderID < (byte) 40)
        {
          Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort) WonderID, (ushort) 0);
          this.MarchEventData[(int) index1].Point.zoneID = (ushort) yolkPointCode.x;
          this.MarchEventData[(int) index1].Point.pointID = (byte) yolkPointCode.y;
        }
        this.MarchEventData[(int) index1].PointKind = POINT_KIND.PK_YOLK;
        this.MarchEventData[(int) index1].bRallyHost = (byte) 2;
        this.MarchEventData[(int) index1].DesPointLevel = WonderID;
        this.SetFightHeroData();
        GameManager.OnRefresh(NetworkNews.Refresh_Hero);
        this.CheckTroolCount();
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
        this.MarchEventTime[(int) index1].BeginTime = MP.ReadLong();
        this.MarchEventTime[(int) index1].RequireTime = MP.ReadUInt();
        this.SetQueueBarData((EQueueBarIndex) (2 + (int) index1), true, this.MarchEventTime[(int) index1].BeginTime, this.MarchEventTime[(int) index1].RequireTime);
        DataManager.msgBuffer[0] = (byte) 81;
        GameConstants.GetBytes((ushort) index1, DataManager.msgBuffer, 1);
        GameManager.notifyObservers((byte) 1, (byte) 0, DataManager.msgBuffer);
        break;
      case 1:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(8459U), this.mStringTable.GetStringByID(4034U));
        break;
      case 2:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(7520U), this.mStringTable.GetStringByID(4034U));
        break;
      case 3:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(7095U), this.mStringTable.GetStringByID(4034U));
        break;
      case 4:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(11044U), this.mStringTable.GetStringByID(4034U));
        break;
      case 5:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(8459U), this.mStringTable.GetStringByID(4034U));
        break;
      case 6:
        GUIManager.Instance.MsgStr.ClearString();
        GUIManager.Instance.MsgStr.IntToFormat((long) DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM));
        GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959U));
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034U));
        break;
      case 7:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826U), this.mStringTable.GetStringByID(119U), this.mStringTable.GetStringByID(4828U));
        break;
      case 8:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9769U), this.mStringTable.GetStringByID(4034U));
        break;
      case 9:
        GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967U), this.mStringTable.GetStringByID(9771U), this.mStringTable.GetStringByID(4034U));
        break;
    }
  }

  public void RecvWinderhostReturn(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_YOLK;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_CampReturn;
    this.MarchEventData[(int) index].bRallyHost = (byte) 2;
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    this.CheckTroolCount();
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9911U), (ushort) byte.MaxValue);
  }

  public bool CheckDailyGift()
  {
    ActivityManager instance = ActivityManager.Instance;
    bool flag = false;
    if (this.mDailyGift_Pic != (ushort) 0)
    {
      if (instance.SPLastGetDailyGiftTime == 0L)
        flag = true;
      else if (this.mDailyGift.BeginTime != 0L)
      {
        long num = this.mDailyGift.BeginTime + (long) ((int) ((instance.ServerEventTime - this.mDailyGift.BeginTime) / 86400L) * 86400);
        if (instance.SPLastGetDailyGiftTime < num)
          flag = true;
      }
    }
    return flag;
  }

  public void Recv_DailyGift(MessagePacket MP)
  {
    GUIManager.Instance.HideUILock(EUILock.TreasureBox);
    switch (MP.ReadByte())
    {
      case 0:
        ActivityManager.Instance.SetLastGetDailyGiftTime(MP.ReadLong());
        ushort num1 = MP.ReadUShort();
        ushort num2 = MP.ReadUShort();
        int num3 = (int) MP.ReadByte();
        uint num4 = MP.ReadUInt();
        if (num4 != 0U)
          this.RoleAttr.Diamond += num4;
        uint num5 = MP.ReadUInt();
        if (num5 != 0U)
          this.RoleAlliance.Money += num5;
        Vector2 mV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
        AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
        Equip recordByKey = this.EquipTable.GetRecordByKey(num1);
        if (recordByKey.EquipKind == (byte) 6 && recordByKey.PropertiesInfo[0].Propertieskey == (ushort) 4 && recordByKey.PropertiesInfo[1].Propertieskey == (ushort) 1)
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.TreasureBox2, ItemID: num1, EndTime: 2f);
        else if (num4 != 0U)
        {
          GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num4;
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.Diamond, ItemID: (ushort) 0, EndTime: 2f);
          GameManager.OnRefresh();
        }
        else if (num5 != 0U)
        {
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.AllianceMoney, ItemID: (ushort) 0, EndTime: 2f);
          GameManager.OnRefresh(NetworkNews.Refresh_Alliance);
        }
        else
        {
          ushort curItemQuantity = this.GetCurItemQuantity(num1, (byte) 0);
          if (curItemQuantity < ushort.MaxValue)
            this.SetCurItemQuantity(num1, (ushort) ((uint) curItemQuantity + (uint) num2), (byte) 0, 0L);
          GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV2, SpeciallyEffect_Kind.Item, ItemID: num1, EndTime: 2f);
        }
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8);
        break;
      case 1:
        this.mDailyGift_Pic = (ushort) 0;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 23);
        break;
      case 2:
        this.mDailyGift_Pic = (ushort) 0;
        GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8);
        GUIManager.Instance.UpdateUI(EGUIWindow.Door, 23);
        break;
    }
  }

  public void Recv_NPCCITY_RALLY_ATKMARCH(MessagePacket MP)
  {
    byte index = MP.ReadByte();
    if (index >= (byte) 8)
      return;
    this.MarchEventData[(int) index].Type = EMarchEventType.EMET_RallyAttack;
    this.JoinedRallyDataType[(int) index].RallyPoint = this.MarchEventData[(int) index].Point;
    this.MarchEventData[(int) index].Point.zoneID = MP.ReadUShort();
    this.MarchEventData[(int) index].Point.pointID = MP.ReadByte();
    this.MarchEventData[(int) index].DesPointLevel = MP.ReadByte();
    this.MarchEventData[(int) index].DesPlayerName = string.Empty;
    this.MarchEventTime[(int) index].BeginTime = MP.ReadLong();
    this.MarchEventTime[(int) index].RequireTime = MP.ReadUInt();
    this.MarchEventData[(int) index].PointKind = POINT_KIND.PK_CITY;
    this.SetFightHeroData();
    GameManager.OnRefresh(NetworkNews.Refresh_Hero);
    this.SetQueueBarData((EQueueBarIndex) (2 + (int) index), false, 0L, 0U);
    this.JoinedRallyDataType[(int) index].State = (byte) 2;
    this.SetQueueBarData((EQueueBarIndex) (22 + (int) index), true, this.MarchEventTime[(int) index].BeginTime, this.MarchEventTime[(int) index].RequireTime);
    GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0);
    this.CheckTroolCount();
  }

  public void RecvActivityAsSummon(MessagePacket MP)
  {
    byte x = MP.ReadByte();
    switch (x)
    {
      case 0:
        if (x == (byte) 0)
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, 0);
        else
          GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, -1);
        GUIManager.Instance.HideUILock(EUILock.Battle);
        break;
      case 1:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753U), (ushort) byte.MaxValue);
        goto case 0;
      case 2:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1353U), (ushort) byte.MaxValue);
        goto case 0;
      case 3:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14511U), (ushort) byte.MaxValue);
        goto case 0;
      case 4:
      case 6:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8459U), (ushort) byte.MaxValue);
        goto case 0;
      case 8:
        GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14515U), (ushort) byte.MaxValue);
        goto case 0;
      default:
        CString cstring = StringManager.Instance.StaticString1024();
        cstring.IntToFormat((long) x);
        cstring.AppendFormat(this.mStringTable.GetStringByID(14502U));
        GUIManager.Instance.AddHUDMessage(cstring.ToString(), (ushort) byte.MaxValue);
        goto case 0;
    }
  }

  private struct _TalentUpdateQueue
  {
    public ushort TalentID;
    public byte AddLevel;
    public byte Type;
  }

  public struct _SaveTalentData
  {
    public byte SaveIndex;
    public byte[] SaveTalentData;
    public CString TagName;
    public CString DefaultTagName;
    public ushort RoleTalentPoint;
    public byte NoUseTalent;

    public void Initial(byte id)
    {
      this.SaveIndex = id;
      this.RoleTalentPoint = (ushort) 0;
      this.SaveTalentData = new byte[100];
      this.TagName = new CString((int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE + 1);
      this.DefaultTagName = new CString((int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE + 1);
      this.TagName.ClearString();
      this.DefaultTagName.ClearString();
      this.DefaultTagName.IntToFormat((long) id);
      this.DefaultTagName.AppendFormat(DataManager.instance.mStringTable.GetStringByID(928U));
      this.NoUseTalent = (byte) 1;
    }

    public void InitSaveTalentData(MessagePacket MP)
    {
      this.NoUseTalent = (byte) 1;
      this.RoleTalentPoint = MP.ReadUShort();
      MP.ReadStringPlus((int) GameConstants.MAX_TALENT_CACHE_NAME_BYTE, this.TagName);
      MP.ReadBlock(this.SaveTalentData, 0, 100);
      for (int index = 0; index < 100; ++index)
      {
        if (this.SaveTalentData[index] > (byte) 0)
        {
          this.NoUseTalent = (byte) 0;
          break;
        }
      }
    }

    public void SetTagName(CString name)
    {
      this.TagName.ClearString();
      this.TagName.Append(name);
    }

    public CString GetTagName() => this.TagName.Length > 0 ? this.TagName : this.DefaultTagName;
  }

  public sealed class SerialKiller : SerializationBinder
  {
    public override System.Type BindToType(string assemblyName, string typeName)
    {
      return System.Type.GetType(string.Format("{0}, {1}", (object) typeName, (object) Assembly.GetExecutingAssembly().FullName));
    }
  }

  public class MailDataComparer : IComparer<MailBox>
  {
    public int Compare(MailBox x, MailBox y)
    {
      return x.Serial == 0U || y.Serial != 0U && x.Timing <= y.Timing && (x.Serial <= y.Serial || x.Timing != y.Timing) ? 1 : -1;
    }
  }

  public enum eMsgState
  {
    EMS_Null,
    EMS_Begin,
    EMS_End,
    EMS_BeginAndEnd,
  }
}
